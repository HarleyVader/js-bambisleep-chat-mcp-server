version: '3.8'

services:
  # MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=sqlite:./data/database.sqlite
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./workspace:/app/workspace
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - mcp-network

  # MCP Agent
  mcp-agent:
    build:
      context: .
      dockerfile: docker/Dockerfile.agent
    environment:
      - NODE_ENV=production
      - MCP_SERVER_URL=http://mcp-server:3000
    env_file:
      - .env
    volumes:
      - ./workspace:/app/workspace
      - ./logs:/app/logs
    depends_on:
      - mcp-server
    restart: unless-stopped
    networks:
      - mcp-network

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - mcp-network

  # Optional: PostgreSQL for production database
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: mcp_server
  #     POSTGRES_USER: mcp_user
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - mcp-network

  # Optional: Nginx reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./docker/nginx.conf:/etc/nginx/nginx.conf
  #     - ./ssl:/etc/ssl/certs
  #   depends_on:
  #     - mcp-server
  #   restart: unless-stopped
  #   networks:
  #     - mcp-network

volumes:
  redis-data:
  # postgres-data:

networks:
  mcp-network:
    driver: bridge
