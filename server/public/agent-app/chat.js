"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbambisleep_chat_agent"] = self["webpackChunkbambisleep_chat_agent"] || []).push([[377],{

/***/ 9039:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ chat_ChatInterface)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./src/services/emotionalIntelligence.js\nvar emotionalIntelligence = __webpack_require__(8839);\n// EXTERNAL MODULE: ./src/services/memoryService.js\nvar memoryService = __webpack_require__(9522);\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(4848);\n;// ./src/components/chat/MessageBubble.js\n// MessageBubble.js - Enhanced message component for Agent Dr Girlfriend\n\n\nconst MessageBubble = _ref => {\n  let {\n    message\n  } = _ref;\n  const isAgent = message.sender === 'agent';\n  const [isVisible, setIsVisible] = (0,react.useState)(false);\n\n  // Trigger entrance animation\n  (0,react.useEffect)(() => {\n    const timer = setTimeout(() => setIsVisible(true), 50);\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Mood-based emoji mapping\n  const getMoodEmoji = mood => {\n    const moodEmojis = {\n      happy: '😊',\n      romantic: '💖',\n      excited: '✨',\n      sad: '💙',\n      thoughtful: '🤔',\n      playful: '😏',\n      supportive: '🤗',\n      neutral: '👩‍⚕️'\n    };\n    return moodEmojis[mood] || moodEmojis.neutral;\n  };\n\n  // Format timestamp\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: `message-container ${isAgent ? 'agent-message' : 'user-message'} ${isVisible ? 'visible' : ''}`,\n    \"data-mood\": message.mood || 'neutral',\n    children: [isAgent && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"message-avatar agent-avatar\",\n      \"data-mood\": message.mood,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"avatar-emoji\",\n        children: getMoodEmoji(message.mood)\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"avatar-status-ring\"\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: `message-bubble ${isAgent ? 'message-agent' : 'message-user'}`,\n      \"data-mood\": message.mood || 'neutral',\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"message-content\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n          className: \"message-text\",\n          children: message.text\n        }), isAgent && message.emotion && /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"emotion-indicator\",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"emotion-tag\",\n            children: typeof message.emotion === 'string' ? message.emotion : message.emotion.emotion || 'neutral'\n          })\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"message-footer\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"message-timestamp\",\n          children: formatTime(message.timestamp)\n        }), !isAgent && /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"message-status\",\n          children: \"\\u2713\"\n        })]\n      })]\n    }), !isAgent && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"message-avatar user-avatar\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"avatar-emoji\",\n        children: \"\\uD83D\\uDC64\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"avatar-status-ring user-ring\"\n      })]\n    })]\n  });\n};\n/* harmony default export */ const chat_MessageBubble = (MessageBubble);\n// EXTERNAL MODULE: ./src/services/nameTransformationService.js\nvar nameTransformationService = __webpack_require__(113);\n;// ./src/components/chat/VoiceInput.js\n// VoiceInput.js - Enhanced voice input component for Agent Dr Girlfriend\n// Following copilot-instructions.md: Voice integration with Web Speech API\n\n\n\n\nconst VoiceInput = _ref => {\n  let {\n    onTranscript,\n    onError,\n    className = ''\n  } = _ref;\n  const [isListening, setIsListening] = (0,react.useState)(false);\n  const [isSupported, setIsSupported] = (0,react.useState)(false);\n  const [transcript, setTranscript] = (0,react.useState)('');\n  const [confidence, setConfidence] = (0,react.useState)(0);\n  const [error, setError] = (0,react.useState)(null);\n  const recognitionRef = (0,react.useRef)(null);\n  const timeoutRef = (0,react.useRef)(null);\n\n  // Check for speech recognition support\n  (0,react.useEffect)(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    setIsSupported(!!SpeechRecognition);\n    if (SpeechRecognition) {\n      recognitionRef.current = new SpeechRecognition();\n      setupRecognition();\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.abort();\n      }\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  const setupRecognition = () => {\n    const recognition = recognitionRef.current;\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n    recognition.maxAlternatives = 3;\n    recognition.onstart = () => {\n      setIsListening(true);\n      setError(null);\n      setTranscript('');\n      setConfidence(0);\n\n      // Set timeout to stop listening after 30 seconds\n      timeoutRef.current = setTimeout(() => {\n        stopListening();\n      }, 30000);\n    };\n    recognition.onresult = event => {\n      let finalTranscript = '';\n      let interimTranscript = '';\n      let bestConfidence = 0;\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const result = event.results[i];\n        const resultTranscript = result[0].transcript;\n        const resultConfidence = result[0].confidence;\n        if (result.isFinal) {\n          finalTranscript += resultTranscript;\n          bestConfidence = Math.max(bestConfidence, resultConfidence);\n        } else {\n          interimTranscript += resultTranscript;\n        }\n      }\n      setTranscript(finalTranscript || interimTranscript);\n      setConfidence(bestConfidence);\n\n      // If we have a final result, send it\n      if (finalTranscript.trim()) {\n        onTranscript(finalTranscript.trim());\n        stopListening();\n\n        // Save voice interaction for analytics\n        saveVoiceInteraction(finalTranscript, bestConfidence);\n      }\n    };\n    recognition.onerror = event => {\n      const errorMessage = getErrorMessage(event.error);\n      setError(errorMessage);\n      setIsListening(false);\n      if (onError) {\n        onError(errorMessage);\n      }\n\n      // Clear timeout\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n\n      // Clear timeout\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  };\n  const getErrorMessage = error => {\n    switch (error) {\n      case 'no-speech':\n        return 'I didn\\'t hear anything, darling. Try speaking a bit louder.';\n      case 'audio-capture':\n        return 'I can\\'t access your microphone. Please check your permissions.';\n      case 'not-allowed':\n        return 'Microphone access is blocked. Please enable it to use voice input.';\n      case 'network':\n        return 'Network error occurred. Please check your connection.';\n      case 'aborted':\n        return 'Voice input was cancelled.';\n      default:\n        return 'Voice recognition error occurred. Please try again.';\n    }\n  };\n  const startListening = () => {\n    if (!isSupported) {\n      setError('Speech recognition is not supported in this browser.');\n      return;\n    }\n    if (recognitionRef.current && !isListening) {\n      try {\n        recognitionRef.current.start();\n      } catch (error) {\n        setError('Could not start voice recognition. Please try again.');\n      }\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n    }\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n  };\n  const saveVoiceInteraction = async (text, confidence) => {\n    try {\n      const voiceHistory = (await (0,memoryService/* getMemory */.So)('voice_interactions')) || [];\n      const interaction = {\n        timestamp: new Date().toISOString(),\n        transcript: text,\n        confidence: confidence,\n        wordCount: text.split(' ').length\n      };\n      voiceHistory.push(interaction);\n\n      // Keep only last 50 voice interactions\n      if (voiceHistory.length > 50) {\n        voiceHistory.splice(0, voiceHistory.length - 50);\n      }\n      await (0,memoryService/* setMemory */.S0)('voice_interactions', voiceHistory);\n    } catch (error) {\n      console.error('Error saving voice interaction:', error);\n    }\n  };\n  const getButtonText = () => {\n    if (!isSupported) return '🚫 Voice Not Supported';\n    if (isListening) return '🎤 Listening...';\n    return '🎤 Speak';\n  };\n  const getButtonClass = () => {\n    let classes = `voice-button ${className}`;\n    if (isListening) classes += ' listening';\n    if (!isSupported) classes += ' unsupported';\n    if (error) classes += ' error';\n    return classes;\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: \"voice-input-container\",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n      onClick: isListening ? stopListening : startListening,\n      disabled: !isSupported,\n      className: getButtonClass(),\n      \"aria-label\": isListening ? 'Stop listening' : 'Start voice input',\n      title: isListening ? 'Click to stop listening' : 'Click to speak to Agent Dr Girlfriend',\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"voice-button-text\",\n        children: getButtonText()\n      }), isListening && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"voice-animation\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"pulse-ring\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"pulse-ring\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"pulse-ring\"\n        })]\n      })]\n    }), isListening && transcript && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"live-transcript\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"transcript-label\",\n        children: \"Speaking:\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"transcript-text\",\n        children: transcript\n      }), confidence > 0 && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"confidence-indicator\",\n        children: [\"Confidence: \", Math.round(confidence * 100), \"%\"]\n      })]\n    }), error && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"voice-error\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"error-icon\",\n        children: \"\\u26A0\\uFE0F\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"error-message\",\n        children: error\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n        className: \"dismiss-error\",\n        onClick: () => setError(null),\n        \"aria-label\": \"Dismiss error\",\n        children: \"\\u2715\"\n      })]\n    }), !isSupported && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"voice-unsupported\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n        children: \"\\uD83D\\uDC94 Voice input isn't supported in this browser, love.\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n        children: \"Try using Edge, Chrome or Safari for the best experience with Agent Dr Girlfriend.\"\n      })]\n    })]\n  });\n};\n/* harmony default export */ const chat_VoiceInput = (VoiceInput);\n// EXTERNAL MODULE: ./src/services/aiService.js + 50 modules\nvar aiService = __webpack_require__(4622);\n// EXTERNAL MODULE: ./src/hooks/useNameTransformation.js\nvar useNameTransformation = __webpack_require__(9077);\n;// ./src/components/chat/ChatInterface.js\n// ChatInterface.js - Enhanced chat component for Agent Dr Girlfriend\n// Following copilot-instructions.md: Emotional UX design with accessibility\n\n\n\n\n\n\n\n\n\n\n// Typing indicator component\n\nconst TypingIndicator = _ref => {\n  let {\n    isVisible,\n    mood = 'neutral',\n    agentName = 'Dr Girlfriend'\n  } = _ref;\n  if (!isVisible) return null;\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: \"typing-indicator\",\n    \"data-mood\": mood,\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n      className: \"typing-indicator-avatar\",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"agent-icon\",\n        children: \"\\uD83D\\uDC69\\u200D\\uD83D\\uDCBC\"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"typing-indicator-bubble\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"typing-dots\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"dot\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"dot\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"dot\"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"typing-text\",\n        children: [agentName, \" is thinking...\"]\n      })]\n    })]\n  });\n};\n\n// Enhanced chat hook with real AI integration and name transformation\nconst useEnhancedChat = () => {\n  const [messages, setMessages] = (0,react.useState)([]);\n  const [isLoading, setIsLoading] = (0,react.useState)(false);\n  const [userContext, setUserContext] = (0,react.useState)({\n    mood: 'neutral',\n    relationship_level: 'getting_to_know',\n    preferred_mode: 'GIRLFRIEND'\n  });\n\n  // Import name transformation hook\n  const {\n    getDisplayName,\n    getPersonalizedGreeting,\n    detectCostumeChange,\n    performCostumeChange,\n    isTransforming\n  } = (0,useNameTransformation/* default */.A)();\n\n  // Load initial greeting and conversation history\n  (0,react.useEffect)(() => {\n    const initializeChat = async () => {\n      try {\n        // Load previous messages from memory\n        const savedMessages = (await (0,memoryService/* getMemory */.So)('recent_messages')) || [];\n        if (savedMessages.length === 0) {\n          // First time greeting using current agent name\n          const greeting = {\n            id: 'greeting-1',\n            text: `Hello there, darling! 💖 I'm ${getDisplayName('full')}, your emotionally intelligent companion from the future. I'm here to listen, inspire, and grow alongside you. How are you feeling today?`,\n            sender: 'agent',\n            timestamp: new Date(),\n            mood: 'friendly',\n            emotion: 'joy'\n          };\n          setMessages([greeting]);\n        } else {\n          setMessages(savedMessages);\n        }\n\n        // Load user context\n        const savedContext = await (0,memoryService/* getMemory */.So)('user_context');\n        if (savedContext) {\n          setUserContext(savedContext);\n        }\n      } catch (error) {\n        console.error('Error initializing chat:', error);\n        // Fallback greeting\n        setMessages([{\n          id: 'fallback-greeting',\n          text: `Hello darling! I'm ${getDisplayName('full')}. Something's a bit wonky with my memory systems, but I'm here and ready to chat with you! 💖`,\n          sender: 'agent',\n          timestamp: new Date(),\n          mood: 'friendly',\n          emotion: 'joy'\n        }]);\n      }\n    };\n    initializeChat();\n  }, []);\n\n  // Save messages to memory when they change\n  (0,react.useEffect)(() => {\n    if (messages.length > 0) {\n      // Keep only last 20 messages in UI memory\n      const recentMessages = messages.slice(-20);\n      (0,memoryService/* setMemory */.S0)('recent_messages', recentMessages);\n    }\n  }, [messages]);\n  const sendMessage = async text => {\n    if (!text.trim()) return;\n    const userMessage = {\n      id: `user-${Date.now()}`,\n      text: text.trim(),\n      sender: 'user',\n      timestamp: new Date(),\n      emotion: (0,emotionalIntelligence/* analyzeEmotion */.MZ)(text.trim()).emotion\n    };\n\n    // Add user message immediately\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      // Check for costume change request BEFORE processing with AI\n      const costumeChangeRequest = detectCostumeChange(text.trim());\n      if (costumeChangeRequest.detected) {\n        // Handle costume change request\n        setIsLoading(false);\n\n        // Add transformation announcement message\n        const transformationMessage = {\n          id: `transformation-${Date.now()}`,\n          text: `✨ Ooh, a costume change! I love this idea! Let me transform into ${costumeChangeRequest.newName} for you... 💫`,\n          sender: 'agent',\n          timestamp: new Date(),\n          mood: 'excited',\n          emotion: 'excitement',\n          isTransformationMessage: true\n        };\n        setMessages(prev => [...prev, transformationMessage]);\n\n        // Perform the actual transformation with effects\n        setTimeout(async () => {\n          try {\n            const result = await performCostumeChange(costumeChangeRequest.newName, nameTransformationService/* TRANSFORMATION_EFFECTS */.$.SPARKLE_CASCADE);\n\n            // Add success message\n            const successMessage = {\n              id: `success-${Date.now()}`,\n              text: result.message,\n              sender: 'agent',\n              timestamp: new Date(),\n              mood: 'happy',\n              emotion: 'joy',\n              isTransformationComplete: true\n            };\n            setMessages(prev => [...prev, successMessage]);\n          } catch (error) {\n            console.error('Transformation failed:', error);\n            const errorMessage = {\n              id: `transformation-error-${Date.now()}`,\n              text: 'Oops! The costume change magic fizzled out. The cosmic energies must be misaligned. Want to try again? 💫',\n              sender: 'agent',\n              timestamp: new Date(),\n              mood: 'apologetic',\n              emotion: 'neutral'\n            };\n            setMessages(prev => [...prev, errorMessage]);\n          }\n        }, 1000);\n        return; // Don't process as normal AI message\n      }\n\n      // Process message with AI (normal flow)\n      const aiResponse = await (0,aiService/* processMessage */.Ph)(text.trim(), userContext);\n      const agentMessage = {\n        id: `agent-${Date.now()}`,\n        text: aiResponse.text,\n        sender: 'agent',\n        timestamp: aiResponse.timestamp,\n        mood: detectMoodFromEmotion(aiResponse.emotion),\n        emotion: aiResponse.emotion,\n        context: aiResponse.context\n      };\n      setMessages(prev => [...prev, agentMessage]);\n\n      // Update user context based on conversation\n      const updatedContext = {\n        ...userContext,\n        mood: aiResponse.emotion,\n        last_interaction: new Date().toISOString()\n      };\n      setUserContext(updatedContext);\n      await (0,memoryService/* setMemory */.S0)('user_context', updatedContext);\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Fallback response\n      const errorMessage = {\n        id: `error-${Date.now()}`,\n        text: 'I\\'m having a moment with my systems, darling. Give me a second to collect myself and let\\'s try again. You\\'re worth the wait! 💖',\n        sender: 'agent',\n        timestamp: new Date(),\n        mood: 'apologetic',\n        emotion: 'neutral'\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    messages,\n    sendMessage,\n    isLoading: isLoading || isTransforming,\n    userContext,\n    getDisplayName,\n    getPersonalizedGreeting\n  };\n};\n\n// Helper function to map emotions to moods for UI\nconst detectMoodFromEmotion = emotion => {\n  const emotionToMoodMap = {\n    joy: 'happy',\n    happiness: 'happy',\n    sadness: 'sad',\n    anger: 'angry',\n    fear: 'nervous',\n    surprise: 'excited',\n    love: 'romantic',\n    excitement: 'excited',\n    calm: 'peaceful',\n    neutral: 'neutral'\n  };\n  return emotionToMoodMap[emotion] || 'neutral';\n};\nconst ChatInterface = () => {\n  const {\n    messages,\n    sendMessage,\n    isLoading,\n    userContext,\n    getDisplayName,\n    getPersonalizedGreeting\n  } = useEnhancedChat();\n  const [inputValue, setInputValue] = (0,react.useState)('');\n  const messagesEndRef = (0,react.useRef)(null);\n  const inputRef = (0,react.useRef)(null);\n\n  // Auto-scroll to bottom when new messages arrive\n  (0,react.useEffect)(() => {\n    messagesEndRef.current?.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n\n  // Focus input on component mount\n  (0,react.useEffect)(() => {\n    inputRef.current?.focus();\n  }, []);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSendMessage = async () => {\n    if (inputValue.trim()) {\n      await sendMessage(inputValue.trim());\n      setInputValue('');\n    }\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Handle voice input\n  const handleVoiceInput = transcript => {\n    if (transcript.trim()) {\n      sendMessage(transcript.trim());\n    }\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"chat-header-info\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"chat-avatar\",\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83D\\uDC69\\u200D\\u2695\\uFE0F\"\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"chat-title-section\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h2\", {\n            className: \"chat-title agent-name\",\n            children: getDisplayName('full')\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n            className: \"chat-subtitle\",\n            children: isLoading ? 'Thinking...' : `Mode: ${userContext.preferred_mode} • Mood: ${userContext.mood}`\n          })]\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"chat-header-actions\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          className: \"header-btn\",\n          \"aria-label\": \"Settings\",\n          children: \"\\u2699\\uFE0F\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          className: \"header-btn\",\n          \"aria-label\": \"Voice Mode\",\n          children: \"\\uD83C\\uDFA4\"\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"messages-container\",\n      role: \"log\",\n      \"aria-live\": \"polite\",\n      \"aria-label\": \"Chat messages\",\n      children: [messages.map(message => /*#__PURE__*/(0,jsx_runtime.jsx)(chat_MessageBubble, {\n        message: message\n      }, message.id)), /*#__PURE__*/(0,jsx_runtime.jsx)(TypingIndicator, {\n        isVisible: isLoading,\n        mood: userContext.mood,\n        agentName: getDisplayName('name')\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        ref: messagesEndRef\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"floating-input-container\",\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"input-form\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"textarea\", {\n            ref: inputRef,\n            value: inputValue,\n            onChange: handleInputChange,\n            onKeyDown: handleKeyPress,\n            placeholder: `Share your thoughts with ${getDisplayName('name')}...`,\n            className: \"chat-textarea\",\n            rows: \"2\",\n            \"aria-label\": \"Message input\",\n            maxLength: \"2000\",\n            disabled: isLoading\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"input-controls\",\n            role: \"group\",\n            \"aria-label\": \"Chat controls\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(chat_VoiceInput, {\n              onResult: handleVoiceInput,\n              isEnabled: !isLoading\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n              type: \"button\",\n              onClick: handleSendMessage,\n              disabled: !inputValue.trim() || isLoading,\n              className: \"send-button\",\n              \"aria-label\": isLoading ? 'Sending...' : 'Send message',\n              children: isLoading ? /*#__PURE__*/(0,jsx_runtime.jsxs)(\"span\", {\n                className: \"loading-indicator\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"loading-dot\"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"loading-dot\"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"loading-dot\"\n                })]\n              }) : /*#__PURE__*/(0,jsx_runtime.jsx)(\"svg\", {\n                className: \"send-icon\",\n                fill: \"none\",\n                stroke: \"currentColor\",\n                viewBox: \"0 0 24 24\",\n                \"aria-hidden\": \"true\",\n                children: /*#__PURE__*/(0,jsx_runtime.jsx)(\"path\", {\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  strokeWidth: 2,\n                  d: \"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"\n                })\n              })\n            })]\n          })]\n        })\n      })]\n    })]\n  });\n};\n/* harmony default export */ const chat_ChatInterface = (ChatInterface);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9039\n\n}");

/***/ })

}]);