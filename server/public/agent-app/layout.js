"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbambisleep_chat_agent"] = self["webpackChunkbambisleep_chat_agent"] || []).push([[133],{

/***/ 5584:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ layout_Header)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./src/hooks/useNameTransformation.js\nvar useNameTransformation = __webpack_require__(9077);\n// EXTERNAL MODULE: ./node_modules/socket.io-client/build/esm/index.js + 8 modules\nvar esm = __webpack_require__(6725);\n;// ./src/hooks/useBambisleepAlerts.js\n// useBambisleepAlerts.js - Socket.IO hook for bambisleep prime alerts\n// Following copilot-instructions.md: Service architecture for alert integration\n// Security: Uses Socket.IO instead of raw WebSockets for better security and authentication\n\n\n\nconst useBambisleepAlerts = () => {\n  const [isAlertVisible, setIsAlertVisible] = (0,react.useState)(false);\n  const [currentAlert, setCurrentAlert] = (0,react.useState)(null);\n  const [alertQueue, setAlertQueue] = (0,react.useState)([]);\n  const [connectionStatus, setConnectionStatus] = (0,react.useState)('disconnected');\n  const [isDevelopmentMode, setIsDevelopmentMode] = (0,react.useState)(false);\n\n  // Socket.IO connection ref (primary method)\n  const socketRef = (0,react.useRef)(null);\n  // DEPRECATED: WebSocket fallback - TODO: Remove once Socket.IO integration is complete\n  const websocketRef = (0,react.useRef)(null);\n  const alertTimeoutRef = (0,react.useRef)(null);\n  const reconnectTimeoutRef = (0,react.useRef)(null);\n  const reconnectAttempts = (0,react.useRef)(0);\n  const MAX_RECONNECT_ATTEMPTS = 3; // Reduced for dev mode\n  const RECONNECT_DELAY = 5000; // Increased delay for less noise\n  const ALERT_DISPLAY_DURATION = 5000;\n\n  // Alert types configuration\n  const ALERT_TYPES = {\n    UPDATE: 'update',\n    WARNING: 'warning',\n    ALERT: 'alert',\n    INFO: 'info'\n  };\n\n  // Connect to bambisleep prime using Socket.IO (secure)\n  const connectSocketIO = (0,react.useCallback)(() => {\n    const isDevMode =  false || window.location.hostname === 'localhost';\n    const serverUrl = {\"NODE_ENV\":\"development\"}.REACT_APP_BAMBISLEEP_SOCKET_URL || 'http://localhost:3001';\n\n    // If in dev mode and no custom URL is set, use mock mode\n    if (isDevMode && !{\"NODE_ENV\":\"development\"}.REACT_APP_BAMBISLEEP_SOCKET_URL) {\n      setIsDevelopmentMode(true);\n      setConnectionStatus('mock');\n      console.log('🔧 Development mode: Using mock alert system (no Socket.IO server required)');\n      return;\n    }\n    try {\n      // Socket.IO connection with secure options\n      socketRef.current = (0,esm.io)(serverUrl, {\n        // Security options\n        secure: !isDevMode,\n        // Use HTTPS in production\n        rejectUnauthorized: !isDevMode,\n        // Verify SSL certificates in production\n\n        // Connection options\n        autoConnect: true,\n        reconnection: true,\n        reconnectionAttempts: MAX_RECONNECT_ATTEMPTS,\n        reconnectionDelay: RECONNECT_DELAY,\n        timeout: 10000,\n        // Authentication (add your auth token here)\n        auth: {\n          // token: localStorage.getItem('bambisleep_auth_token') // Uncomment when auth is ready\n        },\n        // Transport options (Socket.IO will fallback automatically)\n        transports: ['websocket', 'polling'] // websocket preferred, polling fallback\n      });\n\n      // Connection successful\n      socketRef.current.on('connect', () => {\n        console.log('✅ Connected to bambisleep prime via Socket.IO');\n        setConnectionStatus('connected');\n        setIsDevelopmentMode(false);\n        reconnectAttempts.current = 0;\n\n        // Join alert room for this user/session\n        socketRef.current.emit('join-alerts');\n      });\n\n      // Handle incoming alerts\n      socketRef.current.on('alert', alertData => {\n        console.log('📡 Received alert:', alertData);\n        handleIncomingAlert(alertData);\n      });\n\n      // Handle different alert types\n      socketRef.current.on('update', alertData => handleIncomingAlert({\n        ...alertData,\n        type: ALERT_TYPES.UPDATE\n      }));\n      socketRef.current.on('warning', alertData => handleIncomingAlert({\n        ...alertData,\n        type: ALERT_TYPES.WARNING\n      }));\n      socketRef.current.on('critical', alertData => handleIncomingAlert({\n        ...alertData,\n        type: ALERT_TYPES.ALERT\n      }));\n      socketRef.current.on('info', alertData => handleIncomingAlert({\n        ...alertData,\n        type: ALERT_TYPES.INFO\n      }));\n\n      // Connection error handling\n      socketRef.current.on('connect_error', error => {\n        if (!isDevMode || reconnectAttempts.current < 2) {\n          console.warn('⚠️ Socket.IO connection failed:', error.message);\n        }\n        setConnectionStatus('error');\n      });\n\n      // Disconnection handling\n      socketRef.current.on('disconnect', reason => {\n        console.log('🔌 Disconnected from bambisleep prime:', reason);\n        setConnectionStatus('disconnected');\n\n        // Don't auto-reconnect if disconnected by server\n        if (reason === 'io server disconnect') {\n          // Server disconnected us, manual reconnection required\n          setConnectionStatus('failed');\n        } else {\n          // Network issue, will auto-reconnect\n          setConnectionStatus('reconnecting');\n        }\n      });\n\n      // Reconnection attempts\n      socketRef.current.on('reconnect_attempt', attemptNumber => {\n        if (!isDevMode || attemptNumber <= 2) {\n          console.log(`� Socket.IO reconnection attempt ${attemptNumber}/${MAX_RECONNECT_ATTEMPTS}`);\n        }\n        setConnectionStatus('reconnecting');\n      });\n\n      // Successful reconnection\n      socketRef.current.on('reconnect', attemptNumber => {\n        console.log(`✅ Reconnected after ${attemptNumber} attempts`);\n        setConnectionStatus('connected');\n        socketRef.current.emit('join-alerts'); // Rejoin alert room\n      });\n\n      // Max reconnection attempts reached\n      socketRef.current.on('reconnect_failed', () => {\n        console.error('❌ Socket.IO max reconnection attempts reached');\n        setConnectionStatus('failed');\n        // Fallback to WebSocket in production, mock in development\n        if (!isDevMode) {\n          console.log('🔄 Falling back to WebSocket connection...');\n          connectWebSocketFallback();\n        } else {\n          setIsDevelopmentMode(true);\n          setConnectionStatus('mock');\n        }\n      });\n    } catch (error) {\n      console.error('❌ Socket.IO initialization failed:', error);\n      setConnectionStatus('error');\n\n      // Fallback to WebSocket or mock\n      if (!isDevMode) {\n        connectWebSocketFallback();\n      } else {\n        setIsDevelopmentMode(true);\n        setConnectionStatus('mock');\n      }\n    }\n  }, []);\n\n  // DEPRECATED: WebSocket fallback connection (TODO: Remove once Socket.IO is fully integrated)\n  const connectWebSocketFallback = (0,react.useCallback)(() => {\n    const isDevMode =  false || window.location.hostname === 'localhost';\n    const wsUrl = {\"NODE_ENV\":\"development\"}.REACT_APP_BAMBISLEEP_WS_URL || 'ws://localhost:8080/alerts';\n    console.log('⚠️ Using WebSocket fallback - consider migrating to Socket.IO');\n    try {\n      websocketRef.current = new WebSocket(wsUrl);\n      websocketRef.current.onopen = () => {\n        console.log('✅ Connected to bambisleep prime via WebSocket (fallback)');\n        setConnectionStatus('connected');\n        reconnectAttempts.current = 0;\n      };\n      websocketRef.current.onmessage = event => {\n        try {\n          const alertData = JSON.parse(event.data);\n          handleIncomingAlert(alertData);\n        } catch (error) {\n          console.error('❌ Failed to parse WebSocket message:', error);\n        }\n      };\n      websocketRef.current.onclose = event => {\n        if (!event.wasClean) {\n          console.log('🔌 WebSocket disconnected');\n          setConnectionStatus('disconnected');\n          attemptReconnection();\n        }\n      };\n      websocketRef.current.onerror = error => {\n        if (!isDevMode || reconnectAttempts.current < 2) {\n          console.warn('⚠️ WebSocket error (fallback mode)');\n        }\n        setConnectionStatus('error');\n      };\n    } catch (error) {\n      console.error('❌ WebSocket fallback failed:', error);\n      setConnectionStatus('failed');\n    }\n  }, []);\n\n  // Handle incoming alert messages\n  const handleIncomingAlert = (0,react.useCallback)(alertData => {\n    const alert = {\n      id: Date.now() + Math.random(),\n      type: alertData.type || ALERT_TYPES.INFO,\n      title: alertData.title || 'Notification',\n      message: alertData.message || '',\n      timestamp: new Date(),\n      priority: alertData.priority || 'normal',\n      duration: alertData.duration || ALERT_DISPLAY_DURATION\n    };\n\n    // Add to queue if another alert is showing\n    if (isAlertVisible) {\n      setAlertQueue(prev => [...prev, alert]);\n    } else {\n      showAlert(alert);\n    }\n  }, [isAlertVisible]);\n\n  // Show alert with fade in animation\n  const showAlert = (0,react.useCallback)(alert => {\n    setCurrentAlert(alert);\n    setIsAlertVisible(true);\n\n    // Clear existing timeout\n    if (alertTimeoutRef.current) {\n      clearTimeout(alertTimeoutRef.current);\n    }\n\n    // Auto-hide after duration\n    alertTimeoutRef.current = setTimeout(() => {\n      hideAlert();\n    }, alert.duration);\n  }, []);\n\n  // Hide alert with fade out animation\n  const hideAlert = (0,react.useCallback)(() => {\n    setIsAlertVisible(false);\n\n    // Process next alert in queue after fade out completes\n    setTimeout(() => {\n      setCurrentAlert(null);\n      setAlertQueue(prev => {\n        const [nextAlert, ...remaining] = prev;\n        if (nextAlert) {\n          showAlert(nextAlert);\n        }\n        return remaining;\n      });\n    }, 300); // Match CSS transition duration\n  }, [showAlert]);\n\n  // Attempt reconnection (used for WebSocket fallback only)\n  const attemptReconnection = (0,react.useCallback)(() => {\n    const isDevMode =  false || window.location.hostname === 'localhost';\n    if (reconnectAttempts.current < MAX_RECONNECT_ATTEMPTS) {\n      reconnectAttempts.current += 1;\n      setConnectionStatus('reconnecting');\n      reconnectTimeoutRef.current = setTimeout(() => {\n        if (!isDevMode || reconnectAttempts.current <= 2) {\n          console.log(`🔄 WebSocket fallback reconnection attempt ${reconnectAttempts.current}/${MAX_RECONNECT_ATTEMPTS}`);\n        }\n        connectWebSocketFallback();\n      }, RECONNECT_DELAY * reconnectAttempts.current);\n    } else {\n      if (isDevMode && !{\"NODE_ENV\":\"development\"}.REACT_APP_BAMBISLEEP_WS_URL) {\n        setConnectionStatus('mock');\n        setIsDevelopmentMode(true);\n        console.log('🔧 Switching to mock mode - no server available');\n      } else {\n        setConnectionStatus('failed');\n        console.error('❌ Max reconnection attempts reached');\n      }\n    }\n  }, [connectWebSocketFallback]);\n\n  // Manual alert dismissal\n  const dismissAlert = (0,react.useCallback)(() => {\n    if (alertTimeoutRef.current) {\n      clearTimeout(alertTimeoutRef.current);\n    }\n    hideAlert();\n  }, [hideAlert]);\n\n  // Initialize Socket.IO connection\n  (0,react.useEffect)(() => {\n    connectSocketIO();\n    return () => {\n      // Cleanup Socket.IO connection\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n      }\n      // Cleanup WebSocket fallback\n      if (websocketRef.current) {\n        websocketRef.current.close();\n      }\n      // Cleanup timers\n      if (alertTimeoutRef.current) {\n        clearTimeout(alertTimeoutRef.current);\n      }\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [connectSocketIO]);\n  return {\n    // Alert state\n    isAlertVisible,\n    currentAlert,\n    alertQueue: alertQueue.length,\n    connectionStatus,\n    isDevelopmentMode,\n    // Alert types\n    ALERT_TYPES,\n    // Actions\n    dismissAlert,\n    // Connection control\n    reconnect: connectSocketIO,\n    // Primary: Socket.IO\n    reconnectWebSocket: connectWebSocketFallback // Fallback: WebSocket (deprecated)\n  };\n};\n/* harmony default export */ const hooks_useBambisleepAlerts = (useBambisleepAlerts);\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(4848);\n;// ./src/components/layout/Header.js\n// Header.js - Enhanced header with fixed navbar and hover descriptions\n// Following copilot-instructions.md: Accessible navigation design\n\n\n\n\n\nconst Header = _ref => {\n  let {\n    currentView,\n    setCurrentView\n  } = _ref;\n  const [hoveredItem, setHoveredItem] = (0,react.useState)(null);\n  const [hoverTimer, setHoverTimer] = (0,react.useState)(null);\n\n  // Import name transformation hook\n  const {\n    getDisplayName,\n    fullName\n  } = (0,useNameTransformation/* default */.A)();\n\n  // Import bambisleep alerts hook\n  const {\n    isAlertVisible,\n    currentAlert,\n    alertQueue,\n    connectionStatus,\n    ALERT_TYPES,\n    dismissAlert,\n    triggerTestAlert\n  } = hooks_useBambisleepAlerts();\n  const navigationItems = [{\n    id: 'chat',\n    label: 'Chat',\n    icon: '💬',\n    description: `Talk with ${fullName} - Share thoughts, feelings, and have meaningful conversations`\n  }, {\n    id: 'journal',\n    label: 'Journal',\n    icon: '📝',\n    description: 'Dream Journal - Write your thoughts, dreams, and private reflections'\n  }, {\n    id: 'creative',\n    label: 'Creative',\n    icon: '🎨',\n    description: 'Creative Studio - Collaborate on stories, art, and creative projects together'\n  }, {\n    id: 'relationship',\n    label: 'Journey',\n    icon: '💖',\n    description: 'Our Journey - Track relationship progress, milestones, and emotional growth'\n  }, {\n    id: 'persona',\n    label: 'Mode',\n    icon: '🎭',\n    description: 'Personality Mode - Choose interaction style: Girlfriend, Muse, Mentor, or Ghostwriter'\n  }];\n  const handleMouseEnter = itemId => {\n    // Clear any existing timer\n    if (hoverTimer) {\n      clearTimeout(hoverTimer);\n    }\n\n    // Set 1-second delay for hover description\n    const timer = setTimeout(() => {\n      setHoveredItem(itemId);\n    }, 1000);\n    setHoverTimer(timer);\n  };\n  const handleMouseLeave = () => {\n    // Clear timer and hide description\n    if (hoverTimer) {\n      clearTimeout(hoverTimer);\n      setHoverTimer(null);\n    }\n    setHoveredItem(null);\n  };\n\n  // Cleanup timer on unmount\n  (0,react.useEffect)(() => {\n    return () => {\n      if (hoverTimer) {\n        clearTimeout(hoverTimer);\n      }\n    };\n  }, [hoverTimer]);\n  const handleNavigation = viewId => {\n    setCurrentView(viewId);\n    handleMouseLeave(); // Hide any visible descriptions\n  };\n\n  // Format timestamp for alerts\n  const formatAlertTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('en-US', {\n      hour12: false,\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Get alert icon based on type\n  const getAlertIcon = type => {\n    switch (type) {\n      case ALERT_TYPES.UPDATE:\n        return '📡';\n      case ALERT_TYPES.WARNING:\n        return '⚠️';\n      case ALERT_TYPES.ALERT:\n        return '🚨';\n      case ALERT_TYPES.INFO:\n        return 'ℹ️';\n      default:\n        return 'ℹ️';\n    }\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"header\", {\n    className: \"header-fixed\",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"nav\", {\n      className: \"top-navbar\",\n      \"aria-label\": \"Main navigation\",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"navbar-container\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"navbar-brand\",\n          onClick: () => handleNavigation('chat'),\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"brand-icon\",\n            children: \"\\uD83D\\uDC69\\u200D\\u2695\\uFE0F\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"brand-text\",\n            children: \"Dr_Girlfriend.exe\"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"navbar-nav\",\n          children: navigationItems.map(item => /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"nav-item-container\",\n            onMouseEnter: () => handleMouseEnter(item.id),\n            onMouseLeave: handleMouseLeave,\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"a\", {\n              href: `#${item.id}`,\n              onClick: e => {\n                e.preventDefault();\n                handleNavigation(item.id);\n              },\n              className: `nav-anchor ${currentView === item.id ? 'active' : ''}`,\n              \"aria-current\": currentView === item.id ? 'page' : undefined,\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"nav-icon\",\n                children: item.icon\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"nav-label\",\n                children: item.label\n              })]\n            }), hoveredItem === item.id && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"nav-tooltip\",\n              role: \"tooltip\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"tooltip-content\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"tooltip-title\",\n                  children: item.label\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"tooltip-description\",\n                  children: item.description\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"tooltip-arrow\"\n              })]\n            })]\n          }, item.id))\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"navbar-status\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n            className: \"status-indicator online\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"status-text\",\n            children: \"Online\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n            className: `alert-connection-status ${connectionStatus}`,\n            title: `Bambisleep Prime: ${connectionStatus}`\n          }), alertQueue > 0 && /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n            className: \"alert-queue-badge\",\n            title: `${alertQueue} alerts queued`,\n            children: alertQueue\n          })]\n        })]\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n      className: \"header-spacer\",\n      children: currentAlert && /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: `bambisleep-alert alert-${currentAlert.type} ${isAlertVisible ? 'visible' : ''}`,\n        role: \"alert\",\n        \"aria-live\": currentAlert.priority === 'high' ? 'assertive' : 'polite',\n        children: /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"alert-content\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"alert-main\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n              className: \"alert-icon\",\n              \"aria-hidden\": \"true\",\n              children: getAlertIcon(currentAlert.type)\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"alert-text\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"alert-title\",\n                children: currentAlert.title\n              }), currentAlert.message && /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"alert-message\",\n                children: currentAlert.message\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"alert-actions\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n              className: \"alert-timestamp\",\n              children: formatAlertTime(currentAlert.timestamp)\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n              className: \"alert-dismiss\",\n              onClick: dismissAlert,\n              \"aria-label\": \"Dismiss alert\",\n              children: \"\\u2715\"\n            })]\n          })]\n        })\n      })\n    })]\n  });\n};\n/* harmony default export */ const layout_Header = (Header);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UCxlQUFlLENBQUNySCxZQUFZLENBQUMwRSxTQUFTO1lBQUMsQ0FDckMsQ0FBQyxlQUNObUIsbUJBQUE7Y0FDRThCLFNBQVMsRUFBQyxlQUFlO2NBQ3pCRSxPQUFPLEVBQUV6QyxZQUFhO2NBQ3RCLGNBQVcsZUFBZTtjQUFBd0MsUUFBQSxFQUMzQjtZQUVELENBQVEsQ0FBQztVQUFBLENBQ04sQ0FBQztRQUFBLENBQ0g7TUFBQyxDQUNIO0lBQ04sQ0FDRSxDQUFDO0VBQUEsQ0FDQSxDQUFDO0FBRWIsQ0FBQztBQUVELG9EQUFlNUIsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhbWJpc2xlZXAtY2hhdC1hZ2VudC8uL3NyYy9ob29rcy91c2VCYW1iaXNsZWVwQWxlcnRzLmpzP2MwNTAiLCJ3ZWJwYWNrOi8vYmFtYmlzbGVlcC1jaGF0LWFnZW50Ly4vc3JjL2NvbXBvbmVudHMvbGF5b3V0L0hlYWRlci5qcz9lZWE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHVzZUJhbWJpc2xlZXBBbGVydHMuanMgLSBTb2NrZXQuSU8gaG9vayBmb3IgYmFtYmlzbGVlcCBwcmltZSBhbGVydHNcclxuLy8gRm9sbG93aW5nIGNvcGlsb3QtaW5zdHJ1Y3Rpb25zLm1kOiBTZXJ2aWNlIGFyY2hpdGVjdHVyZSBmb3IgYWxlcnQgaW50ZWdyYXRpb25cclxuLy8gU2VjdXJpdHk6IFVzZXMgU29ja2V0LklPIGluc3RlYWQgb2YgcmF3IFdlYlNvY2tldHMgZm9yIGJldHRlciBzZWN1cml0eSBhbmQgYXV0aGVudGljYXRpb25cclxuXHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgeyBpbyB9IGZyb20gJ3NvY2tldC5pby1jbGllbnQnO1xyXG5cclxuY29uc3QgdXNlQmFtYmlzbGVlcEFsZXJ0cyA9ICgpID0+IHtcclxuICBjb25zdCBbaXNBbGVydFZpc2libGUsIHNldElzQWxlcnRWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICBjb25zdCBbY3VycmVudEFsZXJ0LCBzZXRDdXJyZW50QWxlcnRdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgY29uc3QgW2FsZXJ0UXVldWUsIHNldEFsZXJ0UXVldWVdID0gdXNlU3RhdGUoW10pO1xyXG4gIGNvbnN0IFtjb25uZWN0aW9uU3RhdHVzLCBzZXRDb25uZWN0aW9uU3RhdHVzXSA9IHVzZVN0YXRlKCdkaXNjb25uZWN0ZWQnKTtcclxuICBjb25zdCBbaXNEZXZlbG9wbWVudE1vZGUsIHNldElzRGV2ZWxvcG1lbnRNb2RlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgLy8gU29ja2V0LklPIGNvbm5lY3Rpb24gcmVmIChwcmltYXJ5IG1ldGhvZClcclxuICBjb25zdCBzb2NrZXRSZWYgPSB1c2VSZWYobnVsbCk7XHJcbiAgLy8gREVQUkVDQVRFRDogV2ViU29ja2V0IGZhbGxiYWNrIC0gVE9ETzogUmVtb3ZlIG9uY2UgU29ja2V0LklPIGludGVncmF0aW9uIGlzIGNvbXBsZXRlXHJcbiAgY29uc3Qgd2Vic29ja2V0UmVmID0gdXNlUmVmKG51bGwpO1xyXG4gIGNvbnN0IGFsZXJ0VGltZW91dFJlZiA9IHVzZVJlZihudWxsKTtcclxuICBjb25zdCByZWNvbm5lY3RUaW1lb3V0UmVmID0gdXNlUmVmKG51bGwpO1xyXG4gIGNvbnN0IHJlY29ubmVjdEF0dGVtcHRzID0gdXNlUmVmKDApO1xyXG5cclxuICBjb25zdCBNQVhfUkVDT05ORUNUX0FUVEVNUFRTID0gMzsgLy8gUmVkdWNlZCBmb3IgZGV2IG1vZGVcclxuICBjb25zdCBSRUNPTk5FQ1RfREVMQVkgPSA1MDAwOyAvLyBJbmNyZWFzZWQgZGVsYXkgZm9yIGxlc3Mgbm9pc2VcclxuICBjb25zdCBBTEVSVF9ESVNQTEFZX0RVUkFUSU9OID0gNTAwMDtcclxuXHJcbiAgLy8gQWxlcnQgdHlwZXMgY29uZmlndXJhdGlvblxyXG4gIGNvbnN0IEFMRVJUX1RZUEVTID0ge1xyXG4gICAgVVBEQVRFOiAndXBkYXRlJyxcclxuICAgIFdBUk5JTkc6ICd3YXJuaW5nJyxcclxuICAgIEFMRVJUOiAnYWxlcnQnLFxyXG4gICAgSU5GTzogJ2luZm8nLFxyXG4gIH07XHJcblxyXG4gIC8vIENvbm5lY3QgdG8gYmFtYmlzbGVlcCBwcmltZSB1c2luZyBTb2NrZXQuSU8gKHNlY3VyZSlcclxuICBjb25zdCBjb25uZWN0U29ja2V0SU8gPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBjb25zdCBpc0Rldk1vZGUgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyB8fCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnO1xyXG4gICAgY29uc3Qgc2VydmVyVXJsID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0JBTUJJU0xFRVBfU09DS0VUX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAxJztcclxuXHJcbiAgICAvLyBJZiBpbiBkZXYgbW9kZSBhbmQgbm8gY3VzdG9tIFVSTCBpcyBzZXQsIHVzZSBtb2NrIG1vZGVcclxuICAgIGlmIChpc0Rldk1vZGUgJiYgIXByb2Nlc3MuZW52LlJFQUNUX0FQUF9CQU1CSVNMRUVQX1NPQ0tFVF9VUkwpIHtcclxuICAgICAgc2V0SXNEZXZlbG9wbWVudE1vZGUodHJ1ZSk7XHJcbiAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ21vY2snKTtcclxuICAgICAgY29uc29sZS5sb2coJ/CflKcgRGV2ZWxvcG1lbnQgbW9kZTogVXNpbmcgbW9jayBhbGVydCBzeXN0ZW0gKG5vIFNvY2tldC5JTyBzZXJ2ZXIgcmVxdWlyZWQpJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBTb2NrZXQuSU8gY29ubmVjdGlvbiB3aXRoIHNlY3VyZSBvcHRpb25zXHJcbiAgICAgIHNvY2tldFJlZi5jdXJyZW50ID0gaW8oc2VydmVyVXJsLCB7XHJcbiAgICAgICAgLy8gU2VjdXJpdHkgb3B0aW9uc1xyXG4gICAgICAgIHNlY3VyZTogIWlzRGV2TW9kZSwgLy8gVXNlIEhUVFBTIGluIHByb2R1Y3Rpb25cclxuICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6ICFpc0Rldk1vZGUsIC8vIFZlcmlmeSBTU0wgY2VydGlmaWNhdGVzIGluIHByb2R1Y3Rpb25cclxuXHJcbiAgICAgICAgLy8gQ29ubmVjdGlvbiBvcHRpb25zXHJcbiAgICAgICAgYXV0b0Nvbm5lY3Q6IHRydWUsXHJcbiAgICAgICAgcmVjb25uZWN0aW9uOiB0cnVlLFxyXG4gICAgICAgIHJlY29ubmVjdGlvbkF0dGVtcHRzOiBNQVhfUkVDT05ORUNUX0FUVEVNUFRTLFxyXG4gICAgICAgIHJlY29ubmVjdGlvbkRlbGF5OiBSRUNPTk5FQ1RfREVMQVksXHJcbiAgICAgICAgdGltZW91dDogMTAwMDAsXHJcblxyXG4gICAgICAgIC8vIEF1dGhlbnRpY2F0aW9uIChhZGQgeW91ciBhdXRoIHRva2VuIGhlcmUpXHJcbiAgICAgICAgYXV0aDoge1xyXG4gICAgICAgICAgLy8gdG9rZW46IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdiYW1iaXNsZWVwX2F1dGhfdG9rZW4nKSAvLyBVbmNvbW1lbnQgd2hlbiBhdXRoIGlzIHJlYWR5XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gVHJhbnNwb3J0IG9wdGlvbnMgKFNvY2tldC5JTyB3aWxsIGZhbGxiYWNrIGF1dG9tYXRpY2FsbHkpXHJcbiAgICAgICAgdHJhbnNwb3J0czogWyd3ZWJzb2NrZXQnLCAncG9sbGluZyddLCAvLyB3ZWJzb2NrZXQgcHJlZmVycmVkLCBwb2xsaW5nIGZhbGxiYWNrXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ29ubmVjdGlvbiBzdWNjZXNzZnVsXHJcbiAgICAgIHNvY2tldFJlZi5jdXJyZW50Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgQ29ubmVjdGVkIHRvIGJhbWJpc2xlZXAgcHJpbWUgdmlhIFNvY2tldC5JTycpO1xyXG4gICAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ2Nvbm5lY3RlZCcpO1xyXG4gICAgICAgIHNldElzRGV2ZWxvcG1lbnRNb2RlKGZhbHNlKTtcclxuICAgICAgICByZWNvbm5lY3RBdHRlbXB0cy5jdXJyZW50ID0gMDtcclxuXHJcbiAgICAgICAgLy8gSm9pbiBhbGVydCByb29tIGZvciB0aGlzIHVzZXIvc2Vzc2lvblxyXG4gICAgICAgIHNvY2tldFJlZi5jdXJyZW50LmVtaXQoJ2pvaW4tYWxlcnRzJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gSGFuZGxlIGluY29taW5nIGFsZXJ0c1xyXG4gICAgICBzb2NrZXRSZWYuY3VycmVudC5vbignYWxlcnQnLCAoYWxlcnREYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfk6EgUmVjZWl2ZWQgYWxlcnQ6JywgYWxlcnREYXRhKTtcclxuICAgICAgICBoYW5kbGVJbmNvbWluZ0FsZXJ0KGFsZXJ0RGF0YSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gSGFuZGxlIGRpZmZlcmVudCBhbGVydCB0eXBlc1xyXG4gICAgICBzb2NrZXRSZWYuY3VycmVudC5vbigndXBkYXRlJywgKGFsZXJ0RGF0YSkgPT4gaGFuZGxlSW5jb21pbmdBbGVydCh7IC4uLmFsZXJ0RGF0YSwgdHlwZTogQUxFUlRfVFlQRVMuVVBEQVRFIH0pKTtcclxuICAgICAgc29ja2V0UmVmLmN1cnJlbnQub24oJ3dhcm5pbmcnLCAoYWxlcnREYXRhKSA9PiBoYW5kbGVJbmNvbWluZ0FsZXJ0KHsgLi4uYWxlcnREYXRhLCB0eXBlOiBBTEVSVF9UWVBFUy5XQVJOSU5HIH0pKTtcclxuICAgICAgc29ja2V0UmVmLmN1cnJlbnQub24oJ2NyaXRpY2FsJywgKGFsZXJ0RGF0YSkgPT4gaGFuZGxlSW5jb21pbmdBbGVydCh7IC4uLmFsZXJ0RGF0YSwgdHlwZTogQUxFUlRfVFlQRVMuQUxFUlQgfSkpO1xyXG4gICAgICBzb2NrZXRSZWYuY3VycmVudC5vbignaW5mbycsIChhbGVydERhdGEpID0+IGhhbmRsZUluY29taW5nQWxlcnQoeyAuLi5hbGVydERhdGEsIHR5cGU6IEFMRVJUX1RZUEVTLklORk8gfSkpO1xyXG5cclxuICAgICAgLy8gQ29ubmVjdGlvbiBlcnJvciBoYW5kbGluZ1xyXG4gICAgICBzb2NrZXRSZWYuY3VycmVudC5vbignY29ubmVjdF9lcnJvcicsIChlcnJvcikgPT4ge1xyXG4gICAgICAgIGlmICghaXNEZXZNb2RlIHx8IHJlY29ubmVjdEF0dGVtcHRzLmN1cnJlbnQgPCAyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBTb2NrZXQuSU8gY29ubmVjdGlvbiBmYWlsZWQ6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ2Vycm9yJyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gRGlzY29ubmVjdGlvbiBoYW5kbGluZ1xyXG4gICAgICBzb2NrZXRSZWYuY3VycmVudC5vbignZGlzY29ubmVjdCcsIChyZWFzb24pID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygn8J+UjCBEaXNjb25uZWN0ZWQgZnJvbSBiYW1iaXNsZWVwIHByaW1lOicsIHJlYXNvbik7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvblN0YXR1cygnZGlzY29ubmVjdGVkJyk7XHJcblxyXG4gICAgICAgIC8vIERvbid0IGF1dG8tcmVjb25uZWN0IGlmIGRpc2Nvbm5lY3RlZCBieSBzZXJ2ZXJcclxuICAgICAgICBpZiAocmVhc29uID09PSAnaW8gc2VydmVyIGRpc2Nvbm5lY3QnKSB7XHJcbiAgICAgICAgICAvLyBTZXJ2ZXIgZGlzY29ubmVjdGVkIHVzLCBtYW51YWwgcmVjb25uZWN0aW9uIHJlcXVpcmVkXHJcbiAgICAgICAgICBzZXRDb25uZWN0aW9uU3RhdHVzKCdmYWlsZWQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gTmV0d29yayBpc3N1ZSwgd2lsbCBhdXRvLXJlY29ubmVjdFxyXG4gICAgICAgICAgc2V0Q29ubmVjdGlvblN0YXR1cygncmVjb25uZWN0aW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFJlY29ubmVjdGlvbiBhdHRlbXB0c1xyXG4gICAgICBzb2NrZXRSZWYuY3VycmVudC5vbigncmVjb25uZWN0X2F0dGVtcHQnLCAoYXR0ZW1wdE51bWJlcikgPT4ge1xyXG4gICAgICAgIGlmICghaXNEZXZNb2RlIHx8IGF0dGVtcHROdW1iZXIgPD0gMikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coYO+/vSBTb2NrZXQuSU8gcmVjb25uZWN0aW9uIGF0dGVtcHQgJHthdHRlbXB0TnVtYmVyfS8ke01BWF9SRUNPTk5FQ1RfQVRURU1QVFN9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ3JlY29ubmVjdGluZycpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFN1Y2Nlc3NmdWwgcmVjb25uZWN0aW9uXHJcbiAgICAgIHNvY2tldFJlZi5jdXJyZW50Lm9uKCdyZWNvbm5lY3QnLCAoYXR0ZW1wdE51bWJlcikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGDinIUgUmVjb25uZWN0ZWQgYWZ0ZXIgJHthdHRlbXB0TnVtYmVyfSBhdHRlbXB0c2ApO1xyXG4gICAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ2Nvbm5lY3RlZCcpO1xyXG4gICAgICAgIHNvY2tldFJlZi5jdXJyZW50LmVtaXQoJ2pvaW4tYWxlcnRzJyk7IC8vIFJlam9pbiBhbGVydCByb29tXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gTWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyByZWFjaGVkXHJcbiAgICAgIHNvY2tldFJlZi5jdXJyZW50Lm9uKCdyZWNvbm5lY3RfZmFpbGVkJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBTb2NrZXQuSU8gbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyByZWFjaGVkJyk7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvblN0YXR1cygnZmFpbGVkJyk7XHJcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gV2ViU29ja2V0IGluIHByb2R1Y3Rpb24sIG1vY2sgaW4gZGV2ZWxvcG1lbnRcclxuICAgICAgICBpZiAoIWlzRGV2TW9kZSkge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflIQgRmFsbGluZyBiYWNrIHRvIFdlYlNvY2tldCBjb25uZWN0aW9uLi4uJyk7XHJcbiAgICAgICAgICBjb25uZWN0V2ViU29ja2V0RmFsbGJhY2soKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2V0SXNEZXZlbG9wbWVudE1vZGUodHJ1ZSk7XHJcbiAgICAgICAgICBzZXRDb25uZWN0aW9uU3RhdHVzKCdtb2NrJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgU29ja2V0LklPIGluaXRpYWxpemF0aW9uIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ2Vycm9yJyk7XHJcblxyXG4gICAgICAvLyBGYWxsYmFjayB0byBXZWJTb2NrZXQgb3IgbW9ja1xyXG4gICAgICBpZiAoIWlzRGV2TW9kZSkge1xyXG4gICAgICAgIGNvbm5lY3RXZWJTb2NrZXRGYWxsYmFjaygpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldElzRGV2ZWxvcG1lbnRNb2RlKHRydWUpO1xyXG4gICAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ21vY2snKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gREVQUkVDQVRFRDogV2ViU29ja2V0IGZhbGxiYWNrIGNvbm5lY3Rpb24gKFRPRE86IFJlbW92ZSBvbmNlIFNvY2tldC5JTyBpcyBmdWxseSBpbnRlZ3JhdGVkKVxyXG4gIGNvbnN0IGNvbm5lY3RXZWJTb2NrZXRGYWxsYmFjayA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGNvbnN0IGlzRGV2TW9kZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCc7XHJcbiAgICBjb25zdCB3c1VybCA9IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9CQU1CSVNMRUVQX1dTX1VSTCB8fCAnd3M6Ly9sb2NhbGhvc3Q6ODA4MC9hbGVydHMnO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCfimqDvuI8gVXNpbmcgV2ViU29ja2V0IGZhbGxiYWNrIC0gY29uc2lkZXIgbWlncmF0aW5nIHRvIFNvY2tldC5JTycpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHdlYnNvY2tldFJlZi5jdXJyZW50ID0gbmV3IFdlYlNvY2tldCh3c1VybCk7XHJcblxyXG4gICAgICB3ZWJzb2NrZXRSZWYuY3VycmVudC5vbm9wZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBDb25uZWN0ZWQgdG8gYmFtYmlzbGVlcCBwcmltZSB2aWEgV2ViU29ja2V0IChmYWxsYmFjayknKTtcclxuICAgICAgICBzZXRDb25uZWN0aW9uU3RhdHVzKCdjb25uZWN0ZWQnKTtcclxuICAgICAgICByZWNvbm5lY3RBdHRlbXB0cy5jdXJyZW50ID0gMDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHdlYnNvY2tldFJlZi5jdXJyZW50Lm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjb25zdCBhbGVydERhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgICAgaGFuZGxlSW5jb21pbmdBbGVydChhbGVydERhdGEpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIHBhcnNlIFdlYlNvY2tldCBtZXNzYWdlOicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3ZWJzb2NrZXRSZWYuY3VycmVudC5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCFldmVudC53YXNDbGVhbikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflIwgV2ViU29ja2V0IGRpc2Nvbm5lY3RlZCcpO1xyXG4gICAgICAgICAgc2V0Q29ubmVjdGlvblN0YXR1cygnZGlzY29ubmVjdGVkJyk7XHJcbiAgICAgICAgICBhdHRlbXB0UmVjb25uZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgd2Vic29ja2V0UmVmLmN1cnJlbnQub25lcnJvciA9IChlcnJvcikgPT4ge1xyXG4gICAgICAgIGlmICghaXNEZXZNb2RlIHx8IHJlY29ubmVjdEF0dGVtcHRzLmN1cnJlbnQgPCAyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBXZWJTb2NrZXQgZXJyb3IgKGZhbGxiYWNrIG1vZGUpJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldENvbm5lY3Rpb25TdGF0dXMoJ2Vycm9yJyk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign4p2MIFdlYlNvY2tldCBmYWxsYmFjayBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgICBzZXRDb25uZWN0aW9uU3RhdHVzKCdmYWlsZWQnKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIEhhbmRsZSBpbmNvbWluZyBhbGVydCBtZXNzYWdlc1xyXG4gIGNvbnN0IGhhbmRsZUluY29taW5nQWxlcnQgPSB1c2VDYWxsYmFjaygoYWxlcnREYXRhKSA9PiB7XHJcbiAgICBjb25zdCBhbGVydCA9IHtcclxuICAgICAgaWQ6IERhdGUubm93KCkgKyBNYXRoLnJhbmRvbSgpLFxyXG4gICAgICB0eXBlOiBhbGVydERhdGEudHlwZSB8fCBBTEVSVF9UWVBFUy5JTkZPLFxyXG4gICAgICB0aXRsZTogYWxlcnREYXRhLnRpdGxlIHx8ICdOb3RpZmljYXRpb24nLFxyXG4gICAgICBtZXNzYWdlOiBhbGVydERhdGEubWVzc2FnZSB8fCAnJyxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxyXG4gICAgICBwcmlvcml0eTogYWxlcnREYXRhLnByaW9yaXR5IHx8ICdub3JtYWwnLFxyXG4gICAgICBkdXJhdGlvbjogYWxlcnREYXRhLmR1cmF0aW9uIHx8IEFMRVJUX0RJU1BMQVlfRFVSQVRJT04sXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEFkZCB0byBxdWV1ZSBpZiBhbm90aGVyIGFsZXJ0IGlzIHNob3dpbmdcclxuICAgIGlmIChpc0FsZXJ0VmlzaWJsZSkge1xyXG4gICAgICBzZXRBbGVydFF1ZXVlKHByZXYgPT4gWy4uLnByZXYsIGFsZXJ0XSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzaG93QWxlcnQoYWxlcnQpO1xyXG4gICAgfVxyXG4gIH0sIFtpc0FsZXJ0VmlzaWJsZV0pO1xyXG5cclxuICAvLyBTaG93IGFsZXJ0IHdpdGggZmFkZSBpbiBhbmltYXRpb25cclxuICBjb25zdCBzaG93QWxlcnQgPSB1c2VDYWxsYmFjaygoYWxlcnQpID0+IHtcclxuICAgIHNldEN1cnJlbnRBbGVydChhbGVydCk7XHJcbiAgICBzZXRJc0FsZXJ0VmlzaWJsZSh0cnVlKTtcclxuXHJcbiAgICAvLyBDbGVhciBleGlzdGluZyB0aW1lb3V0XHJcbiAgICBpZiAoYWxlcnRUaW1lb3V0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KGFsZXJ0VGltZW91dFJlZi5jdXJyZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBdXRvLWhpZGUgYWZ0ZXIgZHVyYXRpb25cclxuICAgIGFsZXJ0VGltZW91dFJlZi5jdXJyZW50ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGhpZGVBbGVydCgpO1xyXG4gICAgfSwgYWxlcnQuZHVyYXRpb24pO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8gSGlkZSBhbGVydCB3aXRoIGZhZGUgb3V0IGFuaW1hdGlvblxyXG4gIGNvbnN0IGhpZGVBbGVydCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHNldElzQWxlcnRWaXNpYmxlKGZhbHNlKTtcclxuXHJcbiAgICAvLyBQcm9jZXNzIG5leHQgYWxlcnQgaW4gcXVldWUgYWZ0ZXIgZmFkZSBvdXQgY29tcGxldGVzXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgc2V0Q3VycmVudEFsZXJ0KG51bGwpO1xyXG4gICAgICBzZXRBbGVydFF1ZXVlKHByZXYgPT4ge1xyXG4gICAgICAgIGNvbnN0IFtuZXh0QWxlcnQsIC4uLnJlbWFpbmluZ10gPSBwcmV2O1xyXG4gICAgICAgIGlmIChuZXh0QWxlcnQpIHtcclxuICAgICAgICAgIHNob3dBbGVydChuZXh0QWxlcnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVtYWluaW5nO1xyXG4gICAgICB9KTtcclxuICAgIH0sIDMwMCk7IC8vIE1hdGNoIENTUyB0cmFuc2l0aW9uIGR1cmF0aW9uXHJcbiAgfSwgW3Nob3dBbGVydF0pO1xyXG5cclxuICAvLyBBdHRlbXB0IHJlY29ubmVjdGlvbiAodXNlZCBmb3IgV2ViU29ja2V0IGZhbGxiYWNrIG9ubHkpXHJcbiAgY29uc3QgYXR0ZW1wdFJlY29ubmVjdGlvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIGNvbnN0IGlzRGV2TW9kZSA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnIHx8IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCc7XHJcblxyXG4gICAgaWYgKHJlY29ubmVjdEF0dGVtcHRzLmN1cnJlbnQgPCBNQVhfUkVDT05ORUNUX0FUVEVNUFRTKSB7XHJcbiAgICAgIHJlY29ubmVjdEF0dGVtcHRzLmN1cnJlbnQgKz0gMTtcclxuICAgICAgc2V0Q29ubmVjdGlvblN0YXR1cygncmVjb25uZWN0aW5nJyk7XHJcblxyXG4gICAgICByZWNvbm5lY3RUaW1lb3V0UmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAoIWlzRGV2TW9kZSB8fCByZWNvbm5lY3RBdHRlbXB0cy5jdXJyZW50IDw9IDIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5SEIFdlYlNvY2tldCBmYWxsYmFjayByZWNvbm5lY3Rpb24gYXR0ZW1wdCAke3JlY29ubmVjdEF0dGVtcHRzLmN1cnJlbnR9LyR7TUFYX1JFQ09OTkVDVF9BVFRFTVBUU31gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29ubmVjdFdlYlNvY2tldEZhbGxiYWNrKCk7XHJcbiAgICAgIH0sIFJFQ09OTkVDVF9ERUxBWSAqIHJlY29ubmVjdEF0dGVtcHRzLmN1cnJlbnQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGlzRGV2TW9kZSAmJiAhcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0JBTUJJU0xFRVBfV1NfVVJMKSB7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvblN0YXR1cygnbW9jaycpO1xyXG4gICAgICAgIHNldElzRGV2ZWxvcG1lbnRNb2RlKHRydWUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SnIFN3aXRjaGluZyB0byBtb2NrIG1vZGUgLSBubyBzZXJ2ZXIgYXZhaWxhYmxlJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvblN0YXR1cygnZmFpbGVkJyk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcign4p2MIE1heCByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgcmVhY2hlZCcpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSwgW2Nvbm5lY3RXZWJTb2NrZXRGYWxsYmFja10pO1xyXG5cclxuICAvLyBNYW51YWwgYWxlcnQgZGlzbWlzc2FsXHJcbiAgY29uc3QgZGlzbWlzc0FsZXJ0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgaWYgKGFsZXJ0VGltZW91dFJlZi5jdXJyZW50KSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChhbGVydFRpbWVvdXRSZWYuY3VycmVudCk7XHJcbiAgICB9XHJcbiAgICBoaWRlQWxlcnQoKTtcclxuICB9LCBbaGlkZUFsZXJ0XSk7XHJcblxyXG4gIC8vIEluaXRpYWxpemUgU29ja2V0LklPIGNvbm5lY3Rpb25cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29ubmVjdFNvY2tldElPKCk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgLy8gQ2xlYW51cCBTb2NrZXQuSU8gY29ubmVjdGlvblxyXG4gICAgICBpZiAoc29ja2V0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBzb2NrZXRSZWYuY3VycmVudC5kaXNjb25uZWN0KCk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gQ2xlYW51cCBXZWJTb2NrZXQgZmFsbGJhY2tcclxuICAgICAgaWYgKHdlYnNvY2tldFJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgd2Vic29ja2V0UmVmLmN1cnJlbnQuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICAvLyBDbGVhbnVwIHRpbWVyc1xyXG4gICAgICBpZiAoYWxlcnRUaW1lb3V0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQoYWxlcnRUaW1lb3V0UmVmLmN1cnJlbnQpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChyZWNvbm5lY3RUaW1lb3V0UmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQocmVjb25uZWN0VGltZW91dFJlZi5jdXJyZW50KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LCBbY29ubmVjdFNvY2tldElPXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAvLyBBbGVydCBzdGF0ZVxyXG4gICAgaXNBbGVydFZpc2libGUsXHJcbiAgICBjdXJyZW50QWxlcnQsXHJcbiAgICBhbGVydFF1ZXVlOiBhbGVydFF1ZXVlLmxlbmd0aCxcclxuICAgIGNvbm5lY3Rpb25TdGF0dXMsXHJcbiAgICBpc0RldmVsb3BtZW50TW9kZSxcclxuXHJcbiAgICAvLyBBbGVydCB0eXBlc1xyXG4gICAgQUxFUlRfVFlQRVMsXHJcblxyXG4gICAgLy8gQWN0aW9uc1xyXG4gICAgZGlzbWlzc0FsZXJ0LFxyXG5cclxuICAgIC8vIENvbm5lY3Rpb24gY29udHJvbFxyXG4gICAgcmVjb25uZWN0OiBjb25uZWN0U29ja2V0SU8sIC8vIFByaW1hcnk6IFNvY2tldC5JT1xyXG4gICAgcmVjb25uZWN0V2ViU29ja2V0OiBjb25uZWN0V2ViU29ja2V0RmFsbGJhY2ssIC8vIEZhbGxiYWNrOiBXZWJTb2NrZXQgKGRlcHJlY2F0ZWQpXHJcbiAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVzZUJhbWJpc2xlZXBBbGVydHM7XHJcbiIsIi8vIEhlYWRlci5qcyAtIEVuaGFuY2VkIGhlYWRlciB3aXRoIGZpeGVkIG5hdmJhciBhbmQgaG92ZXIgZGVzY3JpcHRpb25zXHJcbi8vIEZvbGxvd2luZyBjb3BpbG90LWluc3RydWN0aW9ucy5tZDogQWNjZXNzaWJsZSBuYXZpZ2F0aW9uIGRlc2lnblxyXG5cclxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgdXNlTmFtZVRyYW5zZm9ybWF0aW9uIGZyb20gJy4uLy4uL2hvb2tzL3VzZU5hbWVUcmFuc2Zvcm1hdGlvbi5qcyc7XHJcbmltcG9ydCB1c2VCYW1iaXNsZWVwQWxlcnRzIGZyb20gJy4uLy4uL2hvb2tzL3VzZUJhbWJpc2xlZXBBbGVydHMuanMnO1xyXG5cclxuY29uc3QgSGVhZGVyID0gKHsgY3VycmVudFZpZXcsIHNldEN1cnJlbnRWaWV3IH0pID0+IHtcclxuICBjb25zdCBbaG92ZXJlZEl0ZW0sIHNldEhvdmVyZWRJdGVtXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gIGNvbnN0IFtob3ZlclRpbWVyLCBzZXRIb3ZlclRpbWVyXSA9IHVzZVN0YXRlKG51bGwpO1xyXG5cclxuICAvLyBJbXBvcnQgbmFtZSB0cmFuc2Zvcm1hdGlvbiBob29rXHJcbiAgY29uc3QgeyBnZXREaXNwbGF5TmFtZSwgZnVsbE5hbWUgfSA9IHVzZU5hbWVUcmFuc2Zvcm1hdGlvbigpO1xyXG5cclxuICAvLyBJbXBvcnQgYmFtYmlzbGVlcCBhbGVydHMgaG9va1xyXG4gIGNvbnN0IHtcclxuICAgIGlzQWxlcnRWaXNpYmxlLFxyXG4gICAgY3VycmVudEFsZXJ0LFxyXG4gICAgYWxlcnRRdWV1ZSxcclxuICAgIGNvbm5lY3Rpb25TdGF0dXMsXHJcbiAgICBBTEVSVF9UWVBFUyxcclxuICAgIGRpc21pc3NBbGVydCxcclxuICAgIHRyaWdnZXJUZXN0QWxlcnQsXHJcbiAgfSA9IHVzZUJhbWJpc2xlZXBBbGVydHMoKTtcclxuXHJcbiAgY29uc3QgbmF2aWdhdGlvbkl0ZW1zID0gW1xyXG4gICAgeyBpZDogJ2NoYXQnLCBsYWJlbDogJ0NoYXQnLCBpY29uOiAn8J+SrCcsIGRlc2NyaXB0aW9uOiBgVGFsayB3aXRoICR7ZnVsbE5hbWV9IC0gU2hhcmUgdGhvdWdodHMsIGZlZWxpbmdzLCBhbmQgaGF2ZSBtZWFuaW5nZnVsIGNvbnZlcnNhdGlvbnNgIH0sXHJcbiAgICB7IGlkOiAnam91cm5hbCcsIGxhYmVsOiAnSm91cm5hbCcsIGljb246ICfwn5OdJywgZGVzY3JpcHRpb246ICdEcmVhbSBKb3VybmFsIC0gV3JpdGUgeW91ciB0aG91Z2h0cywgZHJlYW1zLCBhbmQgcHJpdmF0ZSByZWZsZWN0aW9ucycgfSxcclxuICAgIHsgaWQ6ICdjcmVhdGl2ZScsIGxhYmVsOiAnQ3JlYXRpdmUnLCBpY29uOiAn8J+OqCcsIGRlc2NyaXB0aW9uOiAnQ3JlYXRpdmUgU3R1ZGlvIC0gQ29sbGFib3JhdGUgb24gc3RvcmllcywgYXJ0LCBhbmQgY3JlYXRpdmUgcHJvamVjdHMgdG9nZXRoZXInIH0sXHJcbiAgICB7IGlkOiAncmVsYXRpb25zaGlwJywgbGFiZWw6ICdKb3VybmV5JywgaWNvbjogJ/CfkpYnLCBkZXNjcmlwdGlvbjogJ091ciBKb3VybmV5IC0gVHJhY2sgcmVsYXRpb25zaGlwIHByb2dyZXNzLCBtaWxlc3RvbmVzLCBhbmQgZW1vdGlvbmFsIGdyb3d0aCcgfSxcclxuICAgIHsgaWQ6ICdwZXJzb25hJywgbGFiZWw6ICdNb2RlJywgaWNvbjogJ/Cfjq0nLCBkZXNjcmlwdGlvbjogJ1BlcnNvbmFsaXR5IE1vZGUgLSBDaG9vc2UgaW50ZXJhY3Rpb24gc3R5bGU6IEdpcmxmcmllbmQsIE11c2UsIE1lbnRvciwgb3IgR2hvc3R3cml0ZXInIH0sXHJcbiAgXTtcclxuXHJcbiAgY29uc3QgaGFuZGxlTW91c2VFbnRlciA9IChpdGVtSWQpID0+IHtcclxuICAgIC8vIENsZWFyIGFueSBleGlzdGluZyB0aW1lclxyXG4gICAgaWYgKGhvdmVyVGltZXIpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KGhvdmVyVGltZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNldCAxLXNlY29uZCBkZWxheSBmb3IgaG92ZXIgZGVzY3JpcHRpb25cclxuICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHNldEhvdmVyZWRJdGVtKGl0ZW1JZCk7XHJcbiAgICB9LCAxMDAwKTtcclxuXHJcbiAgICBzZXRIb3ZlclRpbWVyKHRpbWVyKTtcclxuICB9O1xyXG5cclxuICBjb25zdCBoYW5kbGVNb3VzZUxlYXZlID0gKCkgPT4ge1xyXG4gICAgLy8gQ2xlYXIgdGltZXIgYW5kIGhpZGUgZGVzY3JpcHRpb25cclxuICAgIGlmIChob3ZlclRpbWVyKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChob3ZlclRpbWVyKTtcclxuICAgICAgc2V0SG92ZXJUaW1lcihudWxsKTtcclxuICAgIH1cclxuICAgIHNldEhvdmVyZWRJdGVtKG51bGwpO1xyXG4gIH07XHJcblxyXG4gIC8vIENsZWFudXAgdGltZXIgb24gdW5tb3VudFxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICBpZiAoaG92ZXJUaW1lcikge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChob3ZlclRpbWVyKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LCBbaG92ZXJUaW1lcl0pO1xyXG5cclxuICBjb25zdCBoYW5kbGVOYXZpZ2F0aW9uID0gKHZpZXdJZCkgPT4ge1xyXG4gICAgc2V0Q3VycmVudFZpZXcodmlld0lkKTtcclxuICAgIGhhbmRsZU1vdXNlTGVhdmUoKTsgLy8gSGlkZSBhbnkgdmlzaWJsZSBkZXNjcmlwdGlvbnNcclxuICB9O1xyXG5cclxuICAvLyBGb3JtYXQgdGltZXN0YW1wIGZvciBhbGVydHNcclxuICBjb25zdCBmb3JtYXRBbGVydFRpbWUgPSAodGltZXN0YW1wKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wKS50b0xvY2FsZVRpbWVTdHJpbmcoJ2VuLVVTJywge1xyXG4gICAgICBob3VyMTI6IGZhbHNlLFxyXG4gICAgICBob3VyOiAnMi1kaWdpdCcsXHJcbiAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gR2V0IGFsZXJ0IGljb24gYmFzZWQgb24gdHlwZVxyXG4gIGNvbnN0IGdldEFsZXJ0SWNvbiA9ICh0eXBlKSA9PiB7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgIGNhc2UgQUxFUlRfVFlQRVMuVVBEQVRFOiByZXR1cm4gJ/Cfk6EnO1xyXG4gICAgY2FzZSBBTEVSVF9UWVBFUy5XQVJOSU5HOiByZXR1cm4gJ+KaoO+4jyc7XHJcbiAgICBjYXNlIEFMRVJUX1RZUEVTLkFMRVJUOiByZXR1cm4gJ/CfmqgnO1xyXG4gICAgY2FzZSBBTEVSVF9UWVBFUy5JTkZPOiByZXR1cm4gJ+KEue+4jyc7XHJcbiAgICBkZWZhdWx0OiByZXR1cm4gJ+KEue+4jyc7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwiaGVhZGVyLWZpeGVkXCI+XHJcbiAgICAgIHsvKiBGaXhlZCBUb3AgTmF2aWdhdGlvbiBCYXIgKi99XHJcbiAgICAgIDxuYXYgY2xhc3NOYW1lPVwidG9wLW5hdmJhclwiIGFyaWEtbGFiZWw9XCJNYWluIG5hdmlnYXRpb25cIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmJhci1jb250YWluZXJcIj5cclxuICAgICAgICAgIHsvKiBCcmFuZC9Mb2dvICovfVxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJuYXZiYXItYnJhbmRcIiBvbkNsaWNrPXsoKSA9PiBoYW5kbGVOYXZpZ2F0aW9uKCdjaGF0Jyl9PlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJicmFuZC1pY29uXCI+8J+RqeKAjeKale+4jzwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYnJhbmQtdGV4dFwiPkRyX0dpcmxmcmllbmQuZXhlPC9zcGFuPlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgey8qIE5hdmlnYXRpb24gTGlua3MgKi99XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmJhci1uYXZcIj5cclxuICAgICAgICAgICAge25hdmlnYXRpb25JdGVtcy5tYXAoaXRlbSA9PiAoXHJcbiAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAga2V5PXtpdGVtLmlkfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibmF2LWl0ZW0tY29udGFpbmVyXCJcclxuICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gaGFuZGxlTW91c2VFbnRlcihpdGVtLmlkKX1cclxuICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17aGFuZGxlTW91c2VMZWF2ZX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICBocmVmPXtgIyR7aXRlbS5pZH1gfVxyXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVOYXZpZ2F0aW9uKGl0ZW0uaWQpO1xyXG4gICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BuYXYtYW5jaG9yICR7Y3VycmVudFZpZXcgPT09IGl0ZW0uaWQgPyAnYWN0aXZlJyA6ICcnfWB9XHJcbiAgICAgICAgICAgICAgICAgIGFyaWEtY3VycmVudD17Y3VycmVudFZpZXcgPT09IGl0ZW0uaWQgPyAncGFnZScgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5hdi1pY29uXCI+e2l0ZW0uaWNvbn08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5hdi1sYWJlbFwiPntpdGVtLmxhYmVsfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAgICAgICAgICB7LyogSG92ZXIgRGVzY3JpcHRpb24gVG9vbHRpcCAqL31cclxuICAgICAgICAgICAgICAgIHtob3ZlcmVkSXRlbSA9PT0gaXRlbS5pZCAmJiAoXHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmF2LXRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9vbHRpcC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvb2x0aXAtdGl0bGVcIj57aXRlbS5sYWJlbH08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9vbHRpcC1kZXNjcmlwdGlvblwiPntpdGVtLmRlc2NyaXB0aW9ufTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgey8qIFN0YXR1cyBJbmRpY2F0b3IgKi99XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm5hdmJhci1zdGF0dXNcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGF0dXMtaW5kaWNhdG9yIG9ubGluZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJzdGF0dXMtdGV4dFwiPk9ubGluZTwvc3Bhbj5cclxuXHJcbiAgICAgICAgICAgIHsvKiBBbGVydCBDb25uZWN0aW9uIFN0YXR1cyAqL31cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17YGFsZXJ0LWNvbm5lY3Rpb24tc3RhdHVzICR7Y29ubmVjdGlvblN0YXR1c31gfVxyXG4gICAgICAgICAgICAgIHRpdGxlPXtgQmFtYmlzbGVlcCBQcmltZTogJHtjb25uZWN0aW9uU3RhdHVzfWB9XHJcbiAgICAgICAgICAgID48L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIHsvKiBBbGVydCBRdWV1ZSBJbmRpY2F0b3IgKi99XHJcbiAgICAgICAgICAgIHthbGVydFF1ZXVlID4gMCAmJiAoXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGVydC1xdWV1ZS1iYWRnZVwiIHRpdGxlPXtgJHthbGVydFF1ZXVlfSBhbGVydHMgcXVldWVkYH0+XHJcbiAgICAgICAgICAgICAgICB7YWxlcnRRdWV1ZX1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L25hdj5cclxuXHJcbiAgICAgIHsvKiBTcGFjZXIgd2l0aCBBbGVydCBTeXN0ZW0gKi99XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGVhZGVyLXNwYWNlclwiPlxyXG4gICAgICAgIHsvKiBCYW1iaXNsZWVwIFByaW1lIEFsZXJ0ICovfVxyXG4gICAgICAgIHtjdXJyZW50QWxlcnQgJiYgKFxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e2BiYW1iaXNsZWVwLWFsZXJ0IGFsZXJ0LSR7Y3VycmVudEFsZXJ0LnR5cGV9ICR7aXNBbGVydFZpc2libGUgPyAndmlzaWJsZScgOiAnJ31gfVxyXG4gICAgICAgICAgICByb2xlPVwiYWxlcnRcIlxyXG4gICAgICAgICAgICBhcmlhLWxpdmU9e2N1cnJlbnRBbGVydC5wcmlvcml0eSA9PT0gJ2hpZ2gnID8gJ2Fzc2VydGl2ZScgOiAncG9saXRlJ31cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGVydC1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGVydC1tYWluXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0LWljb25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cclxuICAgICAgICAgICAgICAgICAge2dldEFsZXJ0SWNvbihjdXJyZW50QWxlcnQudHlwZSl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxlcnQtdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0LXRpdGxlXCI+e2N1cnJlbnRBbGVydC50aXRsZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAge2N1cnJlbnRBbGVydC5tZXNzYWdlICYmIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0LW1lc3NhZ2VcIj57Y3VycmVudEFsZXJ0Lm1lc3NhZ2V9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsZXJ0LWFjdGlvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxlcnQtdGltZXN0YW1wXCI+XHJcbiAgICAgICAgICAgICAgICAgIHtmb3JtYXRBbGVydFRpbWUoY3VycmVudEFsZXJ0LnRpbWVzdGFtcCl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWxlcnQtZGlzbWlzc1wiXHJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2Rpc21pc3NBbGVydH1cclxuICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkRpc21pc3MgYWxlcnRcIlxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDinJVcclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9oZWFkZXI+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcclxuIl0sIm5hbWVzIjpbInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJpbyIsInVzZUJhbWJpc2xlZXBBbGVydHMiLCJpc0FsZXJ0VmlzaWJsZSIsInNldElzQWxlcnRWaXNpYmxlIiwiY3VycmVudEFsZXJ0Iiwic2V0Q3VycmVudEFsZXJ0IiwiYWxlcnRRdWV1ZSIsInNldEFsZXJ0UXVldWUiLCJjb25uZWN0aW9uU3RhdHVzIiwic2V0Q29ubmVjdGlvblN0YXR1cyIsImlzRGV2ZWxvcG1lbnRNb2RlIiwic2V0SXNEZXZlbG9wbWVudE1vZGUiLCJzb2NrZXRSZWYiLCJ3ZWJzb2NrZXRSZWYiLCJhbGVydFRpbWVvdXRSZWYiLCJyZWNvbm5lY3RUaW1lb3V0UmVmIiwicmVjb25uZWN0QXR0ZW1wdHMiLCJNQVhfUkVDT05ORUNUX0FUVEVNUFRTIiwiUkVDT05ORUNUX0RFTEFZIiwiQUxFUlRfRElTUExBWV9EVVJBVElPTiIsIkFMRVJUX1RZUEVTIiwiVVBEQVRFIiwiV0FSTklORyIsIkFMRVJUIiwiSU5GTyIsImNvbm5lY3RTb2NrZXRJTyIsImlzRGV2TW9kZSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIndpbmRvdyIsImxvY2F0aW9uIiwiaG9zdG5hbWUiLCJzZXJ2ZXJVcmwiLCJSRUFDVF9BUFBfQkFNQklTTEVFUF9TT0NLRVRfVVJMIiwiY29uc29sZSIsImxvZyIsImN1cnJlbnQiLCJzZWN1cmUiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJhdXRvQ29ubmVjdCIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwicmVjb25uZWN0aW9uRGVsYXkiLCJ0aW1lb3V0IiwiYXV0aCIsInRyYW5zcG9ydHMiLCJvbiIsImVtaXQiLCJhbGVydERhdGEiLCJoYW5kbGVJbmNvbWluZ0FsZXJ0IiwidHlwZSIsImVycm9yIiwid2FybiIsIm1lc3NhZ2UiLCJyZWFzb24iLCJhdHRlbXB0TnVtYmVyIiwiY29ubmVjdFdlYlNvY2tldEZhbGxiYWNrIiwid3NVcmwiLCJSRUFDVF9BUFBfQkFNQklTTEVFUF9XU19VUkwiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJldmVudCIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJvbmNsb3NlIiwid2FzQ2xlYW4iLCJhdHRlbXB0UmVjb25uZWN0aW9uIiwib25lcnJvciIsImFsZXJ0IiwiaWQiLCJEYXRlIiwibm93IiwiTWF0aCIsInJhbmRvbSIsInRpdGxlIiwidGltZXN0YW1wIiwicHJpb3JpdHkiLCJkdXJhdGlvbiIsInByZXYiLCJzaG93QWxlcnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaGlkZUFsZXJ0IiwibmV4dEFsZXJ0IiwicmVtYWluaW5nIiwiZGlzbWlzc0FsZXJ0IiwiZGlzY29ubmVjdCIsImNsb3NlIiwibGVuZ3RoIiwicmVjb25uZWN0IiwicmVjb25uZWN0V2ViU29ja2V0IiwiUmVhY3QiLCJ1c2VOYW1lVHJhbnNmb3JtYXRpb24iLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwiSGVhZGVyIiwiX3JlZiIsImN1cnJlbnRWaWV3Iiwic2V0Q3VycmVudFZpZXciLCJob3ZlcmVkSXRlbSIsInNldEhvdmVyZWRJdGVtIiwiaG92ZXJUaW1lciIsInNldEhvdmVyVGltZXIiLCJnZXREaXNwbGF5TmFtZSIsImZ1bGxOYW1lIiwidHJpZ2dlclRlc3RBbGVydCIsIm5hdmlnYXRpb25JdGVtcyIsImxhYmVsIiwiaWNvbiIsImRlc2NyaXB0aW9uIiwiaGFuZGxlTW91c2VFbnRlciIsIml0ZW1JZCIsInRpbWVyIiwiaGFuZGxlTW91c2VMZWF2ZSIsImhhbmRsZU5hdmlnYXRpb24iLCJ2aWV3SWQiLCJmb3JtYXRBbGVydFRpbWUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJob3VyMTIiLCJob3VyIiwibWludXRlIiwiZ2V0QWxlcnRJY29uIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJvbkNsaWNrIiwibWFwIiwiaXRlbSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsImhyZWYiLCJlIiwicHJldmVudERlZmF1bHQiLCJ1bmRlZmluZWQiLCJyb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5584\n\n}");

/***/ }),

/***/ 6960:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ layout_Sidebar)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./src/services/memoryService.js\nvar memoryService = __webpack_require__(9522);\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(4848);\n;// ./src/components/ui/QuickModeSelector.js\n// QuickModeSelector.js - Simplified mode switching for header/sidebar\n// Following copilot-instructions.md: Quick access to personality modes\n\n\n\n\nconst QuickModeSelector = _ref => {\n  let {\n    currentPersona,\n    onPersonaChange,\n    compact = false\n  } = _ref;\n  const [isOpen, setIsOpen] = (0,react.useState)(false);\n  const [isChanging, setIsChanging] = (0,react.useState)(false);\n  const quickModes = [{\n    id: 'GIRLFRIEND',\n    name: 'Girlfriend',\n    emoji: '💝',\n    color: '#ff69b4'\n  }, {\n    id: 'MUSE',\n    name: 'Muse',\n    emoji: '🎨',\n    color: '#9370db'\n  }, {\n    id: 'MENTOR',\n    name: 'Mentor',\n    emoji: '🎓',\n    color: '#4169e1'\n  }, {\n    id: 'GHOSTWRITER',\n    name: 'Writer',\n    emoji: '✍️',\n    color: '#00ffff'\n  }];\n  const currentMode = quickModes.find(mode => mode.id === currentPersona) || quickModes[0];\n  const handleModeChange = async modeId => {\n    if (isChanging) return;\n    setIsChanging(true);\n    setIsOpen(false);\n    try {\n      // Save the selected persona\n      await (0,memoryService/* setMemory */.S0)('selected_persona', modeId);\n\n      // Update user context\n      const userContext = (await (0,memoryService/* getMemory */.So)('user_context')) || {};\n      const updatedContext = {\n        ...userContext,\n        preferred_mode: modeId,\n        persona_changed_at: new Date().toISOString()\n      };\n      await (0,memoryService/* setMemory */.S0)('user_context', updatedContext);\n\n      // Notify parent\n      if (onPersonaChange) {\n        onPersonaChange(modeId);\n      }\n\n      // Brief delay for visual feedback\n      setTimeout(() => setIsChanging(false), 300);\n    } catch (error) {\n      console.error('Error changing mode:', error);\n      setIsChanging(false);\n    }\n  };\n\n  // Close dropdown when clicking outside\n  (0,react.useEffect)(() => {\n    const handleClickOutside = event => {\n      if (isOpen && !event.target.closest('.quick-mode-selector')) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener('click', handleClickOutside);\n    return () => document.removeEventListener('click', handleClickOutside);\n  }, [isOpen]);\n  if (compact) {\n    return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"quick-mode-selector compact\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n        className: `mode-toggle-btn ${isChanging ? 'changing' : ''}`,\n        onClick: () => setIsOpen(!isOpen),\n        disabled: isChanging,\n        title: `Current mode: ${currentMode.name}`,\n        \"aria-label\": `Current mode: ${currentMode.name}. Click to change mode.`,\n        style: {\n          '--mode-color': currentMode.color\n        },\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"mode-emoji\",\n          children: currentMode.emoji\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"mode-name\",\n          children: currentMode.name\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"dropdown-arrow\",\n          children: \"\\u25BC\"\n        })]\n      }), isOpen && /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"mode-dropdown\",\n        children: quickModes.map(mode => /*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n          className: `mode-option ${mode.id === currentPersona ? 'current' : ''}`,\n          onClick: () => handleModeChange(mode.id),\n          style: {\n            '--mode-color': mode.color\n          },\n          disabled: isChanging,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"mode-emoji\",\n            children: mode.emoji\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"mode-name\",\n            children: mode.name\n          }), mode.id === currentPersona && /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"current-indicator\",\n            children: \"\\u2713\"\n          })]\n        }, mode.id))\n      })]\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: \"quick-mode-selector\",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"current-mode-display\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"current-emoji\",\n        style: {\n          color: currentMode.color\n        },\n        children: currentMode.emoji\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"current-info\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"current-name\",\n          children: [\"Mode: \", currentMode.name]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"current-status\",\n          children: isChanging ? 'Switching...' : 'Active'\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n      className: \"mode-grid\",\n      children: quickModes.map(mode => /*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n        className: `mode-btn ${mode.id === currentPersona ? 'active' : ''} ${isChanging ? 'disabled' : ''}`,\n        onClick: () => handleModeChange(mode.id),\n        disabled: isChanging,\n        style: {\n          '--mode-color': mode.color\n        },\n        title: `Switch to ${mode.name} mode`,\n        \"aria-pressed\": mode.id === currentPersona,\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"mode-emoji\",\n          children: mode.emoji\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n          className: \"mode-label\",\n          children: mode.name\n        })]\n      }, mode.id))\n    })]\n  });\n};\n/* harmony default export */ const ui_QuickModeSelector = (QuickModeSelector);\n;// ./src/components/ui/StatsPanel.js\n// StatsPanel.js - Sliding stats panel for Agent Dr Girlfriend\n// Following copilot-instructions.md: Emotional UX design with slide animations\n\n\n\nconst StatsPanel = _ref => {\n  let {\n    isVisible,\n    onClose,\n    relationshipStats,\n    emotionalTrends,\n    systemStats,\n    userContext\n  } = _ref;\n  const getRelationshipLevelDisplay = level => {\n    const levels = {\n      'getting_to_know': {\n        emoji: '🌱',\n        text: 'Getting to Know'\n      },\n      'building_connection': {\n        emoji: '🌿',\n        text: 'Building Connection'\n      },\n      'deep_bond': {\n        emoji: '🌸',\n        text: 'Deep Bond'\n      },\n      'soulmate_connection': {\n        emoji: '🌹',\n        text: 'Soulmate Level'\n      }\n    };\n    return levels[level] || {\n      emoji: '💫',\n      text: 'Growing Together'\n    };\n  };\n  const getEmotionEmoji = emotion => {\n    const emojis = {\n      'joy': '😊',\n      'love': '💕',\n      'excitement': '🤩',\n      'creative': '✨',\n      'sad': '😢',\n      'neutral': '😐',\n      'angry': '😠',\n      'fear': '😨',\n      'surprise': '😲',\n      'calm': '😌',\n      'motivated': '💪',\n      'curious': '🤔'\n    };\n    return emojis[emotion] || '💫';\n  };\n  if (!isVisible) return null;\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n      className: \"stats-panel-backdrop\",\n      onClick: onClose,\n      \"aria-hidden\": \"true\"\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"stats-panel\",\n      role: \"dialog\",\n      \"aria-labelledby\": \"stats-panel-title\",\n      \"aria-modal\": \"true\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"stats-panel-header\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h2\", {\n          id: \"stats-panel-title\",\n          className: \"stats-panel-title\",\n          children: \"\\uD83D\\uDCCA Relationship Statistics\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          className: \"stats-panel-close\",\n          onClick: onClose,\n          \"aria-label\": \"Close statistics panel\",\n          title: \"Close statistics panel\",\n          children: \"\\u2715\"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"stats-panel-content\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"stats-section\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n            className: \"stats-section-title\",\n            children: \"\\uD83D\\uDC96 Our Relationship\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"stats-grid\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"stat-card\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"stat-icon\",\n                children: \"\\uD83D\\uDCC5\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"stat-content\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-value\",\n                  children: relationshipStats?.daysTogether || 0\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Days Together\"\n                })]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"stat-card\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"stat-icon\",\n                children: \"\\uD83D\\uDCAC\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"stat-content\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-value\",\n                  children: relationshipStats?.totalMessages || 0\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Messages\"\n                })]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"stat-card\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"stat-icon\",\n                children: \"\\uD83D\\uDCDD\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"stat-content\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-value\",\n                  children: relationshipStats?.journalEntries || 0\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Journal Entries\"\n                })]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"stat-card\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"stat-icon\",\n                children: \"\\uD83C\\uDFA8\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"stat-content\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-value\",\n                  children: relationshipStats?.creativeProjects || 0\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Creative Works\"\n                })]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"stat-card\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"stat-icon\",\n                children: \"\\uD83C\\uDFC6\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"stat-content\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-value\",\n                  children: relationshipStats?.milestones || 0\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Milestones\"\n                })]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"stat-card\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"stat-icon\",\n                children: \"\\uD83E\\uDD1D\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"stat-content\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-value\",\n                  children: relationshipStats?.totalInteractions || 0\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"stat-label\",\n                  children: \"Total Interactions\"\n                })]\n              })]\n            })]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n            className: \"relationship-level\",\n            children: (() => {\n              const level = getRelationshipLevelDisplay(relationshipStats?.relationshipLevel);\n              return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"level-display\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"level-emoji\",\n                  children: level.emoji\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"level-text\",\n                  children: level.text\n                })]\n              });\n            })()\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"stats-section\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n            className: \"stats-section-title\",\n            children: \"\\uD83E\\uDDE0 Emotional Intelligence\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"emotion-stats\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"current-emotion\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"emotion-emoji\",\n                children: getEmotionEmoji(emotionalTrends?.dominantEmotion)\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"emotion-info\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"emotion-label\",\n                  children: \"Current Vibe\"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                  className: \"emotion-value\",\n                  children: emotionalTrends?.dominantEmotion || 'neutral'\n                })]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"emotion-metrics\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"metric\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"metric-label\",\n                  children: \"Emotional Range:\"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"metric-value\",\n                  children: emotionalTrends?.emotionVariety || 0\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"metric\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"metric-label\",\n                  children: \"Total Emotions:\"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"metric-value\",\n                  children: emotionalTrends?.totalEmotionalEntries || 0\n                })]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"metric\",\n                children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"metric-label\",\n                  children: \"Recent Activity:\"\n                }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                  className: \"metric-value\",\n                  children: emotionalTrends?.recentEmotions || 0\n                })]\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"stats-section\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n            className: \"stats-section-title\",\n            children: \"\\u2699\\uFE0F System Status\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"system-stats\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"system-item\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-label\",\n                children: \"Current Mode:\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-value\",\n                children: systemStats?.currentMode || 'GIRLFRIEND'\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"system-item\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-label\",\n                children: \"Uptime:\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-value\",\n                children: systemStats?.uptime || '24/7'\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"system-item\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-label\",\n                children: \"Storage Health:\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-value health-optimal\",\n                children: systemStats?.storageHealth || 'optimal'\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"system-item\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-label\",\n                children: \"Version:\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-value\",\n                children: \"BambiSleep v1.0.0\"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"system-item\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-label\",\n                children: \"Last Active:\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"system-value\",\n                children: \"Just Now\"\n              })]\n            })]\n          })]\n        })]\n      })]\n    })]\n  });\n};\n/* harmony default export */ const ui_StatsPanel = (StatsPanel);\n// EXTERNAL MODULE: ./src/hooks/useNameTransformation.js\nvar useNameTransformation = __webpack_require__(9077);\n;// ./src/components/layout/Sidebar.js\n// Sidebar.js - Enhanced sidebar with Agent Dr Girlfriend stats and telemetry\n// Following copilot-instructions.md: Emotional UX design with comprehensive stats\n\n\n\n\n\n\n\nconst Sidebar = _ref => {\n  let {\n    currentView,\n    setCurrentView\n  } = _ref;\n  const [userContext, setUserContext] = (0,react.useState)(null);\n  const [relationshipStats, setRelationshipStats] = (0,react.useState)(null);\n  const [emotionalTrends, setEmotionalTrends] = (0,react.useState)(null);\n  const [systemStats, setSystemStats] = (0,react.useState)(null);\n  const [isLoading, setIsLoading] = (0,react.useState)(true);\n  const [screenReaderEnabled, setScreenReaderEnabled] = (0,react.useState)(false);\n  const [currentPersona, setCurrentPersona] = (0,react.useState)('GIRLFRIEND');\n  const [showStatsPanel, setShowStatsPanel] = (0,react.useState)(false);\n\n  // Import name transformation hook\n  const {\n    getDisplayName,\n    getPersonalizedGreeting,\n    fullName,\n    name\n  } = (0,useNameTransformation/* default */.A)();\n\n  // Detect if screen reader is likely active\n  (0,react.useEffect)(() => {\n    const detectScreenReader = () => {\n      // Check for common screen reader indicators\n      const hasAriaLive = document.querySelector('[aria-live]');\n      const hasAriaLabel = document.querySelector('[aria-label]');\n      const hasScreenReaderText = document.querySelector('.sr-only');\n      const reducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n      const highContrast = window.matchMedia('(prefers-contrast: high)').matches;\n\n      // Check if user has previously enabled screen reader mode\n      const savedPreference = localStorage.getItem('screen-reader-enabled') === 'true';\n\n      // Auto-detect based on accessibility features usage\n      const likelyScreenReader = savedPreference || reducedMotion || highContrast || hasAriaLive && hasAriaLabel && hasScreenReaderText;\n      setScreenReaderEnabled(likelyScreenReader);\n\n      // Apply class to body for CSS targeting\n      if (likelyScreenReader) {\n        document.body.classList.add('screen-reader-enabled');\n      }\n    };\n    detectScreenReader();\n  }, []);\n  const toggleScreenReader = () => {\n    const newState = !screenReaderEnabled;\n    setScreenReaderEnabled(newState);\n    localStorage.setItem('screen-reader-enabled', newState.toString());\n    if (newState) {\n      document.body.classList.add('screen-reader-enabled');\n      // Announce the change\n      const announcement = document.getElementById('sr-announcements');\n      if (announcement) {\n        announcement.textContent = 'Screen reader mode enabled - accessibility features are now visible';\n        setTimeout(() => {\n          announcement.textContent = `${fullName} is ready for conversation`;\n        }, 3000);\n      }\n    } else {\n      document.body.classList.remove('screen-reader-enabled');\n      const announcement = document.getElementById('sr-announcements');\n      if (announcement) {\n        announcement.textContent = 'Screen reader mode disabled';\n        setTimeout(() => {\n          announcement.textContent = `${fullName} is ready for conversation`;\n        }, 3000);\n      }\n    }\n  };\n\n  // Load comprehensive data for sidebar\n  (0,react.useEffect)(() => {\n    const loadSidebarData = async () => {\n      try {\n        setIsLoading(true);\n        const [rawContext, rawEmotionalHistory, rawRecentMessages, rawRelationshipMilestones, rawJournalEntries, rawCreativeProjects, rawSelectedPersona] = await Promise.all([(0,memoryService/* getMemory */.So)('user_context'), (0,memoryService/* getMemory */.So)('emotional_history'), (0,memoryService/* getMemory */.So)('recent_messages'), (0,memoryService/* getMemory */.So)('relationship_milestones'), (0,memoryService/* getMemory */.So)('journal_entries'), (0,memoryService/* getMemory */.So)('creative_projects'), (0,memoryService/* getMemory */.So)('selected_persona')]);\n\n        // Apply null checks and defaults after Promise resolution\n        const context = rawContext || {};\n        const emotional_history = rawEmotionalHistory || [];\n        const recent_messages = rawRecentMessages || [];\n        const relationship_milestones = rawRelationshipMilestones || [];\n        const journal_entries = rawJournalEntries || [];\n        const creative_projects = rawCreativeProjects || [];\n        const selected_persona = rawSelectedPersona || 'GIRLFRIEND';\n        setUserContext(context);\n        setCurrentPersona(selected_persona);\n\n        // Calculate relationship stats with proper null checks\n        const firstInteraction = context?.first_interaction || new Date().toISOString();\n        const daysTogether = Math.floor((new Date() - new Date(firstInteraction)) / (1000 * 60 * 60 * 24));\n        const totalInteractions = recent_messages.length + journal_entries.length + creative_projects.length;\n        setRelationshipStats({\n          daysTogether,\n          totalInteractions,\n          totalMessages: recent_messages.length,\n          journalEntries: journal_entries.length,\n          creativeProjects: creative_projects.length,\n          milestones: relationship_milestones.length,\n          relationshipLevel: context?.relationship_level || 'getting_to_know'\n        });\n\n        // Calculate emotional trends\n        const recentEmotions = emotional_history.slice(-10);\n        const emotionCounts = recentEmotions.reduce((acc, item) => {\n          acc[item.emotion] = (acc[item.emotion] || 0) + 1;\n          return acc;\n        }, {});\n        const dominantEmotion = Object.entries(emotionCounts).sort((_ref2, _ref3) => {\n          let [, a] = _ref2;\n          let [, b] = _ref3;\n          return b - a;\n        })[0]?.[0] || 'neutral';\n        setEmotionalTrends({\n          dominantEmotion,\n          totalEmotionalEntries: emotional_history.length,\n          recentEmotions: recentEmotions.length,\n          emotionVariety: Object.keys(emotionCounts).length\n        });\n\n        // System stats\n        setSystemStats({\n          currentMode: context?.preferred_mode || 'GIRLFRIEND',\n          lastActive: new Date().toISOString(),\n          storageHealth: 'optimal',\n          uptime: '24/7'\n        });\n      } catch (error) {\n        console.error('Error loading sidebar data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadSidebarData();\n  }, [currentView]); // Refresh when view changes\n\n  if (isLoading) {\n    return /*#__PURE__*/(0,jsx_runtime.jsx)(\"aside\", {\n      className: \"sidebar loading\",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"loading-spinner\",\n          children: \"\\uD83D\\uDC96\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"p\", {\n          children: [\"Loading \", getDisplayName('name'), \"...\"]\n        })]\n      })\n    });\n  }\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(jsx_runtime.Fragment, {\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"aside\", {\n      className: \"sidebar\",\n      role: \"complementary\",\n      \"aria-label\": `${fullName} Stats and Navigation`,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"sidebar-scrollable\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"sidebar-profile\",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"profile-header\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"profile-avatar\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"avatar-icon\",\n                children: \"\\uD83D\\uDC69\\u200D\\u2695\\uFE0F\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"status-indicator online\"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"profile-info\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h2\", {\n                className: \"profile-name agent-name\",\n                children: fullName\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n                className: \"profile-subtitle\",\n                children: \"AI Companion from 2030\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n                className: \"profile-greeting\",\n                children: getPersonalizedGreeting()\n              })]\n            })]\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"sidebar-section\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n            className: \"section-title\",\n            children: \"\\uD83C\\uDFAD Quick Mode Switch\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(ui_QuickModeSelector, {\n            currentPersona: currentPersona,\n            onPersonaChange: setCurrentPersona,\n            compact: true\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"sidebar-section\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n            className: \"section-title\",\n            children: \"\\u26A1 Quick Actions\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"quick-actions\",\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n              className: \"quick-action-btn\",\n              onClick: () => setShowStatsPanel(true),\n              title: \"View detailed relationship statistics\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-icon\",\n                children: \"\\uD83D\\uDCCA\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-text\",\n                children: \"View Stats\"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n              className: \"quick-action-btn\",\n              onClick: () => setCurrentView('relationship'),\n              title: \"View detailed relationship analytics\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-icon\",\n                children: \"\\uD83D\\uDCC8\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-text\",\n                children: \"View Analytics\"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n              className: \"quick-action-btn\",\n              onClick: () => setCurrentView('journal'),\n              title: \"Open dream journal\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-icon\",\n                children: \"\\uD83D\\uDCDD\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-text\",\n                children: \"Write Journal\"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n              className: \"quick-action-btn\",\n              onClick: () => setCurrentView('creative'),\n              title: \"Open creative studio\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-icon\",\n                children: \"\\uD83C\\uDFA8\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-text\",\n                children: \"Create Together\"\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n              className: \"quick-action-btn mcp-docking-btn\",\n              onClick: () => setCurrentView('mcp'),\n              title: \"\\uD83C\\uDDE6\\uD83C\\uDDF9 MCP Docking Bay - Connect to bambisleep.chat\",\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-icon\",\n                children: \"\\uD83D\\uDEF0\\uFE0F\"\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n                className: \"btn-text\",\n                children: \"MCP Docking\"\n              })]\n            })]\n          })]\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"sidebar-footer\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          className: `screen-reader-toggle ${screenReaderEnabled ? 'active' : ''}`,\n          onClick: toggleScreenReader,\n          title: screenReaderEnabled ? 'Disable screen reader mode' : 'Enable screen reader mode',\n          \"aria-label\": screenReaderEnabled ? 'Disable screen reader mode' : 'Enable screen reader mode',\n          \"aria-pressed\": screenReaderEnabled,\n          children: /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            role: \"img\",\n            \"aria-label\": \"accessibility\",\n            children: \"\\u267F\"\n          })\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          id: \"sr-announcements\",\n          className: `sr-only sr-announcements ${screenReaderEnabled ? 'screen-reader-enabled' : ''}`,\n          \"aria-live\": \"polite\",\n          \"aria-atomic\": \"true\",\n          children: [fullName, \" is ready for conversation\"]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"footer-text\",\n          children: /*#__PURE__*/(0,jsx_runtime.jsxs)(\"p\", {\n            className: \"tagline\",\n            children: [\"Tell handlers\", ' ', /*#__PURE__*/(0,jsx_runtime.jsx)(\"a\", {\n              href: \"https://bambisleep.info\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"bambi-link\",\n              children: \"bambisleep.info\"\n            }), ' ', \"ima Good Girl\"]\n          })\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)(ui_StatsPanel, {\n      isVisible: showStatsPanel,\n      onClose: () => setShowStatsPanel(false),\n      relationshipStats: relationshipStats,\n      emotionalTrends: emotionalTrends,\n      systemStats: systemStats,\n      userContext: userContext\n    })]\n  });\n};\n/* harmony default export */ const layout_Sidebar = (Sidebar);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6960\n\n}");

/***/ })

}]);