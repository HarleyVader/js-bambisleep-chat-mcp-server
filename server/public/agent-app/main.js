/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 113:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ TRANSFORMATION_EFFECTS),\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _memoryService_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9522);\n// NameTransformationService.js - Agent Name Costume Change System\n// Centralized name management with visual transformation effects\n\n\n\n// Default Agent Configuration\nconst DEFAULT_AGENT_CONFIG = {\n  name: 'Dr Girlfriend',\n  fullName: 'Agent Dr Girlfriend',\n  shortName: 'Dr Girlfriend',\n  title: 'Agent',\n  personality: 'Witty, stylish, emotionally intelligent AI companion',\n  avatar: '👩‍⚕️'\n};\n\n// Name transformation effects configuration\nconst TRANSFORMATION_EFFECTS = {\n  SPARKLE_CASCADE: 'sparkle-cascade',\n  NEON_GLITCH: 'neon-glitch',\n  SHIMMER_FADE: 'shimmer-fade',\n  PARTICLE_BURST: 'particle-burst',\n  CYBER_MATRIX: 'cyber-matrix'\n};\n\n// Costume change request patterns (what Bambi might say)\nconst COSTUME_CHANGE_PATTERNS = [/please change your name to (.+)/i, /can you be called (.+)/i, /I want to call you (.+)/i, /your new name is (.+)/i, /from now on you're (.+)/i, /I'd like you to be (.+)/i, /become (.+)/i, /transform into (.+)/i, /costume change to (.+)/i, /rename yourself to (.+)/i];\nclass NameTransformationService {\n  constructor() {\n    this.currentConfig = {\n      ...DEFAULT_AGENT_CONFIG\n    };\n    this.isTransforming = false;\n    this.transformationCallbacks = new Set();\n    this.elementSelectors = ['.profile-name', '.agent-name', '.stats-panel-title', '[aria-label*=\"Agent Dr Girlfriend\"]', '.tagline', '.profile-greeting'];\n    this.init();\n  }\n  async init() {\n    // Load saved agent configuration\n    const savedConfig = await (0,_memoryService_js__WEBPACK_IMPORTED_MODULE_0__/* .getMemory */ .So)('agent_configuration');\n    if (savedConfig) {\n      this.currentConfig = {\n        ...DEFAULT_AGENT_CONFIG,\n        ...savedConfig\n      };\n    }\n\n    // Set up transformation effect styles\n    this.injectTransformationCSS();\n  }\n\n  // Main method to detect costume change requests\n  detectCostumeChangeRequest(userMessage) {\n    for (const pattern of COSTUME_CHANGE_PATTERNS) {\n      const match = userMessage.match(pattern);\n      if (match && match[1]) {\n        const newName = match[1].trim();\n        // Validate and clean the name\n        const cleanName = this.validateAndCleanName(newName);\n        if (cleanName) {\n          return {\n            detected: true,\n            newName: cleanName,\n            originalRequest: userMessage\n          };\n        }\n      }\n    }\n    return {\n      detected: false\n    };\n  }\n\n  // Validate and clean the proposed name\n  validateAndCleanName(name) {\n    // Remove quotes, extra spaces, and normalize\n    let cleanName = name.replace(/['\"]/g, '').trim();\n\n    // Ensure it's not too long or contains inappropriate content\n    if (cleanName.length > 50 || cleanName.length < 2) {\n      return null;\n    }\n\n    // Remove any HTML tags for security\n    cleanName = cleanName.replace(/<[^>]*>/g, '');\n\n    // Capitalize properly\n    cleanName = this.properCapitalize(cleanName);\n    return cleanName;\n  }\n  properCapitalize(name) {\n    return name.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\n  }\n\n  // Main transformation method with visual effects\n  async performCostumeChange(newName) {\n    let effectType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TRANSFORMATION_EFFECTS.SPARKLE_CASCADE;\n    if (this.isTransforming) {\n      throw new Error('Transformation already in progress');\n    }\n    try {\n      this.isTransforming = true;\n\n      // 1. Announce the transformation\n      this.announceTransformation(newName);\n\n      // 2. Apply visual effects to all name elements\n      await this.applyTransformationEffect(effectType);\n\n      // 3. Update the configuration\n      const oldConfig = {\n        ...this.currentConfig\n      };\n      this.updateAgentConfiguration(newName);\n\n      // 4. Transform all UI elements\n      await this.transformAllUIElements(oldConfig, this.currentConfig);\n\n      // 5. Update storage\n      await this.saveConfigurationToStorage();\n\n      // 6. Notify all subscribers\n      this.notifyTransformationComplete(oldConfig, this.currentConfig);\n\n      // 7. Final sparkle effect\n      await this.finalTransformationEffect();\n      return {\n        success: true,\n        oldName: oldConfig.name,\n        newName: this.currentConfig.name,\n        message: `✨ Costume change complete! I'm now ${this.currentConfig.name}! ✨`\n      };\n    } catch (error) {\n      console.error('Transformation failed:', error);\n      return {\n        success: false,\n        error: error.message,\n        message: 'Oops! The costume change magic fizzled out. Please try again! 💫'\n      };\n    } finally {\n      this.isTransforming = false;\n    }\n  }\n  updateAgentConfiguration(newName) {\n    this.currentConfig = {\n      ...this.currentConfig,\n      name: newName,\n      fullName: `Agent ${newName}`,\n      shortName: newName,\n      transformedAt: new Date().toISOString(),\n      transformationCount: (this.currentConfig.transformationCount || 0) + 1\n    };\n  }\n\n  // Apply stunning visual transformation effects\n  async applyTransformationEffect(effectType) {\n    const elements = this.getAllNameElements();\n    switch (effectType) {\n      case TRANSFORMATION_EFFECTS.SPARKLE_CASCADE:\n        await this.sparkleEffect(elements);\n        break;\n      case TRANSFORMATION_EFFECTS.NEON_GLITCH:\n        await this.neonGlitchEffect(elements);\n        break;\n      case TRANSFORMATION_EFFECTS.SHIMMER_FADE:\n        await this.shimmerFadeEffect(elements);\n        break;\n      case TRANSFORMATION_EFFECTS.PARTICLE_BURST:\n        await this.particleBurstEffect(elements);\n        break;\n      case TRANSFORMATION_EFFECTS.CYBER_MATRIX:\n        await this.cyberMatrixEffect(elements);\n        break;\n    }\n  }\n  getAllNameElements() {\n    const elements = [];\n    this.elementSelectors.forEach(selector => {\n      const found = document.querySelectorAll(selector);\n      elements.push(...Array.from(found));\n    });\n    return elements;\n  }\n\n  // Sparkle cascade effect\n  async sparkleEffect(elements) {\n    return new Promise(resolve => {\n      elements.forEach((element, index) => {\n        setTimeout(() => {\n          element.classList.add('name-transform-sparkle');\n          this.createSparkleParticles(element);\n        }, index * 100);\n      });\n      setTimeout(resolve, elements.length * 100 + 1000);\n    });\n  }\n  createSparkleParticles(element) {\n    const rect = element.getBoundingClientRect();\n    for (let i = 0; i < 8; i++) {\n      const particle = document.createElement('div');\n      particle.className = 'sparkle-particle';\n      particle.style.cssText = `\n                position: fixed;\n                left: ${rect.left + Math.random() * rect.width}px;\n                top: ${rect.top + Math.random() * rect.height}px;\n                z-index: 9999;\n                pointer-events: none;\n            `;\n      document.body.appendChild(particle);\n      setTimeout(() => particle.remove(), 2000);\n    }\n  }\n\n  // Neon glitch effect\n  async neonGlitchEffect(elements) {\n    return new Promise(resolve => {\n      elements.forEach(element => {\n        element.classList.add('name-transform-glitch');\n      });\n      setTimeout(() => {\n        elements.forEach(element => {\n          element.classList.remove('name-transform-glitch');\n        });\n        resolve();\n      }, 1500);\n    });\n  }\n\n  // Transform all UI elements with the new name\n  async transformAllUIElements(oldConfig, newConfig) {\n    const transformPromises = [];\n\n    // Transform text content\n    this.elementSelectors.forEach(selector => {\n      const elements = document.querySelectorAll(selector);\n      elements.forEach(element => {\n        transformPromises.push(this.transformElementText(element, oldConfig, newConfig));\n      });\n    });\n\n    // Transform aria-labels and accessibility attributes\n    transformPromises.push(this.transformAccessibilityAttributes(oldConfig, newConfig));\n\n    // Transform screen reader announcements\n    transformPromises.push(this.updateScreenReaderAnnouncements(newConfig));\n    await Promise.all(transformPromises);\n  }\n  async transformElementText(element, oldConfig, newConfig) {\n    return new Promise(resolve => {\n      const text = element.textContent || element.innerText;\n\n      // Replace various forms of the old name\n      const newText = text.replace(new RegExp(oldConfig.fullName, 'gi'), newConfig.fullName).replace(new RegExp(oldConfig.name, 'gi'), newConfig.name).replace(new RegExp(oldConfig.shortName, 'gi'), newConfig.shortName);\n\n      // Animated text replacement\n      this.animateTextChange(element, newText);\n      setTimeout(resolve, 500);\n    });\n  }\n  animateTextChange(element, newText) {\n    element.style.transition = 'opacity 0.3s ease, transform 0.3s ease';\n    element.style.opacity = '0';\n    element.style.transform = 'scale(0.8)';\n    setTimeout(() => {\n      element.textContent = newText;\n      element.style.opacity = '1';\n      element.style.transform = 'scale(1)';\n    }, 300);\n  }\n  async transformAccessibilityAttributes(oldConfig, newConfig) {\n    const elementsWithAriaLabel = document.querySelectorAll('[aria-label]');\n    elementsWithAriaLabel.forEach(element => {\n      const ariaLabel = element.getAttribute('aria-label');\n      if (ariaLabel.includes(oldConfig.name) || ariaLabel.includes(oldConfig.fullName)) {\n        const newAriaLabel = ariaLabel.replace(new RegExp(oldConfig.fullName, 'gi'), newConfig.fullName).replace(new RegExp(oldConfig.name, 'gi'), newConfig.name);\n        element.setAttribute('aria-label', newAriaLabel);\n      }\n    });\n  }\n  async updateScreenReaderAnnouncements(newConfig) {\n    const announcement = document.getElementById('sr-announcements');\n    if (announcement) {\n      announcement.textContent = `${newConfig.fullName} is ready for conversation`;\n    }\n  }\n  announceTransformation(newName) {\n    // Create a dramatic announcement overlay\n    const overlay = document.createElement('div');\n    overlay.className = 'transformation-announcement';\n    overlay.innerHTML = `\n            <div class=\"announcement-content\">\n                <h2>✨ Costume Change in Progress ✨</h2>\n                <p>Transforming into <strong>${newName}</strong>...</p>\n                <div class=\"transformation-loader\"></div>\n            </div>\n        `;\n    document.body.appendChild(overlay);\n    setTimeout(() => overlay.remove(), 3000);\n  }\n  async finalTransformationEffect() {\n    // Create celebratory particle burst\n    const celebrationOverlay = document.createElement('div');\n    celebrationOverlay.className = 'transformation-celebration';\n    celebrationOverlay.innerHTML = `\n            <div class=\"celebration-content\">\n                <h2>🎉 Transformation Complete! 🎉</h2>\n                <p>I am now <strong>${this.currentConfig.name}</strong>!</p>\n            </div>\n        `;\n    document.body.appendChild(celebrationOverlay);\n\n    // Create celebration particles\n    this.createCelebrationParticles();\n    setTimeout(() => celebrationOverlay.remove(), 2500);\n  }\n  createCelebrationParticles() {\n    for (let i = 0; i < 20; i++) {\n      const particle = document.createElement('div');\n      particle.className = 'celebration-particle';\n      particle.style.cssText = `\n                position: fixed;\n                left: ${Math.random() * window.innerWidth}px;\n                top: ${Math.random() * window.innerHeight}px;\n                z-index: 10000;\n                pointer-events: none;\n            `;\n      document.body.appendChild(particle);\n      setTimeout(() => particle.remove(), 3000);\n    }\n  }\n  async saveConfigurationToStorage() {\n    await (0,_memoryService_js__WEBPACK_IMPORTED_MODULE_0__/* .setMemory */ .S0)('agent_configuration', this.currentConfig);\n\n    // Also update any other storage that might reference the agent name\n    const userContext = (await (0,_memoryService_js__WEBPACK_IMPORTED_MODULE_0__/* .getMemory */ .So)('user_context')) || {};\n    userContext.agent_name = this.currentConfig.name;\n    userContext.agent_full_name = this.currentConfig.fullName;\n    await (0,_memoryService_js__WEBPACK_IMPORTED_MODULE_0__/* .setMemory */ .S0)('user_context', userContext);\n  }\n\n  // Subscribe to transformation events\n  onTransformation(callback) {\n    this.transformationCallbacks.add(callback);\n    return () => this.transformationCallbacks.delete(callback);\n  }\n  notifyTransformationComplete(oldConfig, newConfig) {\n    this.transformationCallbacks.forEach(callback => {\n      try {\n        callback({\n          oldConfig,\n          newConfig,\n          timestamp: Date.now()\n        });\n      } catch (error) {\n        console.error('Transformation callback error:', error);\n      }\n    });\n  }\n\n  // Get current agent configuration\n  getAgentConfig() {\n    return {\n      ...this.currentConfig\n    };\n  }\n\n  // Reset to default configuration\n  async resetToDefault() {\n    const oldConfig = {\n      ...this.currentConfig\n    };\n    this.currentConfig = {\n      ...DEFAULT_AGENT_CONFIG\n    };\n    await this.saveConfigurationToStorage();\n    await this.transformAllUIElements(oldConfig, this.currentConfig);\n    return this.currentConfig;\n  }\n\n  // Inject CSS for transformation effects\n  injectTransformationCSS() {\n    const style = document.createElement('style');\n    style.textContent = `\n            .name-transform-sparkle {\n                animation: sparkle-transform 1s ease-in-out;\n            }\n\n            .name-transform-glitch {\n                animation: glitch-transform 1.5s ease-in-out;\n            }\n\n            @keyframes sparkle-transform {\n                0% { filter: brightness(1) hue-rotate(0deg); }\n                25% { filter: brightness(1.5) hue-rotate(90deg); transform: scale(1.05); }\n                50% { filter: brightness(2) hue-rotate(180deg); transform: scale(1.1); }\n                75% { filter: brightness(1.5) hue-rotate(270deg); transform: scale(1.05); }\n                100% { filter: brightness(1) hue-rotate(360deg); transform: scale(1); }\n            }\n\n            @keyframes glitch-transform {\n                0%, 100% { transform: translateX(0); filter: hue-rotate(0deg); }\n                10% { transform: translateX(-2px) skew(-1deg); filter: hue-rotate(90deg); }\n                20% { transform: translateX(2px) skew(1deg); filter: hue-rotate(180deg); }\n                30% { transform: translateX(-1px) skew(-0.5deg); filter: hue-rotate(270deg); }\n                40% { transform: translateX(1px) skew(0.5deg); filter: hue-rotate(360deg); }\n                50% { transform: translateX(0) skew(0deg); filter: hue-rotate(180deg) brightness(1.5); }\n            }\n\n            .sparkle-particle {\n                width: 4px;\n                height: 4px;\n                background: radial-gradient(circle, #00ffff, #ff0080);\n                animation: sparkle-float 2s ease-out forwards;\n                border-radius: 50%;\n            }\n\n            @keyframes sparkle-float {\n                0% { opacity: 1; transform: translateY(0) scale(1); }\n                100% { opacity: 0; transform: translateY(-50px) scale(0); }\n            }\n\n            .transformation-announcement {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(0, 0, 0, 0.9);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 9998;\n                animation: announcement-fade-in 0.5s ease-out;\n            }\n\n            .announcement-content {\n                text-align: center;\n                color: #00ffff;\n                font-size: 2rem;\n                padding: 2rem;\n                border: 2px solid #00ffff;\n                border-radius: 1rem;\n                background: rgba(10, 10, 15, 0.95);\n                box-shadow: 0 0 3vw rgba(0, 255, 255, 0.4);\n            }\n\n            .transformation-loader {\n                width: 40px;\n                height: 40px;\n                border: 3px solid rgba(0, 255, 255, 0.3);\n                border-top: 3px solid #00ffff;\n                border-radius: 50%;\n                animation: loader-spin 1s linear infinite;\n                margin: 1rem auto;\n            }\n\n            @keyframes loader-spin {\n                0% { transform: rotate(0deg); }\n                100% { transform: rotate(360deg); }\n            }\n\n            .transformation-celebration {\n                position: fixed;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(255, 0, 128, 0.1);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 9999;\n                animation: celebration-fade 2.5s ease-out forwards;\n                pointer-events: none;\n            }\n\n            .celebration-content {\n                text-align: center;\n                color: #ff0080;\n                font-size: 2.5rem;\n                padding: 2rem;\n                animation: celebration-bounce 0.6s ease-out;\n            }\n\n            @keyframes celebration-bounce {\n                0% { transform: scale(0.5) rotate(-5deg); opacity: 0; }\n                50% { transform: scale(1.2) rotate(2deg); opacity: 1; }\n                100% { transform: scale(1) rotate(0deg); opacity: 1; }\n            }\n\n            @keyframes celebration-fade {\n                0% { opacity: 1; }\n                70% { opacity: 1; }\n                100% { opacity: 0; }\n            }\n\n            .celebration-particle {\n                width: 8px;\n                height: 8px;\n                background: linear-gradient(45deg, #00ffff, #ff0080);\n                animation: celebration-float 3s ease-out forwards;\n                border-radius: 50%;\n                box-shadow: 0 0 10px currentColor;\n            }\n\n            @keyframes celebration-float {\n                0% {\n                    opacity: 1;\n                    transform: translateY(0) rotate(0deg) scale(1);\n                }\n                100% {\n                    opacity: 0;\n                    transform: translateY(-200px) rotate(720deg) scale(0);\n                }\n            }\n\n            @keyframes announcement-fade-in {\n                0% { opacity: 0; backdrop-filter: blur(0px); }\n                100% { opacity: 1; backdrop-filter: blur(10px); }\n            }\n        `;\n    document.head.appendChild(style);\n  }\n}\n\n// Create singleton instance\nconst nameTransformationService = new NameTransformationService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (nameTransformationService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///113\n\n}");

/***/ }),

/***/ 3876:
/***/ ((__unused_webpack___webpack_module__, __unused_webpack___webpack_exports__, __webpack_require__) => {

eval("{/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1012);\n/* harmony import */ var _styles_themes_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7080);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6540);\n/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5338);\n/* harmony import */ var _hooks_useNameTransformation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9077);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4848);\n// BambiSleep's Agent Dr Girlfriend - Main Application Entry Point\n// Following copilot-instructions.md: Modular ES6 architecture with emotional UX\n\n\n\n\n\n\n\n// Lazy load components for performance optimization with better chunking\n\nconst ChatInterface = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => Promise.all(/* import() | chat */[__webpack_require__.e(76), __webpack_require__.e(377)]).then(__webpack_require__.bind(__webpack_require__, 9039)));\nconst JournalEditor = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => Promise.all(/* import() | journal */[__webpack_require__.e(76), __webpack_require__.e(240)]).then(__webpack_require__.bind(__webpack_require__, 9863)));\nconst CreativeStudio = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => Promise.all(/* import() | creative */[__webpack_require__.e(76), __webpack_require__.e(80)]).then(__webpack_require__.bind(__webpack_require__, 3105)));\nconst RelationshipDashboard = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => Promise.all(/* import() | relationship */[__webpack_require__.e(76), __webpack_require__.e(569)]).then(__webpack_require__.bind(__webpack_require__, 1885)));\nconst PersonaSelector = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => __webpack_require__.e(/* import() | ui */ 209).then(__webpack_require__.bind(__webpack_require__, 5350)));\nconst Header = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => Promise.all(/* import() | layout */[__webpack_require__.e(489), __webpack_require__.e(87), __webpack_require__.e(224), __webpack_require__.e(70), __webpack_require__.e(133)]).then(__webpack_require__.bind(__webpack_require__, 5584)));\nconst Sidebar = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => Promise.all(/* import() | layout */[__webpack_require__.e(489), __webpack_require__.e(87), __webpack_require__.e(224), __webpack_require__.e(70), __webpack_require__.e(133)]).then(__webpack_require__.bind(__webpack_require__, 6960)));\n\n// 🇦🇹 MCP Docking System for bambisleep.chat integration\nconst MCPDockingInterface = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_2__.lazy)(() => Promise.all(/* import() | mcp */[__webpack_require__.e(30), __webpack_require__.e(1), __webpack_require__.e(76), __webpack_require__.e(489), __webpack_require__.e(87), __webpack_require__.e(224), __webpack_require__.e(70), __webpack_require__.e(729)]).then(__webpack_require__.bind(__webpack_require__, 7510)));\n\n// Dynamically load components CSS only when needed\nconst loadComponentStyles = () => {\n  return Promise.all(/* import() | component-styles */[__webpack_require__.e(30), __webpack_require__.e(1)]).then(__webpack_require__.bind(__webpack_require__, 2910));\n};\n\n// Error Boundary for graceful error handling\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_2__.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error('Agent Dr Girlfriend Error:', error, errorInfo);\n\n    // Only trigger cleanup for actual storage/JSON errors, not React rendering errors\n    const isStorageError = error?.message?.includes('JSON') || error?.message?.includes('not valid') || error?.message?.includes('localStorage') || error?.message?.includes('IndexedDB');\n    if (isStorageError) {\n      console.log('🔧 Storage-related error detected, scheduling cleanup on next page visit');\n      // Mark for cleanup on next visit instead of immediate\n      localStorage.setItem('needsCleanup', 'true');\n    } else {\n      console.log('🎭 React component error - no storage cleanup needed');\n    }\n  }\n  render() {\n    if (this.state.hasError) {\n      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n        className: \"error-screen\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n          className: \"error-container\",\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"h1\", {\n            className: \"error-title\",\n            children: \"\\uD83D\\uDE14 Agent Dr Girlfriend is Taking a Break\"\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"p\", {\n            className: \"error-message\",\n            children: \"Something went wrong, but I'll be back soon!\"\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"button\", {\n            onClick: () => window.location.reload(),\n            className: \"error-button\",\n            children: \"Refresh & Try Again\"\n          })]\n        })\n      });\n    }\n    return this.props.children;\n  }\n}\n\n// Loading component for Suspense fallbacks\nconst LoadingSpinner = _ref => {\n  let {\n    message = 'Loading...'\n  } = _ref;\n  const {\n    fullName\n  } = (0,_hooks_useNameTransformation_js__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .A)();\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n    className: \"loading-screen\",\n    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n          className: \"loading-avatar\"\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"h2\", {\n        className: \"loading-title\",\n        children: fullName\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"p\", {\n        className: \"loading-message\",\n        children: message\n      })]\n    })\n  });\n};\n\n// Main App Component with emotional UX foundation\nconst App = () => {\n  const [currentView, setCurrentView] = react__WEBPACK_IMPORTED_MODULE_2__.useState('chat');\n  const [isLoading, setIsLoading] = react__WEBPACK_IMPORTED_MODULE_2__.useState(true);\n\n  // Import name transformation hook\n  const {\n    getDisplayName,\n    fullName\n  } = (0,_hooks_useNameTransformation_js__WEBPACK_IMPORTED_MODULE_4__/* [\"default\"] */ .A)();\n\n  // Initialize app after a brief loading period for emotional UX\n  react__WEBPACK_IMPORTED_MODULE_2__.useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        // Load component styles dynamically\n        await loadComponentStyles();\n\n        // Add global error handler for uncaught JSON parsing errors\n        if (typeof window !== 'undefined') {\n          // Check if cleanup is needed from previous session\n          const needsCleanup = localStorage.getItem('needsCleanup');\n          if (needsCleanup === 'true') {\n            console.log('🧹 Performing scheduled cleanup from previous session...');\n            if (window.emergencyStorageCleanup) {\n              window.emergencyStorageCleanup();\n            }\n            localStorage.removeItem('needsCleanup');\n          }\n\n          // Only handle actual storage errors, not React errors\n          window.addEventListener('unhandledrejection', event => {\n            const message = event.reason?.message || '';\n            if (message.includes('not valid JSON') || message.includes('localStorage') || message.includes('IndexedDB')) {\n              console.warn('🔧 Storage error detected:', message);\n              // Schedule cleanup for next visit instead of immediate\n              localStorage.setItem('needsCleanup', 'true');\n              event.preventDefault();\n            }\n          });\n\n          // Lightweight console monitoring for storage errors only\n          const originalConsoleError = console.error;\n          console.error = function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            const message = args.join(' ');\n            // Only act on actual storage corruption, not React errors\n            if (message.includes('[object Object]') && message.includes('localStorage') || message.includes('JSON') && message.includes('parse')) {\n              console.warn('� Storage corruption detected, will cleanup on next visit');\n              localStorage.setItem('needsCleanup', 'true');\n            }\n            originalConsoleError.apply(console, args);\n          };\n\n          // Add gentle cleanup when user actually leaves the page\n          window.addEventListener('beforeunload', () => {\n            // Only cleanup temporary data, keep user preferences\n            const tempKeys = ['temp_messages', 'session_state', 'current_typing'];\n            tempKeys.forEach(key => {\n              try {\n                localStorage.removeItem(key);\n                sessionStorage.removeItem(key);\n              } catch (e) {\n                // Silent fail for cleanup\n              }\n            });\n          });\n\n          // Make manual cleanup available but not automatic\n          window.manualStorageCleanup = () => {\n            if (confirm(`Are you sure you want to clear all ${fullName} data? This cannot be undone.`)) {\n              window.emergencyStorageCleanup();\n            }\n          };\n        }\n        console.log(`🚀 Initializing ${fullName}...`);\n      } catch (error) {\n        console.error('Initialization failed:', error);\n      }\n\n      // Continue with normal initialization\n      const timer = setTimeout(() => {\n        setIsLoading(false);\n        // Announce to screen readers\n        const announcement = document.getElementById('sr-announcements');\n        if (announcement) {\n          announcement.textContent = `${fullName} is ready for conversation`;\n        }\n      }, 1500);\n      return () => clearTimeout(timer);\n    };\n    const cleanup = initializeApp();\n    return () => {\n      if (cleanup && typeof cleanup.then === 'function') {\n        cleanup.then(cleanupFn => {\n          if (typeof cleanupFn === 'function') {\n            cleanupFn();\n          }\n        });\n      }\n    };\n  }, []); // Emotional loading state\n  if (isLoading) {\n    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(LoadingSpinner, {\n      message: \"Warming up emotional circuits...\"\n    });\n  }\n  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n      fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n        className: \"sidebar-loading\",\n        children: [\"\\uD83D\\uDC96 Loading \", fullName, \"...\"]\n      }),\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Sidebar, {\n        currentView: currentView,\n        setCurrentView: setCurrentView\n      })\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n        fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"div\", {\n          className: \"header-loading\",\n          children: \"Loading navigation...\"\n        }),\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Header, {\n          currentView: currentView,\n          setCurrentView: setCurrentView\n        })\n      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"main\", {\n        className: \"main-content-area\",\n        role: \"main\",\n        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n          fallback: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(LoadingSpinner, {\n            message: \"Loading...\"\n          }),\n          children: [currentView === 'chat' && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ChatInterface, {}), currentView === 'journal' && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(JournalEditor, {}), currentView === 'creative' && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(CreativeStudio, {}), currentView === 'relationship' && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(RelationshipDashboard, {}), currentView === 'persona' && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(PersonaSelector, {}), currentView === 'mcp' && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(MCPDockingInterface, {\n            bambisleepConfig: {\n              id: fullName,\n              pronouns: 'she/her'\n            }\n          })]\n        })\n      })]\n    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"nav\", {\n      className: \"bottom-nav mobile-only\",\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"div\", {\n        className: \"bottom-nav-container\",\n        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"button\", {\n          onClick: () => setCurrentView('chat'),\n          className: `nav-button ${currentView === 'chat' ? 'active' : ''}`,\n          \"aria-label\": `Chat with ${fullName}`,\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-icon\",\n            children: \"\\uD83D\\uDCAC\"\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-label\",\n            children: \"Chat\"\n          })]\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"button\", {\n          onClick: () => setCurrentView('journal'),\n          className: `nav-button ${currentView === 'journal' ? 'active' : ''}`,\n          \"aria-label\": \"Dream Journal\",\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-icon\",\n            children: \"\\uD83D\\uDCDD\"\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-label\",\n            children: \"Journal\"\n          })]\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"button\", {\n          onClick: () => setCurrentView('creative'),\n          className: `nav-button ${currentView === 'creative' ? 'active' : ''}`,\n          \"aria-label\": \"Creative Studio\",\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-icon\",\n            children: \"\\uD83C\\uDFA8\"\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-label\",\n            children: \"Creative\"\n          })]\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"button\", {\n          onClick: () => setCurrentView('relationship'),\n          className: `nav-button ${currentView === 'relationship' ? 'active' : ''}`,\n          \"aria-label\": \"Relationship Dashboard\",\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-icon\",\n            children: \"\\uD83D\\uDC96\"\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-label\",\n            children: \"Journey\"\n          })]\n        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(\"button\", {\n          onClick: () => setCurrentView('persona'),\n          className: `nav-button ${currentView === 'persona' ? 'active' : ''}`,\n          \"aria-label\": \"Personality Mode\",\n          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-icon\",\n            children: \"\\uD83C\\uDFAD\"\n          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(\"span\", {\n            className: \"nav-label\",\n            children: \"Mode\"\n          })]\n        })]\n      })\n    })]\n  });\n};\n\n// Progressive enhancement - check for required browser features\nconst checkBrowserSupport = () => {\n  const required = ['localStorage', 'Promise', 'fetch', 'addEventListener'];\n  return required.every(feature => feature in window);\n};\n\n// Initialize the app with error handling and progressive enhancement\nconst initializeApp = () => {\n  const container = document.getElementById('app');\n  if (!container) {\n    console.error('App container not found');\n    return;\n  }\n\n  // Check browser support\n  if (!checkBrowserSupport()) {\n    container.innerHTML = `\n      <div class=\"min-h-screen flex items-center justify-center bg-slate-100\">\n        <div class=\"text-center p-8\">\n          <h1 class=\"text-2xl font-bold text-slate-900 mb-4\">Browser Not Supported</h1>\n          <p class=\"text-slate-600 mb-4\">Please use a modern browser to experience Agent Dr Girlfriend.</p>\n          <p class=\"text-sm text-slate-500\">Recommended: Chrome, Firefox, Safari, or Edge</p>\n        </div>\n      </div>\n    `;\n    return;\n  }\n\n  // Create React root and render app\n  const root = (0,react_dom_client__WEBPACK_IMPORTED_MODULE_3__/* .createRoot */ .H)(container);\n  root.render(/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(react__WEBPACK_IMPORTED_MODULE_2__.StrictMode, {\n    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(ErrorBoundary, {\n      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(App, {})\n    })\n  }));\n};\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeApp);\n} else {\n  initializeApp();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3876\n\n}");

/***/ }),

/***/ 9077:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6540);\n/* harmony import */ var _services_nameTransformationService_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(113);\n// useNameTransformation.js - React Hook for Agent Name Costume Changes\n// Integrates the NameTransformationService with React components\n\n\n\nconst useNameTransformation = () => {\n  const [agentConfig, setAgentConfig] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_services_nameTransformationService_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A.getAgentConfig());\n  const [isTransforming, setIsTransforming] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const [lastTransformation, setLastTransformation] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n\n  // Subscribe to transformation events\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const unsubscribe = _services_nameTransformationService_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A.onTransformation(transformationData => {\n      setAgentConfig(transformationData.newConfig);\n      setLastTransformation(transformationData);\n      setIsTransforming(false);\n    });\n    return unsubscribe;\n  }, []);\n\n  // Detect costume change request from user message\n  const detectCostumeChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(userMessage => {\n    return _services_nameTransformationService_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A.detectCostumeChangeRequest(userMessage);\n  }, []);\n\n  // Perform the costume change transformation\n  const performCostumeChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (newName, effectType) => {\n    setIsTransforming(true);\n    try {\n      const result = await _services_nameTransformationService_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A.performCostumeChange(newName, effectType);\n      if (!result.success) {\n        setIsTransforming(false);\n      }\n      return result;\n    } catch (error) {\n      setIsTransforming(false);\n      throw error;\n    }\n  }, []);\n\n  // Reset to default agent name\n  const resetToDefault = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    setIsTransforming(true);\n    try {\n      const newConfig = await _services_nameTransformationService_js__WEBPACK_IMPORTED_MODULE_1__/* [\"default\"] */ .A.resetToDefault();\n      setAgentConfig(newConfig);\n      return newConfig;\n    } finally {\n      setIsTransforming(false);\n    }\n  }, []);\n\n  // Get current agent display name\n  const getDisplayName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function () {\n    let variant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'name';\n    switch (variant) {\n      case 'full':\n        return agentConfig.fullName;\n      case 'short':\n        return agentConfig.shortName;\n      case 'title':\n        return agentConfig.title;\n      default:\n        return agentConfig.name;\n    }\n  }, [agentConfig]);\n\n  // Generate personalized greeting with current name\n  const getPersonalizedGreeting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const hour = new Date().getHours();\n    const timeOfDay = hour < 12 ? 'morning' : hour < 18 ? 'afternoon' : 'evening';\n    const greetings = [`✨ Hey there, I'm ${agentConfig.name}`, `💖 Good ${timeOfDay}, I'm ${agentConfig.name}`, `🌟 ${agentConfig.name} here, ready to chat`, `💫 Hi beautiful, ${agentConfig.name} at your service`];\n    return greetings[Math.floor(Math.random() * greetings.length)];\n  }, [agentConfig.name]);\n  return {\n    // Current agent configuration\n    agentConfig,\n    // Display methods\n    getDisplayName,\n    getPersonalizedGreeting,\n    // Transformation methods\n    detectCostumeChange,\n    performCostumeChange,\n    resetToDefault,\n    // State\n    isTransforming,\n    lastTransformation,\n    // Quick access to common names\n    name: agentConfig.name,\n    fullName: agentConfig.fullName,\n    shortName: agentConfig.shortName,\n    avatar: agentConfig.avatar\n  };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useNameTransformation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9077\n\n}");

/***/ }),

/***/ 9522:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S0: () => (/* binding */ setMemory),\n/* harmony export */   So: () => (/* binding */ getMemory)\n/* harmony export */ });\n/* unused harmony exports removeMemory, clearAllMemories, getUserProfile, updateUserProfile, saveConversationMessage, getConversationHistory, saveEmotionalState, getEmotionalPatterns, autoCleanupStorage, MEMORY_CATEGORIES, memoryService */\n/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3790);\n// Memory Service - Agent Dr Girlfriend Memory Management System\n// Following copilot-instructions.md: LocalForage for secure local storage\n\n\n\n// Configure LocalForage for enhanced security and performance\nlocalforage__WEBPACK_IMPORTED_MODULE_0__.config({\n  driver: [localforage__WEBPACK_IMPORTED_MODULE_0__.INDEXEDDB, localforage__WEBPACK_IMPORTED_MODULE_0__.WEBSQL, localforage__WEBPACK_IMPORTED_MODULE_0__.LOCALSTORAGE],\n  name: 'AgentDrGirlfriendDB',\n  version: 1.0,\n  storeName: 'memories'\n});\n\n// Memory categories for organization\nconst MEMORY_CATEGORIES = {\n  USER_PROFILE: 'user_profile',\n  CONVERSATION_HISTORY: 'conversation_history',\n  EMOTIONAL_STATES: 'emotional_states',\n  PREFERENCES: 'preferences',\n  RECENT_MESSAGES: 'recent_messages',\n  USER_CONTEXT: 'user_context',\n  RELATIONSHIP_DATA: 'relationship_data'\n};\n\n// Get memory by key\nconst getMemory = async key => {\n  try {\n    const value = await localforage__WEBPACK_IMPORTED_MODULE_0__.getItem(key);\n\n    // Handle cases where stored value might be corrupted\n    if (value === null || value === undefined) {\n      return null;\n    }\n\n    // If value is a string that looks like \"[object Object]\", it's corrupted\n    if (typeof value === 'string' && value === '[object Object]') {\n      console.warn(`Corrupted data found for key ${key}, clearing it`);\n      await localforage__WEBPACK_IMPORTED_MODULE_0__.removeItem(key);\n      return null;\n    }\n    return value;\n  } catch (error) {\n    console.error(`Error getting memory for key ${key}:`, error);\n\n    // If there's a parsing error, try to clear the corrupted data\n    if (error.message.includes('JSON') || error.message.includes('parse')) {\n      try {\n        await localforage__WEBPACK_IMPORTED_MODULE_0__.removeItem(key);\n        console.warn(`Cleared corrupted data for key ${key}`);\n      } catch (clearError) {\n        console.error(`Failed to clear corrupted data for key ${key}:`, clearError);\n      }\n    }\n    return null;\n  }\n};\n\n// Set memory by key\nconst setMemory = async (key, value) => {\n  try {\n    // Validate that we're not storing corrupted data\n    if (value === null || value === undefined) {\n      await localforage__WEBPACK_IMPORTED_MODULE_0__.removeItem(key);\n      return true;\n    }\n\n    // Check if value is a string representation of [object Object]\n    if (typeof value === 'string' && value === '[object Object]') {\n      console.error(`Attempted to store corrupted data for key ${key}`);\n      return false;\n    }\n\n    // Ensure objects are properly serializable\n    if (typeof value === 'object') {\n      try {\n        JSON.stringify(value);\n      } catch (stringifyError) {\n        console.error(`Value for key ${key} is not serializable:`, stringifyError);\n        return false;\n      }\n    }\n    await localforage__WEBPACK_IMPORTED_MODULE_0__.setItem(key, value);\n    return true;\n  } catch (error) {\n    console.error(`Error setting memory for key ${key}:`, error);\n    return false;\n  }\n};\n\n// Remove memory by key\nconst removeMemory = async key => {\n  try {\n    await localforage__WEBPACK_IMPORTED_MODULE_0__.removeItem(key);\n    return true;\n  } catch (error) {\n    console.error(`Error removing memory for key ${key}:`, error);\n    return false;\n  }\n};\n\n// Clear all memories (nuclear option)\nconst clearAllMemories = async () => {\n  try {\n    await localforage__WEBPACK_IMPORTED_MODULE_0__.clear();\n    return true;\n  } catch (error) {\n    console.error('Error clearing all memories:', error);\n    return false;\n  }\n};\n\n// Get user profile with defaults\nconst getUserProfile = async () => {\n  const profile = await getMemory(MEMORY_CATEGORIES.USER_PROFILE);\n  return profile || {\n    name: '',\n    preferred_name: '',\n    relationship_level: 'getting_to_know',\n    preferred_mode: 'GIRLFRIEND',\n    emotional_preferences: {},\n    created_at: new Date().toISOString()\n  };\n};\n\n// Update user profile\nconst updateUserProfile = async updates => {\n  const currentProfile = await getUserProfile();\n  const updatedProfile = {\n    ...currentProfile,\n    ...updates,\n    updated_at: new Date().toISOString()\n  };\n  return await setMemory(MEMORY_CATEGORIES.USER_PROFILE, updatedProfile);\n};\n\n// Save conversation message\nconst saveConversationMessage = async message => {\n  try {\n    const history = (await getMemory(MEMORY_CATEGORIES.CONVERSATION_HISTORY)) || [];\n    const messageWithTimestamp = {\n      ...message,\n      saved_at: new Date().toISOString()\n    };\n    history.push(messageWithTimestamp);\n\n    // Keep only last 100 messages to manage storage\n    if (history.length > 100) {\n      history.splice(0, history.length - 100);\n    }\n    return await setMemory(MEMORY_CATEGORIES.CONVERSATION_HISTORY, history);\n  } catch (error) {\n    console.error('Error saving conversation message:', error);\n    return false;\n  }\n};\n\n// Get conversation history\nconst getConversationHistory = async function () {\n  let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  try {\n    const history = (await getMemory(MEMORY_CATEGORIES.CONVERSATION_HISTORY)) || [];\n    return limit ? history.slice(-limit) : history;\n  } catch (error) {\n    console.error('Error getting conversation history:', error);\n    return [];\n  }\n};\n\n// Save emotional state\nconst saveEmotionalState = async function (emotion) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  try {\n    const states = (await getMemory(MEMORY_CATEGORIES.EMOTIONAL_STATES)) || [];\n    const emotionalState = {\n      emotion,\n      context,\n      timestamp: new Date().toISOString()\n    };\n    states.push(emotionalState);\n\n    // Keep only last 50 emotional states\n    if (states.length > 50) {\n      states.splice(0, states.length - 50);\n    }\n    return await setMemory(MEMORY_CATEGORIES.EMOTIONAL_STATES, states);\n  } catch (error) {\n    console.error('Error saving emotional state:', error);\n    return false;\n  }\n};\n\n// Get recent emotional patterns\nconst getEmotionalPatterns = async function () {\n  let days = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;\n  try {\n    const states = (await getMemory(MEMORY_CATEGORIES.EMOTIONAL_STATES)) || [];\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    return states.filter(state => new Date(state.timestamp) > cutoffDate);\n  } catch (error) {\n    console.error('Error getting emotional patterns:', error);\n    return [];\n  }\n};\n\n// Auto-cleanup corrupted storage (built-in)\nconst autoCleanupStorage = async () => {\n  try {\n    console.log('🧹 Running comprehensive storage cleanup...');\n    const keysToCheck = ['user_context', 'emotional_history', 'recent_messages', 'relationship_milestones', 'journal_entries', 'creative_projects', 'voice_interactions', 'emotional_patterns', 'daily_emotional_summaries'];\n    let cleanedCount = 0;\n\n    // Clean LocalForage/IndexedDB data\n    for (const key of keysToCheck) {\n      try {\n        const value = await localforage__WEBPACK_IMPORTED_MODULE_0__.getItem(key);\n        if (typeof value === 'string' && value === '[object Object]') {\n          await localforage__WEBPACK_IMPORTED_MODULE_0__.removeItem(key);\n          cleanedCount++;\n          console.log(`Cleaned corrupted LocalForage key: ${key}`);\n        }\n      } catch (error) {\n        if (error.message.includes('JSON') || error.message.includes('parse')) {\n          await localforage__WEBPACK_IMPORTED_MODULE_0__.removeItem(key);\n          cleanedCount++;\n          console.log(`Cleaned corrupted LocalForage key: ${key}`);\n        }\n      }\n    }\n\n    // Also clean regular localStorage for good measure\n    if (typeof window !== 'undefined' && window.localStorage) {\n      const localStorageKeys = Object.keys(localStorage);\n      for (const key of localStorageKeys) {\n        try {\n          const value = localStorage.getItem(key);\n          if (value === '[object Object]' || value === 'undefined' || value === 'null') {\n            localStorage.removeItem(key);\n            cleanedCount++;\n            console.log(`Cleaned corrupted localStorage key: ${key}`);\n          }\n          // Try to parse as JSON to catch invalid JSON\n          if (value && value.startsWith('{') && !value.startsWith('{\"')) {\n            try {\n              JSON.parse(value);\n            } catch (jsonError) {\n              localStorage.removeItem(key);\n              cleanedCount++;\n              console.log(`Cleaned invalid JSON in localStorage key: ${key}`);\n            }\n          }\n        } catch (error) {\n          // If we can't even access the key, remove it\n          try {\n            localStorage.removeItem(key);\n            cleanedCount++;\n            console.log(`Cleaned inaccessible localStorage key: ${key}`);\n          } catch (removeError) {\n            console.warn(`Could not remove problematic key: ${key}`, removeError);\n          }\n        }\n      }\n    }\n\n    // Emergency: Clear all storage if too many corruption issues detected\n    if (cleanedCount > 10) {\n      console.warn('🚨 Excessive corruption detected, performing complete storage reset...');\n      try {\n        await localforage__WEBPACK_IMPORTED_MODULE_0__.clear();\n        if (typeof window !== 'undefined' && window.localStorage) {\n          localStorage.clear();\n        }\n        if (typeof window !== 'undefined' && window.sessionStorage) {\n          sessionStorage.clear();\n        }\n        console.log('✅ Complete storage reset performed');\n        cleanedCount = 'FULL_RESET';\n      } catch (resetError) {\n        console.error('Failed to perform complete reset:', resetError);\n      }\n    }\n    if (cleanedCount === 'FULL_RESET') {\n      console.log('🔄 Performed complete storage reset due to extensive corruption');\n    } else if (cleanedCount > 0) {\n      console.log(`✅ Cleaned ${cleanedCount} corrupted storage entries`);\n    } else {\n      console.log('✅ Storage is clean');\n    }\n    return {\n      success: true,\n      cleanedCount\n    };\n  } catch (error) {\n    console.error('Storage cleanup failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Initialize on first load\nif (typeof window !== 'undefined') {\n  // Run cleanup automatically when service loads\n  autoCleanupStorage().catch(error => {\n    console.warn('Initial storage cleanup failed:', error);\n  });\n\n  // Make cleanup function available globally for emergency use\n  window.emergencyStorageCleanup = async () => {\n    console.log('🚨 Running EMERGENCY storage cleanup...');\n    try {\n      // Clear everything\n      await localforage__WEBPACK_IMPORTED_MODULE_0__.clear();\n      if (window.localStorage) localStorage.clear();\n      if (window.sessionStorage) sessionStorage.clear();\n\n      // Clear IndexedDB databases\n      if (window.indexedDB) {\n        try {\n          const databases = await indexedDB.databases();\n          for (const db of databases) {\n            if (db.name) {\n              indexedDB.deleteDatabase(db.name);\n              console.log(`Deleted IndexedDB: ${db.name}`);\n            }\n          }\n        } catch (dbError) {\n          console.warn('Could not clean IndexedDB:', dbError);\n        }\n      }\n      console.log('✅ EMERGENCY cleanup completed - please refresh the page');\n      return {\n        success: true,\n        message: 'Emergency cleanup completed'\n      };\n    } catch (error) {\n      console.error('Emergency cleanup failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  console.log('💡 Emergency cleanup available: run `window.emergencyStorageCleanup()` in console if needed');\n}\n\n// Export memory categories for use in other modules\n\n\n// Legacy compatibility exports\nconst memoryService = {\n  getMemory,\n  setMemory,\n  removeMemory,\n  clearAllMemories,\n  getUserProfile,\n  updateUserProfile,\n  saveConversationMessage,\n  getConversationHistory,\n  saveEmotionalState,\n  getEmotionalPatterns\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9522\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + {"76":"common","80":"creative","133":"layout","209":"ui","240":"journal","377":"chat","569":"relationship","729":"mcp"}[chunkId] + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "bambisleep-chat-agent:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			792: 0
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.f.j = (chunkId, promises) => {
/******/ 				// JSONP chunk loading for javascript
/******/ 				var installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 				if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 		
/******/ 					// a Promise means "currently loading".
/******/ 					if(installedChunkData) {
/******/ 						promises.push(installedChunkData[2]);
/******/ 					} else {
/******/ 						if(true) { // all chunks have JS
/******/ 							// setup Promise in chunk cache
/******/ 							var promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));
/******/ 							promises.push(installedChunkData[2] = promise);
/******/ 		
/******/ 							// start chunk loading
/******/ 							var url = __webpack_require__.p + __webpack_require__.u(chunkId);
/******/ 							// create error before stack unwound to get useful stacktrace later
/******/ 							var error = new Error();
/******/ 							var loadingEnded = (event) => {
/******/ 								if(__webpack_require__.o(installedChunks, chunkId)) {
/******/ 									installedChunkData = installedChunks[chunkId];
/******/ 									if(installedChunkData !== 0) installedChunks[chunkId] = undefined;
/******/ 									if(installedChunkData) {
/******/ 										var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 										var realSrc = event && event.target && event.target.src;
/******/ 										error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 										error.name = 'ChunkLoadError';
/******/ 										error.type = errorType;
/******/ 										error.request = realSrc;
/******/ 										installedChunkData[1](error);
/******/ 									}
/******/ 								}
/******/ 							};
/******/ 							__webpack_require__.l(url, loadingEnded, "chunk-" + chunkId, chunkId);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		};
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkbambisleep_chat_agent"] = self["webpackChunkbambisleep_chat_agent"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [30,1,644,489,87,224,70], () => (__webpack_require__(3876)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;