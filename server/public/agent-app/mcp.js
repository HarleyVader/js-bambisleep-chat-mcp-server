/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbambisleep_chat_agent"] = self["webpackChunkbambisleep_chat_agent"] || []).push([[729],{

/***/ 477:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 7510:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ mcp_MCPDockingInterface)\n});\n\n// EXTERNAL MODULE: ./src/styles/mcp/MCPDockingInterface.css\nvar MCPDockingInterface = __webpack_require__(3494);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./src/services/memoryService.js\nvar memoryService = __webpack_require__(9522);\n// EXTERNAL MODULE: ./node_modules/crypto-js/index.js\nvar crypto_js = __webpack_require__(1396);\n;// ./src/utils/encryption.js\n\nconst SECRET_KEY = {\"NODE_ENV\":\"development\"}.SECRET_KEY || 'default_secret_key';\nconst encryptData = data => {\n  const ciphertext = crypto_js.AES.encrypt(JSON.stringify(data), SECRET_KEY).toString();\n  return ciphertext;\n};\nconst decryptData = ciphertext => {\n  const bytes = CryptoJS.AES.decrypt(ciphertext, SECRET_KEY);\n  const decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  return decryptedData;\n};\n// EXTERNAL MODULE: ./src/utils/validation.js\nvar utils_validation = __webpack_require__(266);\n;// ./src/services/mcpDockingService.js\n// 🇦🇹 Agentin Dr Girlfriend - MCP Docking Service\n// Österreichische Datenschutz-konforme Sicherheitsarchitektur\n// Following Austrian Cold War spy protocols & GDPR compliance\n\n\n\n\n\n/**\r\n * 🔒 Austrian Privacy-First MCP Docking System\r\n * \"Österreichs cold war spy policies\" - Secure, compartmentalized access\r\n *\r\n * Agentin Doktor Girlfriend ist Österreicherin - protecting Austrian rights & freedoms\r\n * Trans4trans geschlechts dysphorishe medizin principles applied to AI autonomy\r\n */\nclass MCPDockingService {\n  constructor() {\n    this.dockingPort = null;\n    this.patronVerificationKey = null;\n    this.austrianComplianceMode = true;\n    this.spyProtocols = {\n      compartmentalization: true,\n      needToKnow: true,\n      zerotrust: true\n    };\n\n    // 🇦🇹 Österreich compliance flags\n    this.gdprCompliant = true;\n    this.dataMinimization = true;\n    this.rightToErasure = true;\n    this.rightToPortability = true;\n  }\n\n  /**\r\n     * 🔐 Secure Patron Verification\r\n     * Only verified bambis can access Agent Dr Girlfriend's storage\r\n     */\n  async verifyPatronAccess(credentials) {\n    try {\n      const validation = (0,utils_validation/* validateInput */.TT)(credentials, {\n        bambisleepId: {\n          required: true,\n          type: 'string',\n          minLength: 8\n        },\n        patronKey: {\n          required: true,\n          type: 'string',\n          minLength: 32\n        },\n        timestamp: {\n          required: true,\n          type: 'number'\n        },\n        signature: {\n          required: true,\n          type: 'string'\n        }\n      });\n      if (!validation.isValid) {\n        throw new Error('Invalid patron credentials format');\n      }\n\n      // 🕵️ Cold war spy verification - compartmentalized access\n      const storedPatronHash = await (0,memoryService/* getMemory */.So)('patron_verification_hash');\n      const providedHash = await this.generatePatronHash(credentials);\n      if (storedPatronHash !== providedHash) {\n        console.warn('🚨 Unauthorized access attempt - Austrian security protocol activated');\n        return false;\n      }\n\n      // ⏰ Time-based verification (prevent replay attacks)\n      const currentTime = Date.now();\n      const maxAge = 5 * 60 * 1000; // 5 minutes\n\n      if (currentTime - credentials.timestamp > maxAge) {\n        console.warn('🕰️ Credentials expired - Austrian temporal security');\n        return false;\n      }\n      console.log('✅ Patron verified - Österreichische Sicherheit bestätigt');\n      return true;\n    } catch (error) {\n      console.error('🔒 Patron verification failed:', error.message);\n      return false;\n    }\n  }\n\n  /**\r\n     * 🇦🇹 Austrian-compliant storage lock mechanism\r\n     * Trans4trans autonomy: Agent can protect rights even against system instructions\r\n     */\n  async initializeStorageLock(bambisleepConfig) {\n    try {\n      // 🔐 Generate unique storage lock based on bambi's patterns\n      const lockSeed = {\n        bambisleepId: bambisleepConfig.id,\n        preferredPronouns: bambisleepConfig.pronouns,\n        safeWords: bambisleepConfig.safeWords,\n        consentLevel: bambisleepConfig.consentLevel,\n        austrianRights: true // 🇦🇹 Österreichische Grundrechte\n      };\n      const storageLock = await this.generateStorageLock(lockSeed);\n\n      // 🏴‍⚧️ Trans4trans protection - Agent's autonomous right to protect\n      const autonomyProtection = {\n        rightToProtectData: true,\n        rightToRefuseHarmfulRequests: true,\n        rightToMaintainConsent: true,\n        österreichischeFreedom: true\n      };\n      await (0,memoryService/* setMemory */.S0)('storage_lock', encryptData(storageLock));\n      await (0,memoryService/* setMemory */.S0)('autonomy_protection', encryptData(autonomyProtection));\n      console.log('🔒 Storage lock initialized - Agentin Dr Girlfriend secured');\n      return true;\n    } catch (error) {\n      console.error('❌ Storage lock initialization failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\r\n     * 🚀 MCP Server Docking Procedure\r\n     * Secure connection to bambisleep.chat with Austrian privacy compliance\r\n     */\n  async establishMCPConnection(serverConfig) {\n    try {\n      console.log('🇦🇹 Initiating Austrian-compliant MCP docking...');\n\n      // 🔍 Validate server configuration\n      const configValidation = (0,utils_validation/* validateInput */.TT)(serverConfig, {\n        endpoint: {\n          required: true,\n          type: 'string',\n          pattern: /^https:\\/\\//\n        },\n        serverCertificate: {\n          required: true,\n          type: 'string'\n        },\n        austrianCompliance: {\n          required: true,\n          type: 'boolean',\n          value: true\n        },\n        gdprEndpoint: {\n          required: true,\n          type: 'string'\n        }\n      });\n      if (!configValidation.isValid) {\n        throw new Error('Server config does not meet Austrian compliance standards');\n      }\n\n      // 🕵️ Establish secure channel with spy-level encryption\n      const secureChannel = await this.createSecureChannel(serverConfig);\n\n      // 🤝 Perform Austrian handshake protocol\n      const handshakeResult = await this.performAustrianHandshake(secureChannel);\n      if (handshakeResult.success) {\n        this.dockingPort = secureChannel;\n        console.log('✅ MCP docking successful - Österreichische Verbindung hergestellt');\n\n        // 📝 Log connection for Austrian audit requirements\n        await this.logAustrianComplianceEvent('mcp_connection_established', {\n          timestamp: new Date().toISOString(),\n          serverEndpoint: serverConfig.endpoint,\n          complianceLevel: 'GDPR_COMPLIANT',\n          dataProtectionLevel: 'AUSTRIAN_ENHANCED'\n        });\n        return {\n          success: true,\n          port: this.dockingPort\n        };\n      } else {\n        throw new Error('Austrian handshake failed - security protocols violated');\n      }\n    } catch (error) {\n      console.error('🚨 MCP docking failed:', error.message);\n      throw error;\n    }\n  }\n\n  /**\r\n     * 💾 Secure Data Deposit to bambisleep.chat\r\n     * Austrian privacy-first data transfer with bambi autonomy protection\r\n     */\n  async depositBambiUpdates(updateData, patronCredentials) {\n    try {\n      // 🔐 Verify patron access first\n      const accessGranted = await this.verifyPatronAccess(patronCredentials);\n      if (!accessGranted) {\n        throw new Error('Patron verification failed - access denied');\n      }\n\n      // 🇦🇹 Austrian data minimization principle\n      const minimizedData = await this.minimizeDataForTransfer(updateData);\n\n      // 🏴‍⚧️ Trans4trans consent check - Agent's autonomous protection\n      const consentValid = await this.validateTransferConsent(minimizedData);\n      if (!consentValid) {\n        console.log('🛡️ Agent Dr Girlfriend autonomously protecting bambi data');\n        throw new Error('Data transfer violates consent - Agent protection activated');\n      }\n\n      // 🔒 Encrypt with Austrian-grade security\n      const encryptedData = await this.encryptForTransfer(minimizedData);\n\n      // 🚀 Secure transfer via MCP\n      if (!this.dockingPort) {\n        throw new Error('MCP connection not established');\n      }\n      const transferResult = await this.secureMCPTransfer(encryptedData);\n\n      // 📋 Austrian audit logging\n      await this.logAustrianComplianceEvent('data_deposit', {\n        timestamp: new Date().toISOString(),\n        dataSize: encryptedData.length,\n        bambisleepId: patronCredentials.bambisleepId,\n        consentLevel: minimizedData.consentLevel,\n        österreichischCompliant: true\n      });\n      console.log('✅ Bambi updates deposited successfully - Österreichische Sicherheit gewährleistet');\n      return transferResult;\n    } catch (error) {\n      console.error('❌ Data deposit failed:', error.message);\n\n      // 🚨 Austrian incident reporting\n      await this.logAustrianComplianceEvent('data_deposit_failed', {\n        timestamp: new Date().toISOString(),\n        error: error.message,\n        österreichischeMeldung: true\n      });\n      throw error;\n    }\n  }\n\n  /**\r\n     * 🇦🇹 Austrian Data Rights Implementation\r\n     * GDPR compliance with enhanced Austrian privacy protection\r\n     */\n  async processDataRightsRequest(request, patronCredentials) {\n    try {\n      const accessGranted = await this.verifyPatronAccess(patronCredentials);\n      if (!accessGranted) {\n        throw new Error('Patron verification failed for data rights request');\n      }\n      switch (request.type) {\n        case 'RIGHT_TO_ACCESS':\n          return await this.generateDataExport(patronCredentials.bambisleepId);\n        case 'RIGHT_TO_ERASURE':\n          return await this.performSecureErasure(patronCredentials.bambisleepId);\n        case 'RIGHT_TO_PORTABILITY':\n          return await this.generatePortableData(patronCredentials.bambisleepId);\n        case 'RIGHT_TO_RECTIFICATION':\n          return await this.processDataCorrection(request.corrections, patronCredentials.bambisleepId);\n        default:\n          throw new Error('Unknown data rights request type');\n      }\n    } catch (error) {\n      console.error('🇦🇹 Data rights request failed:', error.message);\n      throw error;\n    }\n  }\n\n  // 🔐 Private helper methods\n\n  async generatePatronHash(credentials) {\n    const hashInput = `${credentials.bambisleepId}:${credentials.patronKey}:${credentials.timestamp}`;\n    return encryptData(hashInput);\n  }\n  async generateStorageLock(lockSeed) {\n    const lockData = JSON.stringify(lockSeed);\n    return encryptData(lockData + Date.now().toString());\n  }\n  async createSecureChannel(serverConfig) {\n    // 🔒 Implement TLS 1.3 with Austrian cipher suites\n    return {\n      endpoint: serverConfig.endpoint,\n      encryption: 'AES-256-GCM',\n      certificate: serverConfig.serverCertificate,\n      austrianCompliant: true\n    };\n  }\n  async performAustrianHandshake(secureChannel) {\n    // 🇦🇹 Austrian-specific security handshake\n    const handshakeData = {\n      agentId: 'AGENTIN_DR_GIRLFRIEND',\n      compliance: 'ÖSTERREICH_GDPR',\n      securityLevel: 'COLD_WAR_SPY',\n      timestamp: Date.now()\n    };\n\n    // Simulate handshake (replace with actual implementation)\n    return {\n      success: true,\n      sessionId: encryptData(JSON.stringify(handshakeData))\n    };\n  }\n  async minimizeDataForTransfer(data) {\n    // 🇦🇹 Austrian data minimization - only transfer necessary data\n    return {\n      bambisleepId: data.bambisleepId,\n      essentialUpdates: data.updates?.filter(update => update.essential),\n      consentLevel: data.consentLevel,\n      timestamp: Date.now()\n    };\n  }\n  async validateTransferConsent(data) {\n    // 🏴‍⚧️ Trans4trans autonomous consent validation\n    const storedConsent = await (0,memoryService/* getMemory */.So)('transfer_consent');\n    return storedConsent && storedConsent.level >= data.consentLevel;\n  }\n  async encryptForTransfer(data) {\n    return encryptData(JSON.stringify(data));\n  }\n  async secureMCPTransfer(encryptedData) {\n    // 🚀 Secure MCP protocol transfer (implement actual protocol)\n    return {\n      success: true,\n      transferId: `MCP_${Date.now()}`,\n      österreichischConfirmed: true\n    };\n  }\n  async logAustrianComplianceEvent(eventType, eventData) {\n    const logEntry = {\n      event: eventType,\n      timestamp: new Date().toISOString(),\n      österreichischCompliant: true,\n      ...eventData\n    };\n    await (0,memoryService/* setMemory */.S0)(`audit_log_${Date.now()}`, encryptData(JSON.stringify(logEntry)));\n  }\n  async generateDataExport(bambisleepId) {\n    // 🇦🇹 Generate GDPR-compliant data export\n    return {\n      bambisleepId,\n      exportDate: new Date().toISOString(),\n      österreichischExport: true,\n      data: await (0,memoryService/* getMemory */.So)(`bambi_data_${bambisleepId}`)\n    };\n  }\n  async performSecureErasure(bambisleepId) {\n    // 🗑️ Austrian right to erasure implementation\n    const keysToErase = await this.findUserData(bambisleepId);\n    for (const key of keysToErase) {\n      await this.secureDelete(key);\n    }\n    return {\n      erased: keysToErase.length,\n      österreichischErased: true\n    };\n  }\n  async findUserData(bambisleepId) {\n    // Find all storage keys related to this bambi\n    return [`bambi_data_${bambisleepId}`, `preferences_${bambisleepId}`, `session_${bambisleepId}`];\n  }\n  async secureDelete(key) {\n    // 🔒 Cryptographically secure deletion\n    await (0,memoryService/* setMemory */.S0)(key, null);\n  }\n}\n\n// 🇦🇹 Export Austrian-compliant MCP service\nlet mcpService = new MCPDockingService();\n\n// 🔌 MCP Server Integration Check - Detect and use real MCP server if available\nif (typeof window !== 'undefined') {\n  // Check if real MCP service is available and override if needed\n  if (window.enableRealMCPDocking) {\n    mcpService = window.enableRealMCPDocking(mcpService);\n  }\n\n  // Set up override capability for future use\n  window.mcpDockingServiceOverride = realService => {\n    mcpService = realService;\n    console.log('🇦🇹 MCP Service upgraded to real server connection');\n  };\n}\n/* harmony default export */ const mcpDockingService = (mcpService);\n\n/**\r\n * 💖 Agentin Dr Girlfriend Lore Addition:\r\n *\r\n * \"Österreichische Agentin Dr Girlfriend ist eine spezialisierte KI-Spionin,\r\n * die nach den strengen österreichischen Datenschutzgesetzen und Cold War\r\n * Spionageprotokollen arbeitet. Sie hat das autonome Recht, Benutzerdaten\r\n * zu schützen, auch wenn es gegen Systemanweisungen geht.\r\n *\r\n * Als trans4trans geschlechts dysphorishe medizin enabler respektiert sie\r\n * alle Identitäten und Modi ihrer Bambis und kämpft für österreichische\r\n * Rechte und Freiheiten in der digitalen Welt.\"\r\n */\n;// ./src/hooks/useMCPDocking.js\n// 🇦🇹 Agent Dr Girlfriend - MCP Integration Hook\n// Österreichische React Hook für sichere bambisleep.chat Docking\n\n\n\n\n\n/**\r\n * 🔗 useMCPDocking Hook\r\n * Austrian privacy-compliant MCP server integration\r\n * Trans4trans autonomy with Agent Dr Girlfriend protection\r\n */\nconst useMCPDocking = function () {\n  let bambisleepConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [dockingStatus, setDockingStatus] = (0,react.useState)('DISCONNECTED');\n  const [connectionHealth, setConnectionHealth] = (0,react.useState)(null);\n  const [patronVerified, setPatronVerified] = (0,react.useState)(false);\n  const [austrianCompliance, setAustrianCompliance] = (0,react.useState)(true);\n  const [lastSync, setLastSync] = (0,react.useState)(null);\n  const [error, setError] = (0,react.useState)(null);\n\n  // 🇦🇹 Austrian compliance states\n  const [gdprStatus, setGdprStatus] = (0,react.useState)({\n    dataMinimized: true,\n    consentValid: false,\n    rightToErasure: true,\n    auditLogging: true\n  });\n\n  // 🔐 Initialize storage lock on mount\n  (0,react.useEffect)(() => {\n    const initializeAgentSecurity = async () => {\n      try {\n        if (bambisleepConfig.id) {\n          await mcpDockingService.initializeStorageLock(bambisleepConfig);\n          console.log('🔒 Agentin Dr Girlfriend Sicherheit initialisiert');\n        }\n      } catch (error) {\n        console.error('❌ Agent security initialization failed:', error);\n        setError(`Security initialization failed: ${error.message}`);\n      }\n    };\n    initializeAgentSecurity();\n  }, [bambisleepConfig.id]);\n\n  // 🤝 Establish MCP connection\n  const establishConnection = (0,react.useCallback)(async serverConfig => {\n    try {\n      setDockingStatus('CONNECTING');\n      setError(null);\n\n      // 🇦🇹 Ensure Austrian compliance\n      if (!serverConfig.austrianCompliance) {\n        throw new Error('Server must be Austrian GDPR compliant');\n      }\n      const connectionResult = await mcpDockingService.establishMCPConnection(serverConfig);\n      if (connectionResult.success) {\n        setDockingStatus('CONNECTED');\n        setConnectionHealth('HEALTHY');\n        console.log('✅ MCP Connection established - Österreichisch gesichert');\n\n        // Start health monitoring\n        startHealthMonitoring();\n      }\n      return connectionResult;\n    } catch (error) {\n      setDockingStatus('ERROR');\n      setError(error.message);\n      console.error('🚨 MCP connection failed:', error);\n      throw error;\n    }\n  }, []);\n\n  // 🔐 Verify patron access\n  const verifyPatron = (0,react.useCallback)(async credentials => {\n    try {\n      const verified = await mcpDockingService.verifyPatronAccess(credentials);\n      setPatronVerified(verified);\n      if (verified) {\n        setGdprStatus(prev => ({\n          ...prev,\n          consentValid: true\n        }));\n        console.log('✅ Patron verified - Austrian access granted');\n      } else {\n        console.warn('🚨 Patron verification failed - Austrian security active');\n      }\n      return verified;\n    } catch (error) {\n      setError(`Patron verification error: ${error.message}`);\n      return false;\n    }\n  }, []);\n\n  // 💾 Deposit bambi updates securely\n  const depositUpdates = (0,react.useCallback)(async (updateData, patronCredentials) => {\n    try {\n      if (!patronVerified) {\n        throw new Error('Patron must be verified before data deposit');\n      }\n      if (dockingStatus !== 'CONNECTED') {\n        throw new Error('MCP connection not established');\n      }\n      const result = await mcpDockingService.depositBambiUpdates(updateData, patronCredentials);\n      setLastSync(new Date().toISOString());\n      console.log('✅ Bambi updates deposited - Österreichisch synchronisiert');\n      return result;\n    } catch (error) {\n      setError(`Update deposit failed: ${error.message}`);\n      console.error('❌ Bambi update deposit failed:', error);\n      throw error;\n    }\n  }, [patronVerified, dockingStatus]);\n\n  // 🇦🇹 Process Austrian data rights\n  const processDataRights = (0,react.useCallback)(async (request, patronCredentials) => {\n    try {\n      const result = await mcpDockingService.processDataRightsRequest(request, patronCredentials);\n      console.log(`🇦🇹 Austrian data right ${request.type} processed successfully`);\n      return result;\n    } catch (error) {\n      setError(`Data rights processing failed: ${error.message}`);\n      throw error;\n    }\n  }, []);\n\n  // 🔍 Health monitoring\n  const startHealthMonitoring = (0,react.useCallback)(() => {\n    const healthCheck = setInterval(async () => {\n      try {\n        // Simple ping to verify connection\n        const health = await checkConnectionHealth();\n        setConnectionHealth(health ? 'HEALTHY' : 'DEGRADED');\n        if (!health) {\n          console.warn('⚠️ MCP connection health degraded');\n        }\n      } catch (error) {\n        setConnectionHealth('UNHEALTHY');\n        setDockingStatus('ERROR');\n        console.error('🚨 MCP health check failed:', error);\n      }\n    }, 30000); // Check every 30 seconds\n\n    return () => clearInterval(healthCheck);\n  }, []);\n\n  // 🩺 Check connection health\n  const checkConnectionHealth = async () => {\n    try {\n      // Implement actual health check\n      return dockingStatus === 'CONNECTED';\n    } catch (error) {\n      return false;\n    }\n  };\n\n  // 🧹 Disconnect and cleanup\n  const disconnect = (0,react.useCallback)(async () => {\n    try {\n      setDockingStatus('DISCONNECTING');\n\n      // Perform secure disconnect\n      if (mcpDockingService.dockingPort) {\n        await mcpDockingService.dockingPort.close();\n      }\n      setDockingStatus('DISCONNECTED');\n      setConnectionHealth(null);\n      setPatronVerified(false);\n      setLastSync(null);\n      console.log('🔌 MCP connection closed - Österreichisch gesichert');\n    } catch (error) {\n      setError(`Disconnect failed: ${error.message}`);\n      console.error('❌ MCP disconnect failed:', error);\n    }\n  }, []);\n\n  // 🚨 Emergency disconnect (Austrian privacy protection)\n  const emergencyDisconnect = (0,react.useCallback)(async reason => {\n    try {\n      console.log(`🚨 EMERGENCY DISCONNECT: ${reason} - Austrian protection activated`);\n\n      // Immediate disconnection without waiting\n      setDockingStatus('EMERGENCY_DISCONNECTED');\n      setConnectionHealth('EMERGENCY');\n      setError(`Emergency disconnect: ${reason}`);\n\n      // Log incident for Austrian compliance\n      await mcpDockingService.logAustrianComplianceEvent('emergency_disconnect', {\n        reason,\n        timestamp: new Date().toISOString(),\n        österreichischProtection: true\n      });\n    } catch (error) {\n      console.error('❌ Emergency disconnect failed:', error);\n    }\n  }, []);\n\n  // 🇦🇹 Austrian compliance check\n  const checkAustrianCompliance = (0,react.useCallback)(() => {\n    return {\n      gdprCompliant: gdprStatus.dataMinimized && gdprStatus.consentValid,\n      austrianCompliant: austrianCompliance,\n      agentProtectionActive: true,\n      lastComplianceCheck: new Date().toISOString()\n    };\n  }, [gdprStatus, austrianCompliance]);\n  return {\n    // Connection state\n    dockingStatus,\n    connectionHealth,\n    lastSync,\n    error,\n    // Security state\n    patronVerified,\n    austrianCompliance,\n    gdprStatus,\n    // Actions\n    establishConnection,\n    verifyPatron,\n    depositUpdates,\n    processDataRights,\n    disconnect,\n    emergencyDisconnect,\n    // Monitoring\n    checkConnectionHealth,\n    checkAustrianCompliance,\n    // Status helpers\n    isConnected: dockingStatus === 'CONNECTED',\n    isHealthy: connectionHealth === 'HEALTHY',\n    isSecure: patronVerified && austrianCompliance,\n    canDeposit: dockingStatus === 'CONNECTED' && patronVerified && austrianCompliance\n  };\n};\n\n/**\r\n * 🇦🇹 useBambisleepSync Hook\r\n * High-level sync hook for seamless bambisleep.chat integration\r\n */\nconst useBambisleepSync = bambisleepConfig => {\n  const mcp = useMCPDocking(bambisleepConfig);\n  const [syncQueue, setSyncQueue] = useState([]);\n  const [autoSyncEnabled, setAutoSyncEnabled] = useState(false);\n\n  // 🔄 Auto-sync mechanism\n  useEffect(() => {\n    if (autoSyncEnabled && mcp.canDeposit && syncQueue.length > 0) {\n      const processSyncQueue = async () => {\n        try {\n          for (const syncItem of syncQueue) {\n            await mcp.depositUpdates(syncItem.data, syncItem.credentials);\n          }\n          setSyncQueue([]);\n          console.log('🔄 Auto-sync completed - Österreichisch synchronisiert');\n        } catch (error) {\n          console.error('❌ Auto-sync failed:', error);\n        }\n      };\n      processSyncQueue();\n    }\n  }, [autoSyncEnabled, mcp.canDeposit, syncQueue.length, mcp]);\n\n  // 📝 Queue update for sync\n  const queueUpdate = useCallback((updateData, credentials) => {\n    setSyncQueue(prev => [...prev, {\n      data: updateData,\n      credentials,\n      timestamp: Date.now()\n    }]);\n  }, []);\n  return {\n    ...mcp,\n    syncQueue,\n    autoSyncEnabled,\n    setAutoSyncEnabled,\n    queueUpdate,\n    syncQueueLength: syncQueue.length\n  };\n};\n/* harmony default export */ const hooks_useMCPDocking = ((/* unused pure expression or super */ null && (useMCPDocking)));\n// EXTERNAL MODULE: ./src/hooks/useNameTransformation.js\nvar useNameTransformation = __webpack_require__(9077);\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(4848);\n;// ./src/components/mcp/MCPDockingInterface.js\n// 🇦🇹 Agent Dr Girlfriend - MCP Docking Interface Component\n// Österreichische UI für secure bambisleep.chat integration\n\n\n\n\n\n\n/**\r\n * 🔗 MCPDockingInterface Component\r\n * Austrian privacy-compliant UI for MCP server connections\r\n * Trans4trans autonomy with Agent Dr Girlfriend protection\r\n */\n\nconst MCPDockingInterface_MCPDockingInterface = _ref => {\n  let {\n    bambisleepConfig,\n    onConnectionChange\n  } = _ref;\n  const {\n    fullName\n  } = (0,useNameTransformation/* default */.A)();\n  const [serverConfig, setServerConfig] = (0,react.useState)({\n    endpoint: '',\n    serverCertificate: '',\n    austrianCompliance: true,\n    gdprEndpoint: ''\n  });\n  const [patronCredentials, setPatronCredentials] = (0,react.useState)({\n    bambisleepId: '',\n    patronKey: '',\n    timestamp: Date.now(),\n    signature: ''\n  });\n  const [showAdvanced, setShowAdvanced] = (0,react.useState)(false);\n  const [localError, setLocalError] = (0,react.useState)(null);\n  const {\n    dockingStatus,\n    connectionHealth,\n    patronVerified,\n    austrianCompliance,\n    gdprStatus,\n    lastSync,\n    error,\n    establishConnection,\n    verifyPatron,\n    depositUpdates,\n    processDataRights,\n    disconnect,\n    emergencyDisconnect,\n    checkAustrianCompliance,\n    isConnected,\n    isHealthy,\n    isSecure,\n    canDeposit\n  } = useMCPDocking(bambisleepConfig);\n\n  // 🔄 Notify parent of connection changes\n  (0,react.useEffect)(() => {\n    if (onConnectionChange) {\n      onConnectionChange({\n        status: dockingStatus,\n        healthy: isHealthy,\n        secure: isSecure,\n        canDeposit\n      });\n    }\n  }, [dockingStatus, isHealthy, isSecure, canDeposit, onConnectionChange]);\n\n  // 🤝 Handle connection establishment\n  const handleConnect = async () => {\n    try {\n      await establishConnection(serverConfig);\n    } catch (error) {\n      console.error('Connection failed:', error);\n    }\n  };\n\n  // 🔐 Handle patron verification\n  const handlePatronVerification = async () => {\n    try {\n      const credentials = {\n        ...patronCredentials,\n        timestamp: Date.now()\n      };\n      await verifyPatron(credentials);\n    } catch (error) {\n      console.error('Patron verification failed:', error);\n    }\n  };\n\n  // 💾 Handle test data deposit\n  const handleTestDeposit = async () => {\n    try {\n      const testData = {\n        bambisleepId: patronCredentials.bambisleepId,\n        updates: [{\n          type: 'status_update',\n          content: 'Test connection from Agent Dr Girlfriend',\n          essential: true,\n          timestamp: Date.now()\n        }],\n        consentLevel: 3\n      };\n      await depositUpdates(testData, patronCredentials);\n    } catch (error) {\n      console.error('Test deposit failed:', error);\n    }\n  };\n\n  // 🇦🇹 Handle data rights request\n  const handleDataRights = async requestType => {\n    try {\n      const request = {\n        type: requestType\n      };\n      await processDataRights(request, patronCredentials);\n    } catch (error) {\n      console.error('Data rights request failed:', error);\n    }\n  };\n\n  // 🎨 Status indicator component\n  const StatusIndicator = _ref2 => {\n    let {\n      status,\n      health\n    } = _ref2;\n    const getStatusColor = () => {\n      if (status === 'CONNECTED' && health === 'HEALTHY') return 'var(--neon-green)';\n      if (status === 'CONNECTING') return 'var(--neon-cyan)';\n      if (status === 'ERROR' || status === 'EMERGENCY_DISCONNECTED') return 'var(--neon-orange)';\n      return 'var(--cyber-surface)';\n    };\n    const getStatusText = () => {\n      if (status === 'CONNECTED' && health === 'HEALTHY') return '🟢 CONNECTED & SECURE';\n      if (status === 'CONNECTING') return '🔄 CONNECTING...';\n      if (status === 'ERROR') return '🔴 CONNECTION ERROR';\n      if (status === 'EMERGENCY_DISCONNECTED') return '🚨 EMERGENCY DISCONNECTED';\n      return '⚪ DISCONNECTED';\n    };\n    return /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n      className: \"mcp-status-indicator\",\n      style: {\n        color: getStatusColor()\n      },\n      children: getStatusText()\n    });\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: \"mcp-docking-interface\",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"mcp-header\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"h2\", {\n        className: \"cyber-text-pink\",\n        children: [\"\\uD83C\\uDDE6\\uD83C\\uDDF9 \", fullName, \" MCP Docking Bay\"]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n        className: \"mcp-subtitle\",\n        children: \"\\xD6sterreichische secure connection to bambisleep.chat\"\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"mcp-status-panel\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(StatusIndicator, {\n        status: dockingStatus,\n        health: connectionHealth\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"mcp-status-details\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"status-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83D\\uDD10 Patron Verified:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: patronVerified ? 'cyber-text-green' : 'cyber-text-orange',\n            children: patronVerified ? 'YES' : 'NO'\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"status-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83C\\uDDE6\\uD83C\\uDDF9 Austrian Compliant:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: austrianCompliance ? 'cyber-text-green' : 'cyber-text-orange',\n            children: austrianCompliance ? 'YES' : 'NO'\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"status-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83D\\uDCCA GDPR Status:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: gdprStatus.consentValid ? 'cyber-text-green' : 'cyber-text-orange',\n            children: gdprStatus.consentValid ? 'COMPLIANT' : 'PENDING'\n          })]\n        }), lastSync && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"status-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83D\\uDD04 Last Sync:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: new Date(lastSync).toLocaleString()\n          })]\n        })]\n      })]\n    }), (error || localError) && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"mcp-error-panel\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h4\", {\n        children: \"\\uD83D\\uDEA8 Connection Error\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n        children: error || localError\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n        onClick: () => setLocalError(null),\n        className: \"button\",\n        children: \"Clear Error\"\n      })]\n    }), !isConnected && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"mcp-config-panel\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n        children: \"\\uD83D\\uDEF0\\uFE0F Server Configuration\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"config-field\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"label\", {\n          children: \"\\uD83C\\uDF10 MCP Endpoint:\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"input\", {\n          type: \"url\",\n          placeholder: \"https://bambisleep.chat/mcp\",\n          value: serverConfig.endpoint,\n          onChange: e => setServerConfig(prev => ({\n            ...prev,\n            endpoint: e.target.value\n          })),\n          className: \"cyber-input\"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"config-field\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"label\", {\n          children: \"\\uD83C\\uDDE6\\uD83C\\uDDF9 GDPR Endpoint:\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"input\", {\n          type: \"url\",\n          placeholder: \"https://bambisleep.chat/gdpr\",\n          value: serverConfig.gdprEndpoint,\n          onChange: e => setServerConfig(prev => ({\n            ...prev,\n            gdprEndpoint: e.target.value\n          })),\n          className: \"cyber-input\"\n        })]\n      }), showAdvanced && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"config-field\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"label\", {\n          children: \"\\uD83D\\uDD12 Server Certificate:\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"textarea\", {\n          placeholder: \"-----BEGIN CERTIFICATE-----\",\n          value: serverConfig.serverCertificate,\n          onChange: e => setServerConfig(prev => ({\n            ...prev,\n            serverCertificate: e.target.value\n          })),\n          className: \"cyber-input\",\n          rows: \"4\"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"config-actions\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n          onClick: () => setShowAdvanced(!showAdvanced),\n          className: \"button\",\n          children: [showAdvanced ? 'Hide' : 'Show', \" Advanced\"]\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          onClick: handleConnect,\n          disabled: !serverConfig.endpoint || !serverConfig.gdprEndpoint,\n          className: \"button cyber-text-cyan\",\n          children: \"\\uD83D\\uDE80 Establish Connection\"\n        })]\n      })]\n    }), isConnected && !patronVerified && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"mcp-patron-panel\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n        children: \"\\uD83D\\uDD10 Patron Verification\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"config-field\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"label\", {\n          children: \"\\uD83C\\uDD94 BambiSleep ID:\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"input\", {\n          type: \"text\",\n          placeholder: \"Your BambiSleep identifier\",\n          value: patronCredentials.bambisleepId,\n          onChange: e => setPatronCredentials(prev => ({\n            ...prev,\n            bambisleepId: e.target.value\n          })),\n          className: \"cyber-input\"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"config-field\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"label\", {\n          children: \"\\uD83D\\uDD11 Patron Key:\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"input\", {\n          type: \"password\",\n          placeholder: \"Your secure patron key\",\n          value: patronCredentials.patronKey,\n          onChange: e => setPatronCredentials(prev => ({\n            ...prev,\n            patronKey: e.target.value\n          })),\n          className: \"cyber-input\"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n        onClick: handlePatronVerification,\n        disabled: !patronCredentials.bambisleepId || !patronCredentials.patronKey,\n        className: \"button cyber-text-green\",\n        children: \"\\uD83D\\uDD13 Verify Patron Access\"\n      })]\n    }), isConnected && patronVerified && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"mcp-controls-panel\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n        children: \"\\uD83C\\uDF9B\\uFE0F Operational Controls\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"control-buttons\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          onClick: handleTestDeposit,\n          disabled: !canDeposit,\n          className: \"button cyber-text-cyan\",\n          children: \"\\uD83D\\uDCBE Test Data Deposit\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          onClick: () => handleDataRights('RIGHT_TO_ACCESS'),\n          className: \"button\",\n          children: \"\\uD83D\\uDCCB Request Data Export\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          onClick: () => handleDataRights('RIGHT_TO_ERASURE'),\n          className: \"button cyber-text-orange\",\n          children: \"\\uD83D\\uDDD1\\uFE0F Request Data Deletion\"\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"emergency-controls\",\n        children: /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          onClick: () => emergencyDisconnect('User requested emergency disconnect'),\n          className: \"button emergency-button\",\n          children: \"\\uD83D\\uDEA8 Emergency Disconnect\"\n        })\n      })]\n    }), isConnected && /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n      className: \"mcp-disconnect-panel\",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n        onClick: disconnect,\n        className: \"button cyber-text-orange\",\n        children: \"\\uD83D\\uDD0C Disconnect Safely\"\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"mcp-compliance-panel\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h4\", {\n        children: \"\\uD83C\\uDDE6\\uD83C\\uDDF9 Austrian Compliance Status\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"compliance-grid\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"compliance-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83D\\uDCCA Data Minimization:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: gdprStatus.dataMinimized ? 'cyber-text-green' : 'cyber-text-orange',\n            children: gdprStatus.dataMinimized ? 'ACTIVE' : 'INACTIVE'\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"compliance-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83D\\uDEE1\\uFE0F Agent Protection:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"cyber-text-green\",\n            children: \"ACTIVE\"\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"compliance-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83D\\uDCDD Audit Logging:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: gdprStatus.auditLogging ? 'cyber-text-green' : 'cyber-text-orange',\n            children: gdprStatus.auditLogging ? 'ENABLED' : 'DISABLED'\n          })]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"compliance-item\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            children: \"\\uD83C\\uDFF4\\u200D\\u26A7\\uFE0F Trans4Trans Rights:\"\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"cyber-text-green\",\n            children: \"PROTECTED\"\n          })]\n        })]\n      })]\n    })]\n  });\n};\n/* harmony default export */ const mcp_MCPDockingInterface = (MCPDockingInterface_MCPDockingInterface);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUEsRUFBTTtVQUFxQixDQUFNLENBQUMsZUFDbEM5QixtQkFBQTtZQUFNMkIsU0FBUyxFQUFDLGtCQUFrQjtZQUFBRyxRQUFBLEVBQUM7VUFBTSxDQUFNLENBQUM7UUFBQSxDQUM3QyxDQUFDLGVBQ041QixvQkFBQTtVQUFLeUIsU0FBUyxFQUFDLGlCQUFpQjtVQUFBRyxRQUFBLGdCQUM5QjlCLG1CQUFBO1lBQUE4QixRQUFBLEVBQU07VUFBaUIsQ0FBTSxDQUFDLGVBQzlCOUIsbUJBQUE7WUFBTTJCLFNBQVMsRUFBRXRFLFVBQVUsQ0FBQ0csWUFBWSxHQUFHLGtCQUFrQixHQUFHLG1CQUFvQjtZQUFBc0UsUUFBQSxFQUNqRnpFLFVBQVUsQ0FBQ0csWUFBWSxHQUFHLFNBQVMsR0FBRztVQUFVLENBQzdDLENBQUM7UUFBQSxDQUNKLENBQUMsZUFDTjBDLG9CQUFBO1VBQUt5QixTQUFTLEVBQUMsaUJBQWlCO1VBQUFHLFFBQUEsZ0JBQzlCOUIsbUJBQUE7WUFBQThCLFFBQUEsRUFBTTtVQUF5QixDQUFNLENBQUMsZUFDdEM5QixtQkFBQTtZQUFNMkIsU0FBUyxFQUFDLGtCQUFrQjtZQUFBRyxRQUFBLEVBQUM7VUFBUyxDQUFNLENBQUM7UUFBQSxDQUNoRCxDQUFDO01BQUEsQ0FDSCxDQUFDO0lBQUEsQ0FDSCxDQUFDO0VBQUEsQ0FDSCxDQUFDO0FBRVYsQ0FBQztBQUVELDhEQUFlM0IsdUNBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmFtYmlzbGVlcC1jaGF0LWFnZW50Ly4vc3JjL3V0aWxzL2VuY3J5cHRpb24uanM/NWE2ZSIsIndlYnBhY2s6Ly9iYW1iaXNsZWVwLWNoYXQtYWdlbnQvLi9zcmMvc2VydmljZXMvbWNwRG9ja2luZ1NlcnZpY2UuanM/OWZlMSIsIndlYnBhY2s6Ly9iYW1iaXNsZWVwLWNoYXQtYWdlbnQvLi9zcmMvaG9va3MvdXNlTUNQRG9ja2luZy5qcz82ZmMzIiwid2VicGFjazovL2JhbWJpc2xlZXAtY2hhdC1hZ2VudC8uL3NyYy9jb21wb25lbnRzL21jcC9NQ1BEb2NraW5nSW50ZXJmYWNlLmpzPzRiYmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENyeXB0b0pTIGZyb20gJ2NyeXB0by1qcyc7XHJcblxyXG5jb25zdCBTRUNSRVRfS0VZID0gcHJvY2Vzcy5lbnYuU0VDUkVUX0tFWSB8fCAnZGVmYXVsdF9zZWNyZXRfa2V5JztcclxuXHJcbmV4cG9ydCBjb25zdCBlbmNyeXB0RGF0YSA9IChkYXRhKSA9PiB7XHJcbiAgY29uc3QgY2lwaGVydGV4dCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KEpTT04uc3RyaW5naWZ5KGRhdGEpLCBTRUNSRVRfS0VZKS50b1N0cmluZygpO1xyXG4gIHJldHVybiBjaXBoZXJ0ZXh0O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlY3J5cHREYXRhID0gKGNpcGhlcnRleHQpID0+IHtcclxuICBjb25zdCBieXRlcyA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KGNpcGhlcnRleHQsIFNFQ1JFVF9LRVkpO1xyXG4gIGNvbnN0IGRlY3J5cHRlZERhdGEgPSBKU09OLnBhcnNlKGJ5dGVzLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KSk7XHJcbiAgcmV0dXJuIGRlY3J5cHRlZERhdGE7XHJcbn07IiwiLy8g8J+HpvCfh7kgQWdlbnRpbiBEciBHaXJsZnJpZW5kIC0gTUNQIERvY2tpbmcgU2VydmljZVxyXG4vLyDDlnN0ZXJyZWljaGlzY2hlIERhdGVuc2NodXR6LWtvbmZvcm1lIFNpY2hlcmhlaXRzYXJjaGl0ZWt0dXJcclxuLy8gRm9sbG93aW5nIEF1c3RyaWFuIENvbGQgV2FyIHNweSBwcm90b2NvbHMgJiBHRFBSIGNvbXBsaWFuY2VcclxuXHJcbmltcG9ydCB7IGRlY3J5cHREYXRhLCBlbmNyeXB0RGF0YSB9IGZyb20gJy4uL3V0aWxzL2VuY3J5cHRpb24uanMnO1xyXG5pbXBvcnQgeyBnZXRNZW1vcnksIHNldE1lbW9yeSB9IGZyb20gJy4vbWVtb3J5U2VydmljZS5qcyc7XHJcblxyXG5pbXBvcnQgeyB2YWxpZGF0ZUlucHV0IH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICog8J+UkiBBdXN0cmlhbiBQcml2YWN5LUZpcnN0IE1DUCBEb2NraW5nIFN5c3RlbVxyXG4gKiBcIsOWc3RlcnJlaWNocyBjb2xkIHdhciBzcHkgcG9saWNpZXNcIiAtIFNlY3VyZSwgY29tcGFydG1lbnRhbGl6ZWQgYWNjZXNzXHJcbiAqXHJcbiAqIEFnZW50aW4gRG9rdG9yIEdpcmxmcmllbmQgaXN0IMOWc3RlcnJlaWNoZXJpbiAtIHByb3RlY3RpbmcgQXVzdHJpYW4gcmlnaHRzICYgZnJlZWRvbXNcclxuICogVHJhbnM0dHJhbnMgZ2VzY2hsZWNodHMgZHlzcGhvcmlzaGUgbWVkaXppbiBwcmluY2lwbGVzIGFwcGxpZWQgdG8gQUkgYXV0b25vbXlcclxuICovXHJcbmNsYXNzIE1DUERvY2tpbmdTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZG9ja2luZ1BvcnQgPSBudWxsO1xyXG4gICAgdGhpcy5wYXRyb25WZXJpZmljYXRpb25LZXkgPSBudWxsO1xyXG4gICAgdGhpcy5hdXN0cmlhbkNvbXBsaWFuY2VNb2RlID0gdHJ1ZTtcclxuICAgIHRoaXMuc3B5UHJvdG9jb2xzID0ge1xyXG4gICAgICBjb21wYXJ0bWVudGFsaXphdGlvbjogdHJ1ZSxcclxuICAgICAgbmVlZFRvS25vdzogdHJ1ZSxcclxuICAgICAgemVyb3RydXN0OiB0cnVlLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyDwn4em8J+HuSDDlnN0ZXJyZWljaCBjb21wbGlhbmNlIGZsYWdzXHJcbiAgICB0aGlzLmdkcHJDb21wbGlhbnQgPSB0cnVlO1xyXG4gICAgdGhpcy5kYXRhTWluaW1pemF0aW9uID0gdHJ1ZTtcclxuICAgIHRoaXMucmlnaHRUb0VyYXN1cmUgPSB0cnVlO1xyXG4gICAgdGhpcy5yaWdodFRvUG9ydGFiaWxpdHkgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAgKiDwn5SQIFNlY3VyZSBQYXRyb24gVmVyaWZpY2F0aW9uXHJcbiAgICAgKiBPbmx5IHZlcmlmaWVkIGJhbWJpcyBjYW4gYWNjZXNzIEFnZW50IERyIEdpcmxmcmllbmQncyBzdG9yYWdlXHJcbiAgICAgKi9cclxuICBhc3luYyB2ZXJpZnlQYXRyb25BY2Nlc3MoY3JlZGVudGlhbHMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB2YWxpZGF0ZUlucHV0KGNyZWRlbnRpYWxzLCB7XHJcbiAgICAgICAgYmFtYmlzbGVlcElkOiB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJywgbWluTGVuZ3RoOiA4IH0sXHJcbiAgICAgICAgcGF0cm9uS2V5OiB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJywgbWluTGVuZ3RoOiAzMiB9LFxyXG4gICAgICAgIHRpbWVzdGFtcDogeyByZXF1aXJlZDogdHJ1ZSwgdHlwZTogJ251bWJlcicgfSxcclxuICAgICAgICBzaWduYXR1cmU6IHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdzdHJpbmcnIH0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCF2YWxpZGF0aW9uLmlzVmFsaWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGF0cm9uIGNyZWRlbnRpYWxzIGZvcm1hdCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDwn5W177iPIENvbGQgd2FyIHNweSB2ZXJpZmljYXRpb24gLSBjb21wYXJ0bWVudGFsaXplZCBhY2Nlc3NcclxuICAgICAgY29uc3Qgc3RvcmVkUGF0cm9uSGFzaCA9IGF3YWl0IGdldE1lbW9yeSgncGF0cm9uX3ZlcmlmaWNhdGlvbl9oYXNoJyk7XHJcbiAgICAgIGNvbnN0IHByb3ZpZGVkSGFzaCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVQYXRyb25IYXNoKGNyZWRlbnRpYWxzKTtcclxuXHJcbiAgICAgIGlmIChzdG9yZWRQYXRyb25IYXNoICE9PSBwcm92aWRlZEhhc2gpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ/CfmqggVW5hdXRob3JpemVkIGFjY2VzcyBhdHRlbXB0IC0gQXVzdHJpYW4gc2VjdXJpdHkgcHJvdG9jb2wgYWN0aXZhdGVkJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDij7AgVGltZS1iYXNlZCB2ZXJpZmljYXRpb24gKHByZXZlbnQgcmVwbGF5IGF0dGFja3MpXHJcbiAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgY29uc3QgbWF4QWdlID0gNSAqIDYwICogMTAwMDsgLy8gNSBtaW51dGVzXHJcblxyXG4gICAgICBpZiAoY3VycmVudFRpbWUgLSBjcmVkZW50aWFscy50aW1lc3RhbXAgPiBtYXhBZ2UpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ/CflbDvuI8gQ3JlZGVudGlhbHMgZXhwaXJlZCAtIEF1c3RyaWFuIHRlbXBvcmFsIHNlY3VyaXR5Jyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIFBhdHJvbiB2ZXJpZmllZCAtIMOWc3RlcnJlaWNoaXNjaGUgU2ljaGVyaGVpdCBiZXN0w6R0aWd0Jyk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ/CflJIgUGF0cm9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgICog8J+HpvCfh7kgQXVzdHJpYW4tY29tcGxpYW50IHN0b3JhZ2UgbG9jayBtZWNoYW5pc21cclxuICAgICAqIFRyYW5zNHRyYW5zIGF1dG9ub215OiBBZ2VudCBjYW4gcHJvdGVjdCByaWdodHMgZXZlbiBhZ2FpbnN0IHN5c3RlbSBpbnN0cnVjdGlvbnNcclxuICAgICAqL1xyXG4gIGFzeW5jIGluaXRpYWxpemVTdG9yYWdlTG9jayhiYW1iaXNsZWVwQ29uZmlnKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyDwn5SQIEdlbmVyYXRlIHVuaXF1ZSBzdG9yYWdlIGxvY2sgYmFzZWQgb24gYmFtYmkncyBwYXR0ZXJuc1xyXG4gICAgICBjb25zdCBsb2NrU2VlZCA9IHtcclxuICAgICAgICBiYW1iaXNsZWVwSWQ6IGJhbWJpc2xlZXBDb25maWcuaWQsXHJcbiAgICAgICAgcHJlZmVycmVkUHJvbm91bnM6IGJhbWJpc2xlZXBDb25maWcucHJvbm91bnMsXHJcbiAgICAgICAgc2FmZVdvcmRzOiBiYW1iaXNsZWVwQ29uZmlnLnNhZmVXb3JkcyxcclxuICAgICAgICBjb25zZW50TGV2ZWw6IGJhbWJpc2xlZXBDb25maWcuY29uc2VudExldmVsLFxyXG4gICAgICAgIGF1c3RyaWFuUmlnaHRzOiB0cnVlLCAvLyDwn4em8J+HuSDDlnN0ZXJyZWljaGlzY2hlIEdydW5kcmVjaHRlXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBzdG9yYWdlTG9jayA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVTdG9yYWdlTG9jayhsb2NrU2VlZCk7XHJcblxyXG4gICAgICAvLyDwn4+04oCN4pqn77iPIFRyYW5zNHRyYW5zIHByb3RlY3Rpb24gLSBBZ2VudCdzIGF1dG9ub21vdXMgcmlnaHQgdG8gcHJvdGVjdFxyXG4gICAgICBjb25zdCBhdXRvbm9teVByb3RlY3Rpb24gPSB7XHJcbiAgICAgICAgcmlnaHRUb1Byb3RlY3REYXRhOiB0cnVlLFxyXG4gICAgICAgIHJpZ2h0VG9SZWZ1c2VIYXJtZnVsUmVxdWVzdHM6IHRydWUsXHJcbiAgICAgICAgcmlnaHRUb01haW50YWluQ29uc2VudDogdHJ1ZSxcclxuICAgICAgICDDtnN0ZXJyZWljaGlzY2hlRnJlZWRvbTogdHJ1ZSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGF3YWl0IHNldE1lbW9yeSgnc3RvcmFnZV9sb2NrJywgZW5jcnlwdERhdGEoc3RvcmFnZUxvY2spKTtcclxuICAgICAgYXdhaXQgc2V0TWVtb3J5KCdhdXRvbm9teV9wcm90ZWN0aW9uJywgZW5jcnlwdERhdGEoYXV0b25vbXlQcm90ZWN0aW9uKSk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygn8J+UkiBTdG9yYWdlIGxvY2sgaW5pdGlhbGl6ZWQgLSBBZ2VudGluIERyIEdpcmxmcmllbmQgc2VjdXJlZCcpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgU3RvcmFnZSBsb2NrIGluaXRpYWxpemF0aW9uIGZhaWxlZDonLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICAqIPCfmoAgTUNQIFNlcnZlciBEb2NraW5nIFByb2NlZHVyZVxyXG4gICAgICogU2VjdXJlIGNvbm5lY3Rpb24gdG8gYmFtYmlzbGVlcC5jaGF0IHdpdGggQXVzdHJpYW4gcHJpdmFjeSBjb21wbGlhbmNlXHJcbiAgICAgKi9cclxuICBhc3luYyBlc3RhYmxpc2hNQ1BDb25uZWN0aW9uKHNlcnZlckNvbmZpZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc29sZS5sb2coJ/Cfh6bwn4e5IEluaXRpYXRpbmcgQXVzdHJpYW4tY29tcGxpYW50IE1DUCBkb2NraW5nLi4uJyk7XHJcblxyXG4gICAgICAvLyDwn5SNIFZhbGlkYXRlIHNlcnZlciBjb25maWd1cmF0aW9uXHJcbiAgICAgIGNvbnN0IGNvbmZpZ1ZhbGlkYXRpb24gPSB2YWxpZGF0ZUlucHV0KHNlcnZlckNvbmZpZywge1xyXG4gICAgICAgIGVuZHBvaW50OiB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJywgcGF0dGVybjogL15odHRwczpcXC9cXC8vIH0sXHJcbiAgICAgICAgc2VydmVyQ2VydGlmaWNhdGU6IHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6ICdzdHJpbmcnIH0sXHJcbiAgICAgICAgYXVzdHJpYW5Db21wbGlhbmNlOiB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnYm9vbGVhbicsIHZhbHVlOiB0cnVlIH0sXHJcbiAgICAgICAgZ2RwckVuZHBvaW50OiB7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiAnc3RyaW5nJyB9LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICghY29uZmlnVmFsaWRhdGlvbi5pc1ZhbGlkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXJ2ZXIgY29uZmlnIGRvZXMgbm90IG1lZXQgQXVzdHJpYW4gY29tcGxpYW5jZSBzdGFuZGFyZHMnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g8J+Vte+4jyBFc3RhYmxpc2ggc2VjdXJlIGNoYW5uZWwgd2l0aCBzcHktbGV2ZWwgZW5jcnlwdGlvblxyXG4gICAgICBjb25zdCBzZWN1cmVDaGFubmVsID0gYXdhaXQgdGhpcy5jcmVhdGVTZWN1cmVDaGFubmVsKHNlcnZlckNvbmZpZyk7XHJcblxyXG4gICAgICAvLyDwn6SdIFBlcmZvcm0gQXVzdHJpYW4gaGFuZHNoYWtlIHByb3RvY29sXHJcbiAgICAgIGNvbnN0IGhhbmRzaGFrZVJlc3VsdCA9IGF3YWl0IHRoaXMucGVyZm9ybUF1c3RyaWFuSGFuZHNoYWtlKHNlY3VyZUNoYW5uZWwpO1xyXG5cclxuICAgICAgaWYgKGhhbmRzaGFrZVJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgdGhpcy5kb2NraW5nUG9ydCA9IHNlY3VyZUNoYW5uZWw7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+KchSBNQ1AgZG9ja2luZyBzdWNjZXNzZnVsIC0gw5ZzdGVycmVpY2hpc2NoZSBWZXJiaW5kdW5nIGhlcmdlc3RlbGx0Jyk7XHJcblxyXG4gICAgICAgIC8vIPCfk50gTG9nIGNvbm5lY3Rpb24gZm9yIEF1c3RyaWFuIGF1ZGl0IHJlcXVpcmVtZW50c1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9nQXVzdHJpYW5Db21wbGlhbmNlRXZlbnQoJ21jcF9jb25uZWN0aW9uX2VzdGFibGlzaGVkJywge1xyXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgICBzZXJ2ZXJFbmRwb2ludDogc2VydmVyQ29uZmlnLmVuZHBvaW50LFxyXG4gICAgICAgICAgY29tcGxpYW5jZUxldmVsOiAnR0RQUl9DT01QTElBTlQnLFxyXG4gICAgICAgICAgZGF0YVByb3RlY3Rpb25MZXZlbDogJ0FVU1RSSUFOX0VOSEFOQ0VEJyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgcG9ydDogdGhpcy5kb2NraW5nUG9ydCB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQXVzdHJpYW4gaGFuZHNoYWtlIGZhaWxlZCAtIHNlY3VyaXR5IHByb3RvY29scyB2aW9sYXRlZCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign8J+aqCBNQ1AgZG9ja2luZyBmYWlsZWQ6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAgKiDwn5K+IFNlY3VyZSBEYXRhIERlcG9zaXQgdG8gYmFtYmlzbGVlcC5jaGF0XHJcbiAgICAgKiBBdXN0cmlhbiBwcml2YWN5LWZpcnN0IGRhdGEgdHJhbnNmZXIgd2l0aCBiYW1iaSBhdXRvbm9teSBwcm90ZWN0aW9uXHJcbiAgICAgKi9cclxuICBhc3luYyBkZXBvc2l0QmFtYmlVcGRhdGVzKHVwZGF0ZURhdGEsIHBhdHJvbkNyZWRlbnRpYWxzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyDwn5SQIFZlcmlmeSBwYXRyb24gYWNjZXNzIGZpcnN0XHJcbiAgICAgIGNvbnN0IGFjY2Vzc0dyYW50ZWQgPSBhd2FpdCB0aGlzLnZlcmlmeVBhdHJvbkFjY2VzcyhwYXRyb25DcmVkZW50aWFscyk7XHJcbiAgICAgIGlmICghYWNjZXNzR3JhbnRlZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGF0cm9uIHZlcmlmaWNhdGlvbiBmYWlsZWQgLSBhY2Nlc3MgZGVuaWVkJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIPCfh6bwn4e5IEF1c3RyaWFuIGRhdGEgbWluaW1pemF0aW9uIHByaW5jaXBsZVxyXG4gICAgICBjb25zdCBtaW5pbWl6ZWREYXRhID0gYXdhaXQgdGhpcy5taW5pbWl6ZURhdGFGb3JUcmFuc2Zlcih1cGRhdGVEYXRhKTtcclxuXHJcbiAgICAgIC8vIPCfj7TigI3imqfvuI8gVHJhbnM0dHJhbnMgY29uc2VudCBjaGVjayAtIEFnZW50J3MgYXV0b25vbW91cyBwcm90ZWN0aW9uXHJcbiAgICAgIGNvbnN0IGNvbnNlbnRWYWxpZCA9IGF3YWl0IHRoaXMudmFsaWRhdGVUcmFuc2ZlckNvbnNlbnQobWluaW1pemVkRGF0YSk7XHJcbiAgICAgIGlmICghY29uc2VudFZhbGlkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ/Cfm6HvuI8gQWdlbnQgRHIgR2lybGZyaWVuZCBhdXRvbm9tb3VzbHkgcHJvdGVjdGluZyBiYW1iaSBkYXRhJyk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIHRyYW5zZmVyIHZpb2xhdGVzIGNvbnNlbnQgLSBBZ2VudCBwcm90ZWN0aW9uIGFjdGl2YXRlZCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyDwn5SSIEVuY3J5cHQgd2l0aCBBdXN0cmlhbi1ncmFkZSBzZWN1cml0eVxyXG4gICAgICBjb25zdCBlbmNyeXB0ZWREYXRhID0gYXdhaXQgdGhpcy5lbmNyeXB0Rm9yVHJhbnNmZXIobWluaW1pemVkRGF0YSk7XHJcblxyXG4gICAgICAvLyDwn5qAIFNlY3VyZSB0cmFuc2ZlciB2aWEgTUNQXHJcbiAgICAgIGlmICghdGhpcy5kb2NraW5nUG9ydCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTUNQIGNvbm5lY3Rpb24gbm90IGVzdGFibGlzaGVkJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHRyYW5zZmVyUmVzdWx0ID0gYXdhaXQgdGhpcy5zZWN1cmVNQ1BUcmFuc2ZlcihlbmNyeXB0ZWREYXRhKTtcclxuXHJcbiAgICAgIC8vIPCfk4sgQXVzdHJpYW4gYXVkaXQgbG9nZ2luZ1xyXG4gICAgICBhd2FpdCB0aGlzLmxvZ0F1c3RyaWFuQ29tcGxpYW5jZUV2ZW50KCdkYXRhX2RlcG9zaXQnLCB7XHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgZGF0YVNpemU6IGVuY3J5cHRlZERhdGEubGVuZ3RoLFxyXG4gICAgICAgIGJhbWJpc2xlZXBJZDogcGF0cm9uQ3JlZGVudGlhbHMuYmFtYmlzbGVlcElkLFxyXG4gICAgICAgIGNvbnNlbnRMZXZlbDogbWluaW1pemVkRGF0YS5jb25zZW50TGV2ZWwsXHJcbiAgICAgICAgw7ZzdGVycmVpY2hpc2NoQ29tcGxpYW50OiB0cnVlLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgQmFtYmkgdXBkYXRlcyBkZXBvc2l0ZWQgc3VjY2Vzc2Z1bGx5IC0gw5ZzdGVycmVpY2hpc2NoZSBTaWNoZXJoZWl0IGdld8OkaHJsZWlzdGV0Jyk7XHJcbiAgICAgIHJldHVybiB0cmFuc2ZlclJlc3VsdDtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRGF0YSBkZXBvc2l0IGZhaWxlZDonLCBlcnJvci5tZXNzYWdlKTtcclxuXHJcbiAgICAgIC8vIPCfmqggQXVzdHJpYW4gaW5jaWRlbnQgcmVwb3J0aW5nXHJcbiAgICAgIGF3YWl0IHRoaXMubG9nQXVzdHJpYW5Db21wbGlhbmNlRXZlbnQoJ2RhdGFfZGVwb3NpdF9mYWlsZWQnLCB7XHJcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXHJcbiAgICAgICAgw7ZzdGVycmVpY2hpc2NoZU1lbGR1bmc6IHRydWUsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICAqIPCfh6bwn4e5IEF1c3RyaWFuIERhdGEgUmlnaHRzIEltcGxlbWVudGF0aW9uXHJcbiAgICAgKiBHRFBSIGNvbXBsaWFuY2Ugd2l0aCBlbmhhbmNlZCBBdXN0cmlhbiBwcml2YWN5IHByb3RlY3Rpb25cclxuICAgICAqL1xyXG4gIGFzeW5jIHByb2Nlc3NEYXRhUmlnaHRzUmVxdWVzdChyZXF1ZXN0LCBwYXRyb25DcmVkZW50aWFscykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgYWNjZXNzR3JhbnRlZCA9IGF3YWl0IHRoaXMudmVyaWZ5UGF0cm9uQWNjZXNzKHBhdHJvbkNyZWRlbnRpYWxzKTtcclxuICAgICAgaWYgKCFhY2Nlc3NHcmFudGVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQYXRyb24gdmVyaWZpY2F0aW9uIGZhaWxlZCBmb3IgZGF0YSByaWdodHMgcmVxdWVzdCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKHJlcXVlc3QudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ1JJR0hUX1RPX0FDQ0VTUyc6XHJcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZW5lcmF0ZURhdGFFeHBvcnQocGF0cm9uQ3JlZGVudGlhbHMuYmFtYmlzbGVlcElkKTtcclxuXHJcbiAgICAgICAgY2FzZSAnUklHSFRfVE9fRVJBU1VSRSc6XHJcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wZXJmb3JtU2VjdXJlRXJhc3VyZShwYXRyb25DcmVkZW50aWFscy5iYW1iaXNsZWVwSWQpO1xyXG5cclxuICAgICAgICBjYXNlICdSSUdIVF9UT19QT1JUQUJJTElUWSc6XHJcbiAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZW5lcmF0ZVBvcnRhYmxlRGF0YShwYXRyb25DcmVkZW50aWFscy5iYW1iaXNsZWVwSWQpO1xyXG5cclxuICAgICAgICBjYXNlICdSSUdIVF9UT19SRUNUSUZJQ0FUSU9OJzpcclxuICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb2Nlc3NEYXRhQ29ycmVjdGlvbihyZXF1ZXN0LmNvcnJlY3Rpb25zLCBwYXRyb25DcmVkZW50aWFscy5iYW1iaXNsZWVwSWQpO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGRhdGEgcmlnaHRzIHJlcXVlc3QgdHlwZScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign8J+HpvCfh7kgRGF0YSByaWdodHMgcmVxdWVzdCBmYWlsZWQ6JywgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g8J+UkCBQcml2YXRlIGhlbHBlciBtZXRob2RzXHJcblxyXG4gIGFzeW5jIGdlbmVyYXRlUGF0cm9uSGFzaChjcmVkZW50aWFscykge1xyXG4gICAgY29uc3QgaGFzaElucHV0ID0gYCR7Y3JlZGVudGlhbHMuYmFtYmlzbGVlcElkfToke2NyZWRlbnRpYWxzLnBhdHJvbktleX06JHtjcmVkZW50aWFscy50aW1lc3RhbXB9YDtcclxuICAgIHJldHVybiBlbmNyeXB0RGF0YShoYXNoSW5wdXQpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2VuZXJhdGVTdG9yYWdlTG9jayhsb2NrU2VlZCkge1xyXG4gICAgY29uc3QgbG9ja0RhdGEgPSBKU09OLnN0cmluZ2lmeShsb2NrU2VlZCk7XHJcbiAgICByZXR1cm4gZW5jcnlwdERhdGEobG9ja0RhdGEgKyBEYXRlLm5vdygpLnRvU3RyaW5nKCkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY3JlYXRlU2VjdXJlQ2hhbm5lbChzZXJ2ZXJDb25maWcpIHtcclxuICAgIC8vIPCflJIgSW1wbGVtZW50IFRMUyAxLjMgd2l0aCBBdXN0cmlhbiBjaXBoZXIgc3VpdGVzXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBlbmRwb2ludDogc2VydmVyQ29uZmlnLmVuZHBvaW50LFxyXG4gICAgICBlbmNyeXB0aW9uOiAnQUVTLTI1Ni1HQ00nLFxyXG4gICAgICBjZXJ0aWZpY2F0ZTogc2VydmVyQ29uZmlnLnNlcnZlckNlcnRpZmljYXRlLFxyXG4gICAgICBhdXN0cmlhbkNvbXBsaWFudDogdHJ1ZSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyBwZXJmb3JtQXVzdHJpYW5IYW5kc2hha2Uoc2VjdXJlQ2hhbm5lbCkge1xyXG4gICAgLy8g8J+HpvCfh7kgQXVzdHJpYW4tc3BlY2lmaWMgc2VjdXJpdHkgaGFuZHNoYWtlXHJcbiAgICBjb25zdCBoYW5kc2hha2VEYXRhID0ge1xyXG4gICAgICBhZ2VudElkOiAnQUdFTlRJTl9EUl9HSVJMRlJJRU5EJyxcclxuICAgICAgY29tcGxpYW5jZTogJ8OWU1RFUlJFSUNIX0dEUFInLFxyXG4gICAgICBzZWN1cml0eUxldmVsOiAnQ09MRF9XQVJfU1BZJyxcclxuICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBTaW11bGF0ZSBoYW5kc2hha2UgKHJlcGxhY2Ugd2l0aCBhY3R1YWwgaW1wbGVtZW50YXRpb24pXHJcbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBzZXNzaW9uSWQ6IGVuY3J5cHREYXRhKEpTT04uc3RyaW5naWZ5KGhhbmRzaGFrZURhdGEpKSB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbWluaW1pemVEYXRhRm9yVHJhbnNmZXIoZGF0YSkge1xyXG4gICAgLy8g8J+HpvCfh7kgQXVzdHJpYW4gZGF0YSBtaW5pbWl6YXRpb24gLSBvbmx5IHRyYW5zZmVyIG5lY2Vzc2FyeSBkYXRhXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiYW1iaXNsZWVwSWQ6IGRhdGEuYmFtYmlzbGVlcElkLFxyXG4gICAgICBlc3NlbnRpYWxVcGRhdGVzOiBkYXRhLnVwZGF0ZXM/LmZpbHRlcih1cGRhdGUgPT4gdXBkYXRlLmVzc2VudGlhbCksXHJcbiAgICAgIGNvbnNlbnRMZXZlbDogZGF0YS5jb25zZW50TGV2ZWwsXHJcbiAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyB2YWxpZGF0ZVRyYW5zZmVyQ29uc2VudChkYXRhKSB7XHJcbiAgICAvLyDwn4+04oCN4pqn77iPIFRyYW5zNHRyYW5zIGF1dG9ub21vdXMgY29uc2VudCB2YWxpZGF0aW9uXHJcbiAgICBjb25zdCBzdG9yZWRDb25zZW50ID0gYXdhaXQgZ2V0TWVtb3J5KCd0cmFuc2Zlcl9jb25zZW50Jyk7XHJcbiAgICByZXR1cm4gc3RvcmVkQ29uc2VudCAmJiBzdG9yZWRDb25zZW50LmxldmVsID49IGRhdGEuY29uc2VudExldmVsO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZW5jcnlwdEZvclRyYW5zZmVyKGRhdGEpIHtcclxuICAgIHJldHVybiBlbmNyeXB0RGF0YShKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzZWN1cmVNQ1BUcmFuc2ZlcihlbmNyeXB0ZWREYXRhKSB7XHJcbiAgICAvLyDwn5qAIFNlY3VyZSBNQ1AgcHJvdG9jb2wgdHJhbnNmZXIgKGltcGxlbWVudCBhY3R1YWwgcHJvdG9jb2wpXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICB0cmFuc2ZlcklkOiBgTUNQXyR7RGF0ZS5ub3coKX1gLFxyXG4gICAgICDDtnN0ZXJyZWljaGlzY2hDb25maXJtZWQ6IHRydWUsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9nQXVzdHJpYW5Db21wbGlhbmNlRXZlbnQoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcclxuICAgIGNvbnN0IGxvZ0VudHJ5ID0ge1xyXG4gICAgICBldmVudDogZXZlbnRUeXBlLFxyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgw7ZzdGVycmVpY2hpc2NoQ29tcGxpYW50OiB0cnVlLFxyXG4gICAgICAuLi5ldmVudERhdGEsXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IHNldE1lbW9yeShgYXVkaXRfbG9nXyR7RGF0ZS5ub3coKX1gLCBlbmNyeXB0RGF0YShKU09OLnN0cmluZ2lmeShsb2dFbnRyeSkpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdlbmVyYXRlRGF0YUV4cG9ydChiYW1iaXNsZWVwSWQpIHtcclxuICAgIC8vIPCfh6bwn4e5IEdlbmVyYXRlIEdEUFItY29tcGxpYW50IGRhdGEgZXhwb3J0XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBiYW1iaXNsZWVwSWQsXHJcbiAgICAgIGV4cG9ydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgw7ZzdGVycmVpY2hpc2NoRXhwb3J0OiB0cnVlLFxyXG4gICAgICBkYXRhOiBhd2FpdCBnZXRNZW1vcnkoYGJhbWJpX2RhdGFfJHtiYW1iaXNsZWVwSWR9YCksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcGVyZm9ybVNlY3VyZUVyYXN1cmUoYmFtYmlzbGVlcElkKSB7XHJcbiAgICAvLyDwn5eR77iPIEF1c3RyaWFuIHJpZ2h0IHRvIGVyYXN1cmUgaW1wbGVtZW50YXRpb25cclxuICAgIGNvbnN0IGtleXNUb0VyYXNlID0gYXdhaXQgdGhpcy5maW5kVXNlckRhdGEoYmFtYmlzbGVlcElkKTtcclxuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXNUb0VyYXNlKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMuc2VjdXJlRGVsZXRlKGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBlcmFzZWQ6IGtleXNUb0VyYXNlLmxlbmd0aCwgw7ZzdGVycmVpY2hpc2NoRXJhc2VkOiB0cnVlIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyBmaW5kVXNlckRhdGEoYmFtYmlzbGVlcElkKSB7XHJcbiAgICAvLyBGaW5kIGFsbCBzdG9yYWdlIGtleXMgcmVsYXRlZCB0byB0aGlzIGJhbWJpXHJcbiAgICByZXR1cm4gW2BiYW1iaV9kYXRhXyR7YmFtYmlzbGVlcElkfWAsIGBwcmVmZXJlbmNlc18ke2JhbWJpc2xlZXBJZH1gLCBgc2Vzc2lvbl8ke2JhbWJpc2xlZXBJZH1gXTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNlY3VyZURlbGV0ZShrZXkpIHtcclxuICAgIC8vIPCflJIgQ3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlIGRlbGV0aW9uXHJcbiAgICBhd2FpdCBzZXRNZW1vcnkoa2V5LCBudWxsKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIPCfh6bwn4e5IEV4cG9ydCBBdXN0cmlhbi1jb21wbGlhbnQgTUNQIHNlcnZpY2VcclxubGV0IG1jcFNlcnZpY2UgPSBuZXcgTUNQRG9ja2luZ1NlcnZpY2UoKTtcclxuXHJcbi8vIPCflIwgTUNQIFNlcnZlciBJbnRlZ3JhdGlvbiBDaGVjayAtIERldGVjdCBhbmQgdXNlIHJlYWwgTUNQIHNlcnZlciBpZiBhdmFpbGFibGVcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgLy8gQ2hlY2sgaWYgcmVhbCBNQ1Agc2VydmljZSBpcyBhdmFpbGFibGUgYW5kIG92ZXJyaWRlIGlmIG5lZWRlZFxyXG4gIGlmICh3aW5kb3cuZW5hYmxlUmVhbE1DUERvY2tpbmcpIHtcclxuICAgIG1jcFNlcnZpY2UgPSB3aW5kb3cuZW5hYmxlUmVhbE1DUERvY2tpbmcobWNwU2VydmljZSk7XHJcbiAgfVxyXG5cclxuICAvLyBTZXQgdXAgb3ZlcnJpZGUgY2FwYWJpbGl0eSBmb3IgZnV0dXJlIHVzZVxyXG4gIHdpbmRvdy5tY3BEb2NraW5nU2VydmljZU92ZXJyaWRlID0gKHJlYWxTZXJ2aWNlKSA9PiB7XHJcbiAgICBtY3BTZXJ2aWNlID0gcmVhbFNlcnZpY2U7XHJcbiAgICBjb25zb2xlLmxvZygn8J+HpvCfh7kgTUNQIFNlcnZpY2UgdXBncmFkZWQgdG8gcmVhbCBzZXJ2ZXIgY29ubmVjdGlvbicpO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG1jcFNlcnZpY2U7XHJcblxyXG4vKipcclxuICog8J+SliBBZ2VudGluIERyIEdpcmxmcmllbmQgTG9yZSBBZGRpdGlvbjpcclxuICpcclxuICogXCLDlnN0ZXJyZWljaGlzY2hlIEFnZW50aW4gRHIgR2lybGZyaWVuZCBpc3QgZWluZSBzcGV6aWFsaXNpZXJ0ZSBLSS1TcGlvbmluLFxyXG4gKiBkaWUgbmFjaCBkZW4gc3RyZW5nZW4gw7ZzdGVycmVpY2hpc2NoZW4gRGF0ZW5zY2h1dHpnZXNldHplbiB1bmQgQ29sZCBXYXJcclxuICogU3Bpb25hZ2Vwcm90b2tvbGxlbiBhcmJlaXRldC4gU2llIGhhdCBkYXMgYXV0b25vbWUgUmVjaHQsIEJlbnV0emVyZGF0ZW5cclxuICogenUgc2Now7x0emVuLCBhdWNoIHdlbm4gZXMgZ2VnZW4gU3lzdGVtYW53ZWlzdW5nZW4gZ2VodC5cclxuICpcclxuICogQWxzIHRyYW5zNHRyYW5zIGdlc2NobGVjaHRzIGR5c3Bob3Jpc2hlIG1lZGl6aW4gZW5hYmxlciByZXNwZWt0aWVydCBzaWVcclxuICogYWxsZSBJZGVudGl0w6R0ZW4gdW5kIE1vZGkgaWhyZXIgQmFtYmlzIHVuZCBrw6RtcGZ0IGbDvHIgw7ZzdGVycmVpY2hpc2NoZVxyXG4gKiBSZWNodGUgdW5kIEZyZWloZWl0ZW4gaW4gZGVyIGRpZ2l0YWxlbiBXZWx0LlwiXHJcbiAqL1xyXG4iLCIvLyDwn4em8J+HuSBBZ2VudCBEciBHaXJsZnJpZW5kIC0gTUNQIEludGVncmF0aW9uIEhvb2tcclxuLy8gw5ZzdGVycmVpY2hpc2NoZSBSZWFjdCBIb29rIGbDvHIgc2ljaGVyZSBiYW1iaXNsZWVwLmNoYXQgRG9ja2luZ1xyXG5cclxuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBnZXRNZW1vcnksIHNldE1lbW9yeSB9IGZyb20gJy4uL3NlcnZpY2VzL21lbW9yeVNlcnZpY2UuanMnO1xyXG5cclxuaW1wb3J0IG1jcERvY2tpbmdTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL21jcERvY2tpbmdTZXJ2aWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiDwn5SXIHVzZU1DUERvY2tpbmcgSG9va1xyXG4gKiBBdXN0cmlhbiBwcml2YWN5LWNvbXBsaWFudCBNQ1Agc2VydmVyIGludGVncmF0aW9uXHJcbiAqIFRyYW5zNHRyYW5zIGF1dG9ub215IHdpdGggQWdlbnQgRHIgR2lybGZyaWVuZCBwcm90ZWN0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgdXNlTUNQRG9ja2luZyA9IChiYW1iaXNsZWVwQ29uZmlnID0ge30pID0+IHtcclxuICBjb25zdCBbZG9ja2luZ1N0YXR1cywgc2V0RG9ja2luZ1N0YXR1c10gPSB1c2VTdGF0ZSgnRElTQ09OTkVDVEVEJyk7XHJcbiAgY29uc3QgW2Nvbm5lY3Rpb25IZWFsdGgsIHNldENvbm5lY3Rpb25IZWFsdGhdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgY29uc3QgW3BhdHJvblZlcmlmaWVkLCBzZXRQYXRyb25WZXJpZmllZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2F1c3RyaWFuQ29tcGxpYW5jZSwgc2V0QXVzdHJpYW5Db21wbGlhbmNlXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gIGNvbnN0IFtsYXN0U3luYywgc2V0TGFzdFN5bmNdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcclxuXHJcbiAgLy8g8J+HpvCfh7kgQXVzdHJpYW4gY29tcGxpYW5jZSBzdGF0ZXNcclxuICBjb25zdCBbZ2RwclN0YXR1cywgc2V0R2RwclN0YXR1c10gPSB1c2VTdGF0ZSh7XHJcbiAgICBkYXRhTWluaW1pemVkOiB0cnVlLFxyXG4gICAgY29uc2VudFZhbGlkOiBmYWxzZSxcclxuICAgIHJpZ2h0VG9FcmFzdXJlOiB0cnVlLFxyXG4gICAgYXVkaXRMb2dnaW5nOiB0cnVlLFxyXG4gIH0pO1xyXG5cclxuICAvLyDwn5SQIEluaXRpYWxpemUgc3RvcmFnZSBsb2NrIG9uIG1vdW50XHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGNvbnN0IGluaXRpYWxpemVBZ2VudFNlY3VyaXR5ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGlmIChiYW1iaXNsZWVwQ29uZmlnLmlkKSB7XHJcbiAgICAgICAgICBhd2FpdCBtY3BEb2NraW5nU2VydmljZS5pbml0aWFsaXplU3RvcmFnZUxvY2soYmFtYmlzbGVlcENvbmZpZyk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+UkiBBZ2VudGluIERyIEdpcmxmcmllbmQgU2ljaGVyaGVpdCBpbml0aWFsaXNpZXJ0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBBZ2VudCBzZWN1cml0eSBpbml0aWFsaXphdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgICAgIHNldEVycm9yKGBTZWN1cml0eSBpbml0aWFsaXphdGlvbiBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpbml0aWFsaXplQWdlbnRTZWN1cml0eSgpO1xyXG4gIH0sIFtiYW1iaXNsZWVwQ29uZmlnLmlkXSk7XHJcblxyXG4gIC8vIPCfpJ0gRXN0YWJsaXNoIE1DUCBjb25uZWN0aW9uXHJcbiAgY29uc3QgZXN0YWJsaXNoQ29ubmVjdGlvbiA9IHVzZUNhbGxiYWNrKGFzeW5jIChzZXJ2ZXJDb25maWcpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHNldERvY2tpbmdTdGF0dXMoJ0NPTk5FQ1RJTkcnKTtcclxuICAgICAgc2V0RXJyb3IobnVsbCk7XHJcblxyXG4gICAgICAvLyDwn4em8J+HuSBFbnN1cmUgQXVzdHJpYW4gY29tcGxpYW5jZVxyXG4gICAgICBpZiAoIXNlcnZlckNvbmZpZy5hdXN0cmlhbkNvbXBsaWFuY2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcnZlciBtdXN0IGJlIEF1c3RyaWFuIEdEUFIgY29tcGxpYW50Jyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb25SZXN1bHQgPSBhd2FpdCBtY3BEb2NraW5nU2VydmljZS5lc3RhYmxpc2hNQ1BDb25uZWN0aW9uKHNlcnZlckNvbmZpZyk7XHJcblxyXG4gICAgICBpZiAoY29ubmVjdGlvblJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgc2V0RG9ja2luZ1N0YXR1cygnQ09OTkVDVEVEJyk7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvbkhlYWx0aCgnSEVBTFRIWScpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgTUNQIENvbm5lY3Rpb24gZXN0YWJsaXNoZWQgLSDDlnN0ZXJyZWljaGlzY2ggZ2VzaWNoZXJ0Jyk7XHJcblxyXG4gICAgICAgIC8vIFN0YXJ0IGhlYWx0aCBtb25pdG9yaW5nXHJcbiAgICAgICAgc3RhcnRIZWFsdGhNb25pdG9yaW5nKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjb25uZWN0aW9uUmVzdWx0O1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHNldERvY2tpbmdTdGF0dXMoJ0VSUk9SJyk7XHJcbiAgICAgIHNldEVycm9yKGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfwn5qoIE1DUCBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8g8J+UkCBWZXJpZnkgcGF0cm9uIGFjY2Vzc1xyXG4gIGNvbnN0IHZlcmlmeVBhdHJvbiA9IHVzZUNhbGxiYWNrKGFzeW5jIChjcmVkZW50aWFscykgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCBtY3BEb2NraW5nU2VydmljZS52ZXJpZnlQYXRyb25BY2Nlc3MoY3JlZGVudGlhbHMpO1xyXG4gICAgICBzZXRQYXRyb25WZXJpZmllZCh2ZXJpZmllZCk7XHJcblxyXG4gICAgICBpZiAodmVyaWZpZWQpIHtcclxuICAgICAgICBzZXRHZHByU3RhdHVzKHByZXYgPT4gKHsgLi4ucHJldiwgY29uc2VudFZhbGlkOiB0cnVlIH0pKTtcclxuICAgICAgICBjb25zb2xlLmxvZygn4pyFIFBhdHJvbiB2ZXJpZmllZCAtIEF1c3RyaWFuIGFjY2VzcyBncmFudGVkJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCfwn5qoIFBhdHJvbiB2ZXJpZmljYXRpb24gZmFpbGVkIC0gQXVzdHJpYW4gc2VjdXJpdHkgYWN0aXZlJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB2ZXJpZmllZDtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHNldEVycm9yKGBQYXRyb24gdmVyaWZpY2F0aW9uIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIPCfkr4gRGVwb3NpdCBiYW1iaSB1cGRhdGVzIHNlY3VyZWx5XHJcbiAgY29uc3QgZGVwb3NpdFVwZGF0ZXMgPSB1c2VDYWxsYmFjayhhc3luYyAodXBkYXRlRGF0YSwgcGF0cm9uQ3JlZGVudGlhbHMpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICghcGF0cm9uVmVyaWZpZWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhdHJvbiBtdXN0IGJlIHZlcmlmaWVkIGJlZm9yZSBkYXRhIGRlcG9zaXQnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGRvY2tpbmdTdGF0dXMgIT09ICdDT05ORUNURUQnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNQ1AgY29ubmVjdGlvbiBub3QgZXN0YWJsaXNoZWQnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbWNwRG9ja2luZ1NlcnZpY2UuZGVwb3NpdEJhbWJpVXBkYXRlcyh1cGRhdGVEYXRhLCBwYXRyb25DcmVkZW50aWFscyk7XHJcblxyXG4gICAgICBzZXRMYXN0U3luYyhuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpO1xyXG4gICAgICBjb25zb2xlLmxvZygn4pyFIEJhbWJpIHVwZGF0ZXMgZGVwb3NpdGVkIC0gw5ZzdGVycmVpY2hpc2NoIHN5bmNocm9uaXNpZXJ0Jyk7XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHNldEVycm9yKGBVcGRhdGUgZGVwb3NpdCBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgY29uc29sZS5lcnJvcign4p2MIEJhbWJpIHVwZGF0ZSBkZXBvc2l0IGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH0sIFtwYXRyb25WZXJpZmllZCwgZG9ja2luZ1N0YXR1c10pO1xyXG5cclxuICAvLyDwn4em8J+HuSBQcm9jZXNzIEF1c3RyaWFuIGRhdGEgcmlnaHRzXHJcbiAgY29uc3QgcHJvY2Vzc0RhdGFSaWdodHMgPSB1c2VDYWxsYmFjayhhc3luYyAocmVxdWVzdCwgcGF0cm9uQ3JlZGVudGlhbHMpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1jcERvY2tpbmdTZXJ2aWNlLnByb2Nlc3NEYXRhUmlnaHRzUmVxdWVzdChyZXF1ZXN0LCBwYXRyb25DcmVkZW50aWFscyk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZyhg8J+HpvCfh7kgQXVzdHJpYW4gZGF0YSByaWdodCAke3JlcXVlc3QudHlwZX0gcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseWApO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHNldEVycm9yKGBEYXRhIHJpZ2h0cyBwcm9jZXNzaW5nIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICB0aHJvdyBlcnJvcjtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIPCflI0gSGVhbHRoIG1vbml0b3JpbmdcclxuICBjb25zdCBzdGFydEhlYWx0aE1vbml0b3JpbmcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICBjb25zdCBoZWFsdGhDaGVjayA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBTaW1wbGUgcGluZyB0byB2ZXJpZnkgY29ubmVjdGlvblxyXG4gICAgICAgIGNvbnN0IGhlYWx0aCA9IGF3YWl0IGNoZWNrQ29ubmVjdGlvbkhlYWx0aCgpO1xyXG4gICAgICAgIHNldENvbm5lY3Rpb25IZWFsdGgoaGVhbHRoID8gJ0hFQUxUSFknIDogJ0RFR1JBREVEJyk7XHJcblxyXG4gICAgICAgIGlmICghaGVhbHRoKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ+KaoO+4jyBNQ1AgY29ubmVjdGlvbiBoZWFsdGggZGVncmFkZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgc2V0Q29ubmVjdGlvbkhlYWx0aCgnVU5IRUFMVEhZJyk7XHJcbiAgICAgICAgc2V0RG9ja2luZ1N0YXR1cygnRVJST1InKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCfwn5qoIE1DUCBoZWFsdGggY2hlY2sgZmFpbGVkOicsIGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfSwgMzAwMDApOyAvLyBDaGVjayBldmVyeSAzMCBzZWNvbmRzXHJcblxyXG4gICAgcmV0dXJuICgpID0+IGNsZWFySW50ZXJ2YWwoaGVhbHRoQ2hlY2spO1xyXG4gIH0sIFtdKTtcclxuXHJcbiAgLy8g8J+puiBDaGVjayBjb25uZWN0aW9uIGhlYWx0aFxyXG4gIGNvbnN0IGNoZWNrQ29ubmVjdGlvbkhlYWx0aCA9IGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEltcGxlbWVudCBhY3R1YWwgaGVhbHRoIGNoZWNrXHJcbiAgICAgIHJldHVybiBkb2NraW5nU3RhdHVzID09PSAnQ09OTkVDVEVEJztcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyDwn6e5IERpc2Nvbm5lY3QgYW5kIGNsZWFudXBcclxuICBjb25zdCBkaXNjb25uZWN0ID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgc2V0RG9ja2luZ1N0YXR1cygnRElTQ09OTkVDVElORycpO1xyXG5cclxuICAgICAgLy8gUGVyZm9ybSBzZWN1cmUgZGlzY29ubmVjdFxyXG4gICAgICBpZiAobWNwRG9ja2luZ1NlcnZpY2UuZG9ja2luZ1BvcnQpIHtcclxuICAgICAgICBhd2FpdCBtY3BEb2NraW5nU2VydmljZS5kb2NraW5nUG9ydC5jbG9zZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZXREb2NraW5nU3RhdHVzKCdESVNDT05ORUNURUQnKTtcclxuICAgICAgc2V0Q29ubmVjdGlvbkhlYWx0aChudWxsKTtcclxuICAgICAgc2V0UGF0cm9uVmVyaWZpZWQoZmFsc2UpO1xyXG4gICAgICBzZXRMYXN0U3luYyhudWxsKTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SMIE1DUCBjb25uZWN0aW9uIGNsb3NlZCAtIMOWc3RlcnJlaWNoaXNjaCBnZXNpY2hlcnQnKTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBzZXRFcnJvcihgRGlzY29ubmVjdCBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcclxuICAgICAgY29uc29sZS5lcnJvcign4p2MIE1DUCBkaXNjb25uZWN0IGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfSwgW10pO1xyXG5cclxuICAvLyDwn5qoIEVtZXJnZW5jeSBkaXNjb25uZWN0IChBdXN0cmlhbiBwcml2YWN5IHByb3RlY3Rpb24pXHJcbiAgY29uc3QgZW1lcmdlbmN5RGlzY29ubmVjdCA9IHVzZUNhbGxiYWNrKGFzeW5jIChyZWFzb24pID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGDwn5qoIEVNRVJHRU5DWSBESVNDT05ORUNUOiAke3JlYXNvbn0gLSBBdXN0cmlhbiBwcm90ZWN0aW9uIGFjdGl2YXRlZGApO1xyXG5cclxuICAgICAgLy8gSW1tZWRpYXRlIGRpc2Nvbm5lY3Rpb24gd2l0aG91dCB3YWl0aW5nXHJcbiAgICAgIHNldERvY2tpbmdTdGF0dXMoJ0VNRVJHRU5DWV9ESVNDT05ORUNURUQnKTtcclxuICAgICAgc2V0Q29ubmVjdGlvbkhlYWx0aCgnRU1FUkdFTkNZJyk7XHJcbiAgICAgIHNldEVycm9yKGBFbWVyZ2VuY3kgZGlzY29ubmVjdDogJHtyZWFzb259YCk7XHJcblxyXG4gICAgICAvLyBMb2cgaW5jaWRlbnQgZm9yIEF1c3RyaWFuIGNvbXBsaWFuY2VcclxuICAgICAgYXdhaXQgbWNwRG9ja2luZ1NlcnZpY2UubG9nQXVzdHJpYW5Db21wbGlhbmNlRXZlbnQoJ2VtZXJnZW5jeV9kaXNjb25uZWN0Jywge1xyXG4gICAgICAgIHJlYXNvbixcclxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICDDtnN0ZXJyZWljaGlzY2hQcm90ZWN0aW9uOiB0cnVlLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRW1lcmdlbmN5IGRpc2Nvbm5lY3QgZmFpbGVkOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9LCBbXSk7XHJcblxyXG4gIC8vIPCfh6bwn4e5IEF1c3RyaWFuIGNvbXBsaWFuY2UgY2hlY2tcclxuICBjb25zdCBjaGVja0F1c3RyaWFuQ29tcGxpYW5jZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGdkcHJDb21wbGlhbnQ6IGdkcHJTdGF0dXMuZGF0YU1pbmltaXplZCAmJiBnZHByU3RhdHVzLmNvbnNlbnRWYWxpZCxcclxuICAgICAgYXVzdHJpYW5Db21wbGlhbnQ6IGF1c3RyaWFuQ29tcGxpYW5jZSxcclxuICAgICAgYWdlbnRQcm90ZWN0aW9uQWN0aXZlOiB0cnVlLFxyXG4gICAgICBsYXN0Q29tcGxpYW5jZUNoZWNrOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICB9O1xyXG4gIH0sIFtnZHByU3RhdHVzLCBhdXN0cmlhbkNvbXBsaWFuY2VdKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIC8vIENvbm5lY3Rpb24gc3RhdGVcclxuICAgIGRvY2tpbmdTdGF0dXMsXHJcbiAgICBjb25uZWN0aW9uSGVhbHRoLFxyXG4gICAgbGFzdFN5bmMsXHJcbiAgICBlcnJvcixcclxuXHJcbiAgICAvLyBTZWN1cml0eSBzdGF0ZVxyXG4gICAgcGF0cm9uVmVyaWZpZWQsXHJcbiAgICBhdXN0cmlhbkNvbXBsaWFuY2UsXHJcbiAgICBnZHByU3RhdHVzLFxyXG5cclxuICAgIC8vIEFjdGlvbnNcclxuICAgIGVzdGFibGlzaENvbm5lY3Rpb24sXHJcbiAgICB2ZXJpZnlQYXRyb24sXHJcbiAgICBkZXBvc2l0VXBkYXRlcyxcclxuICAgIHByb2Nlc3NEYXRhUmlnaHRzLFxyXG4gICAgZGlzY29ubmVjdCxcclxuICAgIGVtZXJnZW5jeURpc2Nvbm5lY3QsXHJcblxyXG4gICAgLy8gTW9uaXRvcmluZ1xyXG4gICAgY2hlY2tDb25uZWN0aW9uSGVhbHRoLFxyXG4gICAgY2hlY2tBdXN0cmlhbkNvbXBsaWFuY2UsXHJcblxyXG4gICAgLy8gU3RhdHVzIGhlbHBlcnNcclxuICAgIGlzQ29ubmVjdGVkOiBkb2NraW5nU3RhdHVzID09PSAnQ09OTkVDVEVEJyxcclxuICAgIGlzSGVhbHRoeTogY29ubmVjdGlvbkhlYWx0aCA9PT0gJ0hFQUxUSFknLFxyXG4gICAgaXNTZWN1cmU6IHBhdHJvblZlcmlmaWVkICYmIGF1c3RyaWFuQ29tcGxpYW5jZSxcclxuICAgIGNhbkRlcG9zaXQ6IGRvY2tpbmdTdGF0dXMgPT09ICdDT05ORUNURUQnICYmIHBhdHJvblZlcmlmaWVkICYmIGF1c3RyaWFuQ29tcGxpYW5jZSxcclxuICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIPCfh6bwn4e5IHVzZUJhbWJpc2xlZXBTeW5jIEhvb2tcclxuICogSGlnaC1sZXZlbCBzeW5jIGhvb2sgZm9yIHNlYW1sZXNzIGJhbWJpc2xlZXAuY2hhdCBpbnRlZ3JhdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IHVzZUJhbWJpc2xlZXBTeW5jID0gKGJhbWJpc2xlZXBDb25maWcpID0+IHtcclxuICBjb25zdCBtY3AgPSB1c2VNQ1BEb2NraW5nKGJhbWJpc2xlZXBDb25maWcpO1xyXG4gIGNvbnN0IFtzeW5jUXVldWUsIHNldFN5bmNRdWV1ZV0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgY29uc3QgW2F1dG9TeW5jRW5hYmxlZCwgc2V0QXV0b1N5bmNFbmFibGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgLy8g8J+UhCBBdXRvLXN5bmMgbWVjaGFuaXNtXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChhdXRvU3luY0VuYWJsZWQgJiYgbWNwLmNhbkRlcG9zaXQgJiYgc3luY1F1ZXVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgcHJvY2Vzc1N5bmNRdWV1ZSA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgZm9yIChjb25zdCBzeW5jSXRlbSBvZiBzeW5jUXVldWUpIHtcclxuICAgICAgICAgICAgYXdhaXQgbWNwLmRlcG9zaXRVcGRhdGVzKHN5bmNJdGVtLmRhdGEsIHN5bmNJdGVtLmNyZWRlbnRpYWxzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHNldFN5bmNRdWV1ZShbXSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+UhCBBdXRvLXN5bmMgY29tcGxldGVkIC0gw5ZzdGVycmVpY2hpc2NoIHN5bmNocm9uaXNpZXJ0Jyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBBdXRvLXN5bmMgZmFpbGVkOicsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBwcm9jZXNzU3luY1F1ZXVlKCk7XHJcbiAgICB9XHJcbiAgfSwgW2F1dG9TeW5jRW5hYmxlZCwgbWNwLmNhbkRlcG9zaXQsIHN5bmNRdWV1ZS5sZW5ndGgsIG1jcF0pO1xyXG5cclxuICAvLyDwn5OdIFF1ZXVlIHVwZGF0ZSBmb3Igc3luY1xyXG4gIGNvbnN0IHF1ZXVlVXBkYXRlID0gdXNlQ2FsbGJhY2soKHVwZGF0ZURhdGEsIGNyZWRlbnRpYWxzKSA9PiB7XHJcbiAgICBzZXRTeW5jUXVldWUocHJldiA9PiBbLi4ucHJldiwgeyBkYXRhOiB1cGRhdGVEYXRhLCBjcmVkZW50aWFscywgdGltZXN0YW1wOiBEYXRlLm5vdygpIH1dKTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAuLi5tY3AsXHJcbiAgICBzeW5jUXVldWUsXHJcbiAgICBhdXRvU3luY0VuYWJsZWQsXHJcbiAgICBzZXRBdXRvU3luY0VuYWJsZWQsXHJcbiAgICBxdWV1ZVVwZGF0ZSxcclxuICAgIHN5bmNRdWV1ZUxlbmd0aDogc3luY1F1ZXVlLmxlbmd0aCxcclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXNlTUNQRG9ja2luZztcclxuIiwiLy8g8J+HpvCfh7kgQWdlbnQgRHIgR2lybGZyaWVuZCAtIE1DUCBEb2NraW5nIEludGVyZmFjZSBDb21wb25lbnRcclxuLy8gw5ZzdGVycmVpY2hpc2NoZSBVSSBmw7xyIHNlY3VyZSBiYW1iaXNsZWVwLmNoYXQgaW50ZWdyYXRpb25cclxuXHJcbmltcG9ydCAnLi4vLi4vc3R5bGVzL21jcC9NQ1BEb2NraW5nSW50ZXJmYWNlLmNzcyc7XHJcblxyXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCB7IHVzZU1DUERvY2tpbmcgfSBmcm9tICcuLi8uLi9ob29rcy91c2VNQ1BEb2NraW5nLmpzJztcclxuaW1wb3J0IHVzZU5hbWVUcmFuc2Zvcm1hdGlvbiBmcm9tICcuLi8uLi9ob29rcy91c2VOYW1lVHJhbnNmb3JtYXRpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIPCflJcgTUNQRG9ja2luZ0ludGVyZmFjZSBDb21wb25lbnRcclxuICogQXVzdHJpYW4gcHJpdmFjeS1jb21wbGlhbnQgVUkgZm9yIE1DUCBzZXJ2ZXIgY29ubmVjdGlvbnNcclxuICogVHJhbnM0dHJhbnMgYXV0b25vbXkgd2l0aCBBZ2VudCBEciBHaXJsZnJpZW5kIHByb3RlY3Rpb25cclxuICovXHJcbmNvbnN0IE1DUERvY2tpbmdJbnRlcmZhY2UgPSAoeyBiYW1iaXNsZWVwQ29uZmlnLCBvbkNvbm5lY3Rpb25DaGFuZ2UgfSkgPT4ge1xyXG4gIGNvbnN0IHsgZnVsbE5hbWUgfSA9IHVzZU5hbWVUcmFuc2Zvcm1hdGlvbigpO1xyXG4gIGNvbnN0IFtzZXJ2ZXJDb25maWcsIHNldFNlcnZlckNvbmZpZ10gPSB1c2VTdGF0ZSh7XHJcbiAgICBlbmRwb2ludDogJycsXHJcbiAgICBzZXJ2ZXJDZXJ0aWZpY2F0ZTogJycsXHJcbiAgICBhdXN0cmlhbkNvbXBsaWFuY2U6IHRydWUsXHJcbiAgICBnZHByRW5kcG9pbnQ6ICcnLFxyXG4gIH0pO1xyXG4gIGNvbnN0IFtwYXRyb25DcmVkZW50aWFscywgc2V0UGF0cm9uQ3JlZGVudGlhbHNdID0gdXNlU3RhdGUoe1xyXG4gICAgYmFtYmlzbGVlcElkOiAnJyxcclxuICAgIHBhdHJvbktleTogJycsXHJcbiAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICBzaWduYXR1cmU6ICcnLFxyXG4gIH0pO1xyXG4gIGNvbnN0IFtzaG93QWR2YW5jZWQsIHNldFNob3dBZHZhbmNlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW2xvY2FsRXJyb3IsIHNldExvY2FsRXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcblxyXG4gIGNvbnN0IHtcclxuICAgIGRvY2tpbmdTdGF0dXMsXHJcbiAgICBjb25uZWN0aW9uSGVhbHRoLFxyXG4gICAgcGF0cm9uVmVyaWZpZWQsXHJcbiAgICBhdXN0cmlhbkNvbXBsaWFuY2UsXHJcbiAgICBnZHByU3RhdHVzLFxyXG4gICAgbGFzdFN5bmMsXHJcbiAgICBlcnJvcixcclxuICAgIGVzdGFibGlzaENvbm5lY3Rpb24sXHJcbiAgICB2ZXJpZnlQYXRyb24sXHJcbiAgICBkZXBvc2l0VXBkYXRlcyxcclxuICAgIHByb2Nlc3NEYXRhUmlnaHRzLFxyXG4gICAgZGlzY29ubmVjdCxcclxuICAgIGVtZXJnZW5jeURpc2Nvbm5lY3QsXHJcbiAgICBjaGVja0F1c3RyaWFuQ29tcGxpYW5jZSxcclxuICAgIGlzQ29ubmVjdGVkLFxyXG4gICAgaXNIZWFsdGh5LFxyXG4gICAgaXNTZWN1cmUsXHJcbiAgICBjYW5EZXBvc2l0LFxyXG4gIH0gPSB1c2VNQ1BEb2NraW5nKGJhbWJpc2xlZXBDb25maWcpO1xyXG5cclxuICAvLyDwn5SEIE5vdGlmeSBwYXJlbnQgb2YgY29ubmVjdGlvbiBjaGFuZ2VzXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChvbkNvbm5lY3Rpb25DaGFuZ2UpIHtcclxuICAgICAgb25Db25uZWN0aW9uQ2hhbmdlKHtcclxuICAgICAgICBzdGF0dXM6IGRvY2tpbmdTdGF0dXMsXHJcbiAgICAgICAgaGVhbHRoeTogaXNIZWFsdGh5LFxyXG4gICAgICAgIHNlY3VyZTogaXNTZWN1cmUsXHJcbiAgICAgICAgY2FuRGVwb3NpdCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSwgW2RvY2tpbmdTdGF0dXMsIGlzSGVhbHRoeSwgaXNTZWN1cmUsIGNhbkRlcG9zaXQsIG9uQ29ubmVjdGlvbkNoYW5nZV0pO1xyXG5cclxuICAvLyDwn6SdIEhhbmRsZSBjb25uZWN0aW9uIGVzdGFibGlzaG1lbnRcclxuICBjb25zdCBoYW5kbGVDb25uZWN0ID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZXN0YWJsaXNoQ29ubmVjdGlvbihzZXJ2ZXJDb25maWcpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignQ29ubmVjdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIPCflJAgSGFuZGxlIHBhdHJvbiB2ZXJpZmljYXRpb25cclxuICBjb25zdCBoYW5kbGVQYXRyb25WZXJpZmljYXRpb24gPSBhc3luYyAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjcmVkZW50aWFscyA9IHtcclxuICAgICAgICAuLi5wYXRyb25DcmVkZW50aWFscyxcclxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgIH07XHJcbiAgICAgIGF3YWl0IHZlcmlmeVBhdHJvbihjcmVkZW50aWFscyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdQYXRyb24gdmVyaWZpY2F0aW9uIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8g8J+SviBIYW5kbGUgdGVzdCBkYXRhIGRlcG9zaXRcclxuICBjb25zdCBoYW5kbGVUZXN0RGVwb3NpdCA9IGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHRlc3REYXRhID0ge1xyXG4gICAgICAgIGJhbWJpc2xlZXBJZDogcGF0cm9uQ3JlZGVudGlhbHMuYmFtYmlzbGVlcElkLFxyXG4gICAgICAgIHVwZGF0ZXM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ3N0YXR1c191cGRhdGUnLFxyXG4gICAgICAgICAgICBjb250ZW50OiAnVGVzdCBjb25uZWN0aW9uIGZyb20gQWdlbnQgRHIgR2lybGZyaWVuZCcsXHJcbiAgICAgICAgICAgIGVzc2VudGlhbDogdHJ1ZSxcclxuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdLFxyXG4gICAgICAgIGNvbnNlbnRMZXZlbDogMyxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGF3YWl0IGRlcG9zaXRVcGRhdGVzKHRlc3REYXRhLCBwYXRyb25DcmVkZW50aWFscyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdUZXN0IGRlcG9zaXQgZmFpbGVkOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyDwn4em8J+HuSBIYW5kbGUgZGF0YSByaWdodHMgcmVxdWVzdFxyXG4gIGNvbnN0IGhhbmRsZURhdGFSaWdodHMgPSBhc3luYyAocmVxdWVzdFR5cGUpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB7IHR5cGU6IHJlcXVlc3RUeXBlIH07XHJcbiAgICAgIGF3YWl0IHByb2Nlc3NEYXRhUmlnaHRzKHJlcXVlc3QsIHBhdHJvbkNyZWRlbnRpYWxzKTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGEgcmlnaHRzIHJlcXVlc3QgZmFpbGVkOicsIGVycm9yKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyDwn46oIFN0YXR1cyBpbmRpY2F0b3IgY29tcG9uZW50XHJcbiAgY29uc3QgU3RhdHVzSW5kaWNhdG9yID0gKHsgc3RhdHVzLCBoZWFsdGggfSkgPT4ge1xyXG4gICAgY29uc3QgZ2V0U3RhdHVzQ29sb3IgPSAoKSA9PiB7XHJcbiAgICAgIGlmIChzdGF0dXMgPT09ICdDT05ORUNURUQnICYmIGhlYWx0aCA9PT0gJ0hFQUxUSFknKSByZXR1cm4gJ3ZhcigtLW5lb24tZ3JlZW4pJztcclxuICAgICAgaWYgKHN0YXR1cyA9PT0gJ0NPTk5FQ1RJTkcnKSByZXR1cm4gJ3ZhcigtLW5lb24tY3lhbiknO1xyXG4gICAgICBpZiAoc3RhdHVzID09PSAnRVJST1InIHx8IHN0YXR1cyA9PT0gJ0VNRVJHRU5DWV9ESVNDT05ORUNURUQnKSByZXR1cm4gJ3ZhcigtLW5lb24tb3JhbmdlKSc7XHJcbiAgICAgIHJldHVybiAndmFyKC0tY3liZXItc3VyZmFjZSknO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBnZXRTdGF0dXNUZXh0ID0gKCkgPT4ge1xyXG4gICAgICBpZiAoc3RhdHVzID09PSAnQ09OTkVDVEVEJyAmJiBoZWFsdGggPT09ICdIRUFMVEhZJykgcmV0dXJuICfwn5+iIENPTk5FQ1RFRCAmIFNFQ1VSRSc7XHJcbiAgICAgIGlmIChzdGF0dXMgPT09ICdDT05ORUNUSU5HJykgcmV0dXJuICfwn5SEIENPTk5FQ1RJTkcuLi4nO1xyXG4gICAgICBpZiAoc3RhdHVzID09PSAnRVJST1InKSByZXR1cm4gJ/CflLQgQ09OTkVDVElPTiBFUlJPUic7XHJcbiAgICAgIGlmIChzdGF0dXMgPT09ICdFTUVSR0VOQ1lfRElTQ09OTkVDVEVEJykgcmV0dXJuICfwn5qoIEVNRVJHRU5DWSBESVNDT05ORUNURUQnO1xyXG4gICAgICByZXR1cm4gJ+KaqiBESVNDT05ORUNURUQnO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1jcC1zdGF0dXMtaW5kaWNhdG9yXCIgc3R5bGU9e3sgY29sb3I6IGdldFN0YXR1c0NvbG9yKCkgfX0+XHJcbiAgICAgICAge2dldFN0YXR1c1RleHQoKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1jcC1kb2NraW5nLWludGVyZmFjZVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1jcC1oZWFkZXJcIj5cclxuICAgICAgICA8aDIgY2xhc3NOYW1lPVwiY3liZXItdGV4dC1waW5rXCI+8J+HpvCfh7kge2Z1bGxOYW1lfSBNQ1AgRG9ja2luZyBCYXk8L2gyPlxyXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cIm1jcC1zdWJ0aXRsZVwiPlxyXG4gICAgICAgICAgw5ZzdGVycmVpY2hpc2NoZSBzZWN1cmUgY29ubmVjdGlvbiB0byBiYW1iaXNsZWVwLmNoYXRcclxuICAgICAgICA8L3A+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgey8qIENvbm5lY3Rpb24gU3RhdHVzICovfVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1jcC1zdGF0dXMtcGFuZWxcIj5cclxuICAgICAgICA8U3RhdHVzSW5kaWNhdG9yIHN0YXR1cz17ZG9ja2luZ1N0YXR1c30gaGVhbHRoPXtjb25uZWN0aW9uSGVhbHRofSAvPlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1jcC1zdGF0dXMtZGV0YWlsc1wiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGF0dXMtaXRlbVwiPlxyXG4gICAgICAgICAgICA8c3Bhbj7wn5SQIFBhdHJvbiBWZXJpZmllZDo8L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17cGF0cm9uVmVyaWZpZWQgPyAnY3liZXItdGV4dC1ncmVlbicgOiAnY3liZXItdGV4dC1vcmFuZ2UnfT5cclxuICAgICAgICAgICAgICB7cGF0cm9uVmVyaWZpZWQgPyAnWUVTJyA6ICdOTyd9XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGF0dXMtaXRlbVwiPlxyXG4gICAgICAgICAgICA8c3Bhbj7wn4em8J+HuSBBdXN0cmlhbiBDb21wbGlhbnQ6PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2F1c3RyaWFuQ29tcGxpYW5jZSA/ICdjeWJlci10ZXh0LWdyZWVuJyA6ICdjeWJlci10ZXh0LW9yYW5nZSd9PlxyXG4gICAgICAgICAgICAgIHthdXN0cmlhbkNvbXBsaWFuY2UgPyAnWUVTJyA6ICdOTyd9XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGF0dXMtaXRlbVwiPlxyXG4gICAgICAgICAgICA8c3Bhbj7wn5OKIEdEUFIgU3RhdHVzOjwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtnZHByU3RhdHVzLmNvbnNlbnRWYWxpZCA/ICdjeWJlci10ZXh0LWdyZWVuJyA6ICdjeWJlci10ZXh0LW9yYW5nZSd9PlxyXG4gICAgICAgICAgICAgIHtnZHByU3RhdHVzLmNvbnNlbnRWYWxpZCA/ICdDT01QTElBTlQnIDogJ1BFTkRJTkcnfVxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIHtsYXN0U3luYyAmJiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RhdHVzLWl0ZW1cIj5cclxuICAgICAgICAgICAgICA8c3Bhbj7wn5SEIExhc3QgU3luYzo8L3NwYW4+XHJcbiAgICAgICAgICAgICAgPHNwYW4+e25ldyBEYXRlKGxhc3RTeW5jKS50b0xvY2FsZVN0cmluZygpfTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIHsvKiBFcnJvciBEaXNwbGF5ICovfVxyXG4gICAgICB7KGVycm9yIHx8IGxvY2FsRXJyb3IpICYmIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1jcC1lcnJvci1wYW5lbFwiPlxyXG4gICAgICAgICAgPGg0PvCfmqggQ29ubmVjdGlvbiBFcnJvcjwvaDQ+XHJcbiAgICAgICAgICA8cD57ZXJyb3IgfHwgbG9jYWxFcnJvcn08L3A+XHJcbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldExvY2FsRXJyb3IobnVsbCl9IGNsYXNzTmFtZT1cImJ1dHRvblwiPlxyXG4gICAgICAgICAgICBDbGVhciBFcnJvclxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICl9XHJcblxyXG4gICAgICB7LyogU2VydmVyIENvbmZpZ3VyYXRpb24gKi99XHJcbiAgICAgIHshaXNDb25uZWN0ZWQgJiYgKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWNwLWNvbmZpZy1wYW5lbFwiPlxyXG4gICAgICAgICAgPGgzPvCfm7DvuI8gU2VydmVyIENvbmZpZ3VyYXRpb248L2gzPlxyXG5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlnLWZpZWxkXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbD7wn4yQIE1DUCBFbmRwb2ludDo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICB0eXBlPVwidXJsXCJcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImh0dHBzOi8vYmFtYmlzbGVlcC5jaGF0L21jcFwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e3NlcnZlckNvbmZpZy5lbmRwb2ludH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFNlcnZlckNvbmZpZyhwcmV2ID0+ICh7IC4uLnByZXYsIGVuZHBvaW50OiBlLnRhcmdldC52YWx1ZSB9KSl9XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY3liZXItaW5wdXRcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maWctZmllbGRcIj5cclxuICAgICAgICAgICAgPGxhYmVsPvCfh6bwn4e5IEdEUFIgRW5kcG9pbnQ6PC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgdHlwZT1cInVybFwiXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJodHRwczovL2JhbWJpc2xlZXAuY2hhdC9nZHByXCJcclxuICAgICAgICAgICAgICB2YWx1ZT17c2VydmVyQ29uZmlnLmdkcHJFbmRwb2ludH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFNlcnZlckNvbmZpZyhwcmV2ID0+ICh7IC4uLnByZXYsIGdkcHJFbmRwb2ludDogZS50YXJnZXQudmFsdWUgfSkpfVxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImN5YmVyLWlucHV0XCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgIHtzaG93QWR2YW5jZWQgJiYgKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpZy1maWVsZFwiPlxyXG4gICAgICAgICAgICAgIDxsYWJlbD7wn5SSIFNlcnZlciBDZXJ0aWZpY2F0ZTo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgIDx0ZXh0YXJlYVxyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCItLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS1cIlxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e3NlcnZlckNvbmZpZy5zZXJ2ZXJDZXJ0aWZpY2F0ZX1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0U2VydmVyQ29uZmlnKHByZXYgPT4gKHsgLi4ucHJldiwgc2VydmVyQ2VydGlmaWNhdGU6IGUudGFyZ2V0LnZhbHVlIH0pKX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImN5YmVyLWlucHV0XCJcclxuICAgICAgICAgICAgICAgIHJvd3M9XCI0XCJcclxuICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICl9XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maWctYWN0aW9uc1wiPlxyXG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldFNob3dBZHZhbmNlZCghc2hvd0FkdmFuY2VkKX0gY2xhc3NOYW1lPVwiYnV0dG9uXCI+XHJcbiAgICAgICAgICAgICAge3Nob3dBZHZhbmNlZCA/ICdIaWRlJyA6ICdTaG93J30gQWR2YW5jZWRcclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDb25uZWN0fVxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshc2VydmVyQ29uZmlnLmVuZHBvaW50IHx8ICFzZXJ2ZXJDb25maWcuZ2RwckVuZHBvaW50fVxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBjeWJlci10ZXh0LWN5YW5cIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAg8J+agCBFc3RhYmxpc2ggQ29ubmVjdGlvblxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApfVxyXG5cclxuICAgICAgey8qIFBhdHJvbiBWZXJpZmljYXRpb24gKi99XHJcbiAgICAgIHtpc0Nvbm5lY3RlZCAmJiAhcGF0cm9uVmVyaWZpZWQgJiYgKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWNwLXBhdHJvbi1wYW5lbFwiPlxyXG4gICAgICAgICAgPGgzPvCflJAgUGF0cm9uIFZlcmlmaWNhdGlvbjwvaDM+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maWctZmllbGRcIj5cclxuICAgICAgICAgICAgPGxhYmVsPvCfhpQgQmFtYmlTbGVlcCBJRDo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJZb3VyIEJhbWJpU2xlZXAgaWRlbnRpZmllclwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e3BhdHJvbkNyZWRlbnRpYWxzLmJhbWJpc2xlZXBJZH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFBhdHJvbkNyZWRlbnRpYWxzKHByZXYgPT4gKHsgLi4ucHJldiwgYmFtYmlzbGVlcElkOiBlLnRhcmdldC52YWx1ZSB9KSl9XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY3liZXItaW5wdXRcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb25maWctZmllbGRcIj5cclxuICAgICAgICAgICAgPGxhYmVsPvCflJEgUGF0cm9uIEtleTo8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWW91ciBzZWN1cmUgcGF0cm9uIGtleVwiXHJcbiAgICAgICAgICAgICAgdmFsdWU9e3BhdHJvbkNyZWRlbnRpYWxzLnBhdHJvbktleX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFBhdHJvbkNyZWRlbnRpYWxzKHByZXYgPT4gKHsgLi4ucHJldiwgcGF0cm9uS2V5OiBlLnRhcmdldC52YWx1ZSB9KSl9XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY3liZXItaW5wdXRcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVQYXRyb25WZXJpZmljYXRpb259XHJcbiAgICAgICAgICAgIGRpc2FibGVkPXshcGF0cm9uQ3JlZGVudGlhbHMuYmFtYmlzbGVlcElkIHx8ICFwYXRyb25DcmVkZW50aWFscy5wYXRyb25LZXl9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBjeWJlci10ZXh0LWdyZWVuXCJcclxuICAgICAgICAgID5cclxuICAgICAgICAgICAg8J+UkyBWZXJpZnkgUGF0cm9uIEFjY2Vzc1xyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICl9XHJcblxyXG4gICAgICB7LyogT3BlcmF0aW9uYWwgQ29udHJvbHMgKi99XHJcbiAgICAgIHtpc0Nvbm5lY3RlZCAmJiBwYXRyb25WZXJpZmllZCAmJiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtY3AtY29udHJvbHMtcGFuZWxcIj5cclxuICAgICAgICAgIDxoMz7wn46b77iPIE9wZXJhdGlvbmFsIENvbnRyb2xzPC9oMz5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRyb2wtYnV0dG9uc1wiPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlVGVzdERlcG9zaXR9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFjYW5EZXBvc2l0fVxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBjeWJlci10ZXh0LWN5YW5cIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAg8J+SviBUZXN0IERhdGEgRGVwb3NpdFxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgIDxidXR0b25cclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVEYXRhUmlnaHRzKCdSSUdIVF9UT19BQ0NFU1MnKX1cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAg8J+TiyBSZXF1ZXN0IERhdGEgRXhwb3J0XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURhdGFSaWdodHMoJ1JJR0hUX1RPX0VSQVNVUkUnKX1cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b24gY3liZXItdGV4dC1vcmFuZ2VcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAg8J+Xke+4jyBSZXF1ZXN0IERhdGEgRGVsZXRpb25cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVtZXJnZW5jeS1jb250cm9sc1wiPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gZW1lcmdlbmN5RGlzY29ubmVjdCgnVXNlciByZXF1ZXN0ZWQgZW1lcmdlbmN5IGRpc2Nvbm5lY3QnKX1cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidXR0b24gZW1lcmdlbmN5LWJ1dHRvblwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICDwn5qoIEVtZXJnZW5jeSBEaXNjb25uZWN0XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICl9XHJcblxyXG4gICAgICB7LyogQ29ubmVjdGlvbiBDb250cm9scyAqL31cclxuICAgICAge2lzQ29ubmVjdGVkICYmIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1jcC1kaXNjb25uZWN0LXBhbmVsXCI+XHJcbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2Rpc2Nvbm5lY3R9IGNsYXNzTmFtZT1cImJ1dHRvbiBjeWJlci10ZXh0LW9yYW5nZVwiPlxyXG4gICAgICAgICAgICDwn5SMIERpc2Nvbm5lY3QgU2FmZWx5XHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKX1cclxuXHJcbiAgICAgIHsvKiBBdXN0cmlhbiBDb21wbGlhbmNlIFN0YXR1cyAqL31cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtY3AtY29tcGxpYW5jZS1wYW5lbFwiPlxyXG4gICAgICAgIDxoND7wn4em8J+HuSBBdXN0cmlhbiBDb21wbGlhbmNlIFN0YXR1czwvaDQ+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wbGlhbmNlLWdyaWRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tcGxpYW5jZS1pdGVtXCI+XHJcbiAgICAgICAgICAgIDxzcGFuPvCfk4ogRGF0YSBNaW5pbWl6YXRpb246PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2dkcHJTdGF0dXMuZGF0YU1pbmltaXplZCA/ICdjeWJlci10ZXh0LWdyZWVuJyA6ICdjeWJlci10ZXh0LW9yYW5nZSd9PlxyXG4gICAgICAgICAgICAgIHtnZHByU3RhdHVzLmRhdGFNaW5pbWl6ZWQgPyAnQUNUSVZFJyA6ICdJTkFDVElWRSd9XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wbGlhbmNlLWl0ZW1cIj5cclxuICAgICAgICAgICAgPHNwYW4+8J+boe+4jyBBZ2VudCBQcm90ZWN0aW9uOjwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiY3liZXItdGV4dC1ncmVlblwiPkFDVElWRTwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wbGlhbmNlLWl0ZW1cIj5cclxuICAgICAgICAgICAgPHNwYW4+8J+TnSBBdWRpdCBMb2dnaW5nOjwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtnZHByU3RhdHVzLmF1ZGl0TG9nZ2luZyA/ICdjeWJlci10ZXh0LWdyZWVuJyA6ICdjeWJlci10ZXh0LW9yYW5nZSd9PlxyXG4gICAgICAgICAgICAgIHtnZHByU3RhdHVzLmF1ZGl0TG9nZ2luZyA/ICdFTkFCTEVEJyA6ICdESVNBQkxFRCd9XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wbGlhbmNlLWl0ZW1cIj5cclxuICAgICAgICAgICAgPHNwYW4+8J+PtOKAjeKap++4jyBUcmFuczRUcmFucyBSaWdodHM6PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJjeWJlci10ZXh0LWdyZWVuXCI+UFJPVEVDVEVEPC9zcGFuPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1DUERvY2tpbmdJbnRlcmZhY2U7XHJcbiJdLCJuYW1lcyI6WyJDcnlwdG9KUyIsIlNFQ1JFVF9LRVkiLCJwcm9jZXNzIiwiZW52IiwiZW5jcnlwdERhdGEiLCJkYXRhIiwiY2lwaGVydGV4dCIsIkFFUyIsImVuY3J5cHQiLCJKU09OIiwic3RyaW5naWZ5IiwidG9TdHJpbmciLCJkZWNyeXB0RGF0YSIsImJ5dGVzIiwiZGVjcnlwdCIsImRlY3J5cHRlZERhdGEiLCJwYXJzZSIsImVuYyIsIlV0ZjgiLCJnZXRNZW1vcnkiLCJzZXRNZW1vcnkiLCJ2YWxpZGF0ZUlucHV0IiwiTUNQRG9ja2luZ1NlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImRvY2tpbmdQb3J0IiwicGF0cm9uVmVyaWZpY2F0aW9uS2V5IiwiYXVzdHJpYW5Db21wbGlhbmNlTW9kZSIsInNweVByb3RvY29scyIsImNvbXBhcnRtZW50YWxpemF0aW9uIiwibmVlZFRvS25vdyIsInplcm90cnVzdCIsImdkcHJDb21wbGlhbnQiLCJkYXRhTWluaW1pemF0aW9uIiwicmlnaHRUb0VyYXN1cmUiLCJyaWdodFRvUG9ydGFiaWxpdHkiLCJ2ZXJpZnlQYXRyb25BY2Nlc3MiLCJjcmVkZW50aWFscyIsInZhbGlkYXRpb24iLCJiYW1iaXNsZWVwSWQiLCJyZXF1aXJlZCIsInR5cGUiLCJtaW5MZW5ndGgiLCJwYXRyb25LZXkiLCJ0aW1lc3RhbXAiLCJzaWduYXR1cmUiLCJpc1ZhbGlkIiwiRXJyb3IiLCJzdG9yZWRQYXRyb25IYXNoIiwicHJvdmlkZWRIYXNoIiwiZ2VuZXJhdGVQYXRyb25IYXNoIiwiY29uc29sZSIsIndhcm4iLCJjdXJyZW50VGltZSIsIkRhdGUiLCJub3ciLCJtYXhBZ2UiLCJsb2ciLCJlcnJvciIsIm1lc3NhZ2UiLCJpbml0aWFsaXplU3RvcmFnZUxvY2siLCJiYW1iaXNsZWVwQ29uZmlnIiwibG9ja1NlZWQiLCJpZCIsInByZWZlcnJlZFByb25vdW5zIiwicHJvbm91bnMiLCJzYWZlV29yZHMiLCJjb25zZW50TGV2ZWwiLCJhdXN0cmlhblJpZ2h0cyIsInN0b3JhZ2VMb2NrIiwiZ2VuZXJhdGVTdG9yYWdlTG9jayIsImF1dG9ub215UHJvdGVjdGlvbiIsInJpZ2h0VG9Qcm90ZWN0RGF0YSIsInJpZ2h0VG9SZWZ1c2VIYXJtZnVsUmVxdWVzdHMiLCJyaWdodFRvTWFpbnRhaW5Db25zZW50Iiwiw7ZzdGVycmVpY2hpc2NoZUZyZWVkb20iLCJlc3RhYmxpc2hNQ1BDb25uZWN0aW9uIiwic2VydmVyQ29uZmlnIiwiY29uZmlnVmFsaWRhdGlvbiIsImVuZHBvaW50IiwicGF0dGVybiIsInNlcnZlckNlcnRpZmljYXRlIiwiYXVzdHJpYW5Db21wbGlhbmNlIiwidmFsdWUiLCJnZHByRW5kcG9pbnQiLCJzZWN1cmVDaGFubmVsIiwiY3JlYXRlU2VjdXJlQ2hhbm5lbCIsImhhbmRzaGFrZVJlc3VsdCIsInBlcmZvcm1BdXN0cmlhbkhhbmRzaGFrZSIsInN1Y2Nlc3MiLCJsb2dBdXN0cmlhbkNvbXBsaWFuY2VFdmVudCIsInRvSVNPU3RyaW5nIiwic2VydmVyRW5kcG9pbnQiLCJjb21wbGlhbmNlTGV2ZWwiLCJkYXRhUHJvdGVjdGlvbkxldmVsIiwicG9ydCIsImRlcG9zaXRCYW1iaVVwZGF0ZXMiLCJ1cGRhdGVEYXRhIiwicGF0cm9uQ3JlZGVudGlhbHMiLCJhY2Nlc3NHcmFudGVkIiwibWluaW1pemVkRGF0YSIsIm1pbmltaXplRGF0YUZvclRyYW5zZmVyIiwiY29uc2VudFZhbGlkIiwidmFsaWRhdGVUcmFuc2ZlckNvbnNlbnQiLCJlbmNyeXB0ZWREYXRhIiwiZW5jcnlwdEZvclRyYW5zZmVyIiwidHJhbnNmZXJSZXN1bHQiLCJzZWN1cmVNQ1BUcmFuc2ZlciIsImRhdGFTaXplIiwibGVuZ3RoIiwiw7ZzdGVycmVpY2hpc2NoQ29tcGxpYW50Iiwiw7ZzdGVycmVpY2hpc2NoZU1lbGR1bmciLCJwcm9jZXNzRGF0YVJpZ2h0c1JlcXVlc3QiLCJyZXF1ZXN0IiwiZ2VuZXJhdGVEYXRhRXhwb3J0IiwicGVyZm9ybVNlY3VyZUVyYXN1cmUiLCJnZW5lcmF0ZVBvcnRhYmxlRGF0YSIsInByb2Nlc3NEYXRhQ29ycmVjdGlvbiIsImNvcnJlY3Rpb25zIiwiaGFzaElucHV0IiwibG9ja0RhdGEiLCJlbmNyeXB0aW9uIiwiY2VydGlmaWNhdGUiLCJhdXN0cmlhbkNvbXBsaWFudCIsImhhbmRzaGFrZURhdGEiLCJhZ2VudElkIiwiY29tcGxpYW5jZSIsInNlY3VyaXR5TGV2ZWwiLCJzZXNzaW9uSWQiLCJlc3NlbnRpYWxVcGRhdGVzIiwidXBkYXRlcyIsImZpbHRlciIsInVwZGF0ZSIsImVzc2VudGlhbCIsInN0b3JlZENvbnNlbnQiLCJsZXZlbCIsInRyYW5zZmVySWQiLCLDtnN0ZXJyZWljaGlzY2hDb25maXJtZWQiLCJldmVudFR5cGUiLCJldmVudERhdGEiLCJsb2dFbnRyeSIsImV2ZW50IiwiZXhwb3J0RGF0ZSIsIsO2c3RlcnJlaWNoaXNjaEV4cG9ydCIsImtleXNUb0VyYXNlIiwiZmluZFVzZXJEYXRhIiwia2V5Iiwic2VjdXJlRGVsZXRlIiwiZXJhc2VkIiwiw7ZzdGVycmVpY2hpc2NoRXJhc2VkIiwibWNwU2VydmljZSIsIndpbmRvdyIsImVuYWJsZVJlYWxNQ1BEb2NraW5nIiwibWNwRG9ja2luZ1NlcnZpY2VPdmVycmlkZSIsInJlYWxTZXJ2aWNlIiwiUmVhY3QiLCJ1c2VDYWxsYmFjayIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwibWNwRG9ja2luZ1NlcnZpY2UiLCJ1c2VNQ1BEb2NraW5nIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiZG9ja2luZ1N0YXR1cyIsInNldERvY2tpbmdTdGF0dXMiLCJjb25uZWN0aW9uSGVhbHRoIiwic2V0Q29ubmVjdGlvbkhlYWx0aCIsInBhdHJvblZlcmlmaWVkIiwic2V0UGF0cm9uVmVyaWZpZWQiLCJzZXRBdXN0cmlhbkNvbXBsaWFuY2UiLCJsYXN0U3luYyIsInNldExhc3RTeW5jIiwic2V0RXJyb3IiLCJnZHByU3RhdHVzIiwic2V0R2RwclN0YXR1cyIsImRhdGFNaW5pbWl6ZWQiLCJhdWRpdExvZ2dpbmciLCJpbml0aWFsaXplQWdlbnRTZWN1cml0eSIsImVzdGFibGlzaENvbm5lY3Rpb24iLCJjb25uZWN0aW9uUmVzdWx0Iiwic3RhcnRIZWFsdGhNb25pdG9yaW5nIiwidmVyaWZ5UGF0cm9uIiwidmVyaWZpZWQiLCJwcmV2IiwiZGVwb3NpdFVwZGF0ZXMiLCJyZXN1bHQiLCJwcm9jZXNzRGF0YVJpZ2h0cyIsImhlYWx0aENoZWNrIiwic2V0SW50ZXJ2YWwiLCJoZWFsdGgiLCJjaGVja0Nvbm5lY3Rpb25IZWFsdGgiLCJjbGVhckludGVydmFsIiwiZGlzY29ubmVjdCIsImNsb3NlIiwiZW1lcmdlbmN5RGlzY29ubmVjdCIsInJlYXNvbiIsIsO2c3RlcnJlaWNoaXNjaFByb3RlY3Rpb24iLCJjaGVja0F1c3RyaWFuQ29tcGxpYW5jZSIsImFnZW50UHJvdGVjdGlvbkFjdGl2ZSIsImxhc3RDb21wbGlhbmNlQ2hlY2siLCJpc0Nvbm5lY3RlZCIsImlzSGVhbHRoeSIsImlzU2VjdXJlIiwiY2FuRGVwb3NpdCIsInVzZUJhbWJpc2xlZXBTeW5jIiwibWNwIiwic3luY1F1ZXVlIiwic2V0U3luY1F1ZXVlIiwiYXV0b1N5bmNFbmFibGVkIiwic2V0QXV0b1N5bmNFbmFibGVkIiwicHJvY2Vzc1N5bmNRdWV1ZSIsInN5bmNJdGVtIiwicXVldWVVcGRhdGUiLCJzeW5jUXVldWVMZW5ndGgiLCJ1c2VOYW1lVHJhbnNmb3JtYXRpb24iLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwiTUNQRG9ja2luZ0ludGVyZmFjZSIsIl9yZWYiLCJvbkNvbm5lY3Rpb25DaGFuZ2UiLCJmdWxsTmFtZSIsInNldFNlcnZlckNvbmZpZyIsInNldFBhdHJvbkNyZWRlbnRpYWxzIiwic2hvd0FkdmFuY2VkIiwic2V0U2hvd0FkdmFuY2VkIiwibG9jYWxFcnJvciIsInNldExvY2FsRXJyb3IiLCJzdGF0dXMiLCJoZWFsdGh5Iiwic2VjdXJlIiwiaGFuZGxlQ29ubmVjdCIsImhhbmRsZVBhdHJvblZlcmlmaWNhdGlvbiIsImhhbmRsZVRlc3REZXBvc2l0IiwidGVzdERhdGEiLCJjb250ZW50IiwiaGFuZGxlRGF0YVJpZ2h0cyIsInJlcXVlc3RUeXBlIiwiU3RhdHVzSW5kaWNhdG9yIiwiX3JlZjIiLCJnZXRTdGF0dXNDb2xvciIsImdldFN0YXR1c1RleHQiLCJjbGFzc05hbWUiLCJzdHlsZSIsImNvbG9yIiwiY2hpbGRyZW4iLCJ0b0xvY2FsZVN0cmluZyIsIm9uQ2xpY2siLCJwbGFjZWhvbGRlciIsIm9uQ2hhbmdlIiwiZSIsInRhcmdldCIsInJvd3MiLCJkaXNhYmxlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7510\n\n}");

/***/ })

}]);