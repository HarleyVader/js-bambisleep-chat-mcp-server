"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkbambisleep_chat_agent"] = self["webpackChunkbambisleep_chat_agent"] || []).push([[240],{

/***/ 9863:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ journal_JournalEditor)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./src/services/emotionalIntelligence.js\nvar emotionalIntelligence = __webpack_require__(8839);\n// EXTERNAL MODULE: ./src/services/memoryService.js\nvar memoryService = __webpack_require__(9522);\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(4848);\n;// ./src/components/journal/EmotionalTagging.js\n// EmotionalTagging.js - Enhanced emotion selection with Agent Dr Girlfriend personality\n// Following copilot-instructions.md: Emotional UX design with multi-select capabilities\n\n\n\nconst EmotionalTagging = _ref => {\n  let {\n    onTagging,\n    selectedEmotions = [],\n    detectedMood = 'neutral'\n  } = _ref;\n  const [localSelectedEmotions, setLocalSelectedEmotions] = (0,react.useState)(selectedEmotions);\n\n  // Comprehensive emotion palette with Agent Dr Girlfriend styling\n  const emotions = [{\n    name: 'joyful',\n    emoji: '😊',\n    color: 'joy',\n    category: 'positive'\n  }, {\n    name: 'excited',\n    emoji: '🤩',\n    color: 'excitement',\n    category: 'positive'\n  }, {\n    name: 'love',\n    emoji: '💖',\n    color: 'romantic',\n    category: 'positive'\n  }, {\n    name: 'grateful',\n    emoji: '🙏',\n    color: 'peaceful',\n    category: 'positive'\n  }, {\n    name: 'creative',\n    emoji: '✨',\n    color: 'creative',\n    category: 'positive'\n  }, {\n    name: 'confident',\n    emoji: '💪',\n    color: 'empowered',\n    category: 'positive'\n  }, {\n    name: 'peaceful',\n    emoji: '🧘',\n    color: 'calm',\n    category: 'neutral'\n  }, {\n    name: 'contemplative',\n    emoji: '🤔',\n    color: 'thoughtful',\n    category: 'neutral'\n  }, {\n    name: 'curious',\n    emoji: '🔮',\n    color: 'mysterious',\n    category: 'neutral'\n  }, {\n    name: 'nostalgic',\n    emoji: '🌙',\n    color: 'dreamy',\n    category: 'neutral'\n  }, {\n    name: 'melancholy',\n    emoji: '🍂',\n    color: 'wistful',\n    category: 'complex'\n  }, {\n    name: 'anxious',\n    emoji: '😰',\n    color: 'nervous',\n    category: 'challenging'\n  }, {\n    name: 'frustrated',\n    emoji: '😤',\n    color: 'tense',\n    category: 'challenging'\n  }, {\n    name: 'lonely',\n    emoji: '🌧️',\n    color: 'sad',\n    category: 'challenging'\n  }, {\n    name: 'overwhelmed',\n    emoji: '🌀',\n    color: 'chaotic',\n    category: 'challenging'\n  }, {\n    name: 'yearning',\n    emoji: '🌟',\n    color: 'longing',\n    category: 'complex'\n  }];\n\n  // Update local state when props change\n  (0,react.useEffect)(() => {\n    setLocalSelectedEmotions(selectedEmotions);\n  }, [selectedEmotions]);\n  const handleEmotionToggle = emotion => {\n    let updatedEmotions;\n    if (localSelectedEmotions.includes(emotion.name)) {\n      // Remove emotion if already selected\n      updatedEmotions = localSelectedEmotions.filter(e => e !== emotion.name);\n    } else {\n      // Add emotion if not selected\n      updatedEmotions = [...localSelectedEmotions, emotion.name];\n    }\n    setLocalSelectedEmotions(updatedEmotions);\n\n    // Notify parent component\n    if (onTagging) {\n      onTagging(updatedEmotions);\n    }\n  };\n  const clearAllEmotions = () => {\n    setLocalSelectedEmotions([]);\n    if (onTagging) {\n      onTagging([]);\n    }\n  };\n  const getEmotionsByCategory = category => {\n    return emotions.filter(emotion => emotion.category === category);\n  };\n  const categories = [{\n    name: 'positive',\n    title: '✨ Radiant Emotions',\n    description: 'Light & uplifting'\n  }, {\n    name: 'neutral',\n    title: '🌙 Balanced Emotions',\n    description: 'Centered & contemplative'\n  }, {\n    name: 'complex',\n    title: '🎭 Complex Emotions',\n    description: 'Nuanced & layered'\n  }, {\n    name: 'challenging',\n    title: '🌪️ Intense Emotions',\n    description: 'Difficult but valid'\n  }];\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: \"emotional-tagging\",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"emotion-header\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n        className: \"emotion-title\",\n        children: \"\\uD83D\\uDC9D Emotional Palette\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"emotion-meta\",\n        children: [detectedMood !== 'neutral' && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"span\", {\n          className: `detected-mood mood-${detectedMood}`,\n          children: [\"\\uD83D\\uDD0D Detected: \", detectedMood]\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"span\", {\n          className: \"selected-count\",\n          children: [localSelectedEmotions.length, \" emotion\", localSelectedEmotions.length !== 1 ? 's' : '', \" selected\"]\n        })]\n      })]\n    }), localSelectedEmotions.length > 0 && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"selected-emotions-summary\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"selected-emotions\",\n        children: localSelectedEmotions.map(emotionName => {\n          const emotion = emotions.find(e => e.name === emotionName);\n          return emotion ? /*#__PURE__*/(0,jsx_runtime.jsxs)(\"span\", {\n            className: `selected-emotion emotion-${emotion.color}`,\n            children: [emotion.emoji, \" \", emotion.name]\n          }, emotionName) : null;\n        })\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n        onClick: clearAllEmotions,\n        className: \"clear-emotions-btn\",\n        children: \"Clear All\"\n      })]\n    }), categories.map(category => /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: `emotion-category category-${category.name}`,\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"category-header\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h4\", {\n          className: \"category-title\",\n          children: category.title\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n          className: \"category-description\",\n          children: category.description\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n        className: \"emotion-grid\",\n        children: getEmotionsByCategory(category.name).map(emotion => /*#__PURE__*/(0,jsx_runtime.jsxs)(\"button\", {\n          className: `emotion-button emotion-${emotion.color} ${localSelectedEmotions.includes(emotion.name) ? 'selected' : ''} ${detectedMood === emotion.name ? 'detected' : ''}`,\n          onClick: () => handleEmotionToggle(emotion),\n          \"aria-pressed\": localSelectedEmotions.includes(emotion.name),\n          title: `${emotion.emoji} ${emotion.name} - Click to ${localSelectedEmotions.includes(emotion.name) ? 'remove' : 'add'}`,\n          children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"emotion-emoji\",\n            children: emotion.emoji\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"emotion-name\",\n            children: emotion.name\n          }), localSelectedEmotions.includes(emotion.name) && /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"selected-indicator\",\n            children: \"\\u2713\"\n          }), detectedMood === emotion.name && /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n            className: \"detected-indicator\",\n            children: \"\\uD83D\\uDD0D\"\n          })]\n        }, emotion.name))\n      })]\n    }, category.name)), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n      className: \"emotion-guidance\",\n      children: /*#__PURE__*/(0,jsx_runtime.jsxs)(\"p\", {\n        className: \"emotion-tip\",\n        children: [\"\\uD83D\\uDCA1 \", /*#__PURE__*/(0,jsx_runtime.jsx)(\"em\", {\n          children: \"Multiple emotions can coexist beautifully. Select all that resonate with your experience, darling.\"\n        })]\n      })\n    })]\n  });\n};\n/* harmony default export */ const journal_EmotionalTagging = (EmotionalTagging);\n// EXTERNAL MODULE: ./src/hooks/useNameTransformation.js\nvar useNameTransformation = __webpack_require__(9077);\n// EXTERNAL MODULE: ./src/utils/validation.js\nvar validation = __webpack_require__(266);\n;// ./src/components/journal/JournalEditor.js\n// JournalEditor.js - Enhanced journal with emotional intelligence\n// Following copilot-instructions.md: Emotional UX design with autosave\n\n\n\n\n\n\n\n\nconst JournalEditor = () => {\n  const [entry, setEntry] = (0,react.useState)('');\n  const [emotions, setEmotions] = (0,react.useState)([]);\n  const [isAutoSaving, setIsAutoSaving] = (0,react.useState)(false);\n  const [lastSaved, setLastSaved] = (0,react.useState)(null);\n  const [currentMood, setCurrentMood] = (0,react.useState)('neutral');\n\n  // Import name transformation hook\n  const {\n    getDisplayName,\n    fullName\n  } = (0,useNameTransformation/* default */.A)();\n  const [journalEntries, setJournalEntries] = (0,react.useState)([]);\n  const [selectedEntry, setSelectedEntry] = (0,react.useState)(null);\n  const autoSaveTimeout = (0,react.useRef)(null);\n\n  // Load journal entries on mount\n  (0,react.useEffect)(() => {\n    const loadJournalEntries = async () => {\n      try {\n        const savedEntries = (await (0,memoryService/* getMemory */.So)('journal_entries')) || [];\n        setJournalEntries(savedEntries);\n\n        // Load draft if exists\n        const draft = await (0,memoryService/* getMemory */.So)('journal_draft');\n        if (draft) {\n          setEntry(draft.text || '');\n          setEmotions(draft.emotions || []);\n        }\n      } catch (error) {\n        console.error('Error loading journal:', error);\n      }\n    };\n    loadJournalEntries();\n  }, []);\n\n  // Auto-save functionality\n  (0,react.useEffect)(() => {\n    if (entry.trim()) {\n      // Clear existing timeout\n      if (autoSaveTimeout.current) {\n        clearTimeout(autoSaveTimeout.current);\n      }\n\n      // Set new timeout for auto-save\n      autoSaveTimeout.current = setTimeout(async () => {\n        try {\n          setIsAutoSaving(true);\n          const draft = {\n            text: entry,\n            emotions: emotions,\n            lastModified: new Date().toISOString()\n          };\n          await (0,memoryService/* setMemory */.S0)('journal_draft', draft);\n          setLastSaved(new Date());\n        } catch (error) {\n          console.error('Auto-save failed:', error);\n        } finally {\n          setIsAutoSaving(false);\n        }\n      }, 2000); // Auto-save after 2 seconds of inactivity\n    }\n    return () => {\n      if (autoSaveTimeout.current) {\n        clearTimeout(autoSaveTimeout.current);\n      }\n    };\n  }, [entry, emotions]);\n\n  // Analyze emotion when text changes\n  (0,react.useEffect)(() => {\n    if (entry.length > 10) {\n      // Only analyze if there's substantial content\n      const emotionalAnalysis = (0,emotionalIntelligence/* analyzeEmotion */.MZ)(entry);\n      setCurrentMood(emotionalAnalysis.emotion);\n    }\n  }, [entry]);\n  const handleTextChange = event => {\n    const newText = event.target.value;\n    setEntry(newText);\n  };\n  const handleEmotionTagging = newEmotions => {\n    setEmotions(newEmotions);\n  };\n  const saveEntry = async () => {\n    if (!entry.trim()) {\n      alert('Please write something before saving!');\n      return;\n    }\n    try {\n      const sanitizedEntry = (0,validation/* validateInput */.TT)(entry);\n      if (!sanitizedEntry) {\n        alert('Invalid content detected. Please check your entry.');\n        return;\n      }\n      const emotionalAnalysis = (0,emotionalIntelligence/* analyzeEmotion */.MZ)(entry);\n      const journalEntry = {\n        id: `journal-${Date.now()}`,\n        text: sanitizedEntry,\n        emotions: emotions,\n        detectedMood: emotionalAnalysis.emotion,\n        confidence: emotionalAnalysis.confidence,\n        timestamp: new Date().toISOString(),\n        wordCount: sanitizedEntry.split(' ').filter(word => word.length > 0).length\n      };\n\n      // Track emotional pattern\n      await (0,emotionalIntelligence/* trackEmotionalPattern */.Kj)(emotionalAnalysis.emotion, {\n        type: 'journal_entry',\n        wordCount: journalEntry.wordCount,\n        manualEmotions: emotions\n      });\n\n      // Save to journal entries\n      const updatedEntries = [journalEntry, ...journalEntries];\n      setJournalEntries(updatedEntries);\n      await (0,memoryService/* setMemory */.S0)('journal_entries', updatedEntries);\n\n      // Clear draft\n      await (0,memoryService/* setMemory */.S0)('journal_draft', null);\n\n      // Reset form\n      setEntry('');\n      setEmotions([]);\n      setCurrentMood('neutral');\n      setLastSaved(new Date());\n      alert('Journal entry saved successfully! 💖');\n    } catch (error) {\n      console.error('Error saving journal entry:', error);\n      alert('Failed to save entry. Please try again.');\n    }\n  };\n  const loadEntry = entryId => {\n    const entryToLoad = journalEntries.find(entry => entry.id === entryId);\n    if (entryToLoad) {\n      setEntry(entryToLoad.text);\n      setEmotions(entryToLoad.emotions || []);\n      setSelectedEntry(entryToLoad);\n    }\n  };\n  const deleteEntry = async entryId => {\n    if (confirm('Are you sure you want to delete this journal entry?')) {\n      try {\n        const updatedEntries = journalEntries.filter(entry => entry.id !== entryId);\n        setJournalEntries(updatedEntries);\n        await (0,memoryService/* setMemory */.S0)('journal_entries', updatedEntries);\n        if (selectedEntry && selectedEntry.id === entryId) {\n          setEntry('');\n          setEmotions([]);\n          setSelectedEntry(null);\n        }\n      } catch (error) {\n        console.error('Error deleting entry:', error);\n        alert('Failed to delete entry.');\n      }\n    }\n  };\n  const newEntry = () => {\n    if (entry.trim() && !confirm('You have unsaved changes. Start a new entry?')) {\n      return;\n    }\n    setEntry('');\n    setEmotions([]);\n    setSelectedEntry(null);\n    setCurrentMood('neutral');\n  };\n  const formatTimestamp = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleDateString() + ' at ' + date.toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n    className: \"journal-editor\",\n    children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"journal-header\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h2\", {\n        className: `journal-title mood-${currentMood}`,\n        children: \"\\uD83D\\uDCDD Dream Journal Mode\"\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"journal-controls\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          onClick: newEntry,\n          className: \"btn-secondary\",\n          children: \"New Entry\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n          onClick: saveEntry,\n          className: \"btn-primary\",\n          disabled: !entry.trim(),\n          children: \"Save Entry\"\n        })]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"journal-status\",\n      children: [isAutoSaving && /*#__PURE__*/(0,jsx_runtime.jsx)(\"span\", {\n        className: \"auto-save-indicator\",\n        children: \"\\uD83D\\uDCBE Auto-saving...\"\n      }), lastSaved && !isAutoSaving && /*#__PURE__*/(0,jsx_runtime.jsxs)(\"span\", {\n        className: \"last-saved\",\n        children: [\"\\u2705 Last saved: \", formatTimestamp(lastSaved)]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"span\", {\n        className: `mood-indicator mood-${currentMood}`,\n        children: [\"Current mood: \", currentMood]\n      })]\n    }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n      className: \"journal-main\",\n      children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"journal-editor-panel\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"textarea\", {\n          value: entry,\n          onChange: handleTextChange,\n          placeholder: `Pour your thoughts, dreams, and feelings onto this digital canvas... Let ${fullName} help you explore your inner landscape. ✨`,\n          className: `journal-textarea mood-${currentMood}`,\n          rows: \"15\",\n          \"aria-label\": \"Journal entry text area\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n          className: \"journal-meta\",\n          children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: \"word-count\",\n            children: [\"Words: \", entry.split(' ').filter(word => word.length > 0).length]\n          }), /*#__PURE__*/(0,jsx_runtime.jsx)(journal_EmotionalTagging, {\n            onTagging: handleEmotionTagging,\n            selectedEmotions: emotions,\n            detectedMood: currentMood\n          })]\n        })]\n      }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n        className: \"journal-sidebar\",\n        children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"h3\", {\n          children: \"Previous Entries\"\n        }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n          className: \"journal-entries-list\",\n          children: journalEntries.length === 0 ? /*#__PURE__*/(0,jsx_runtime.jsx)(\"p\", {\n            className: \"no-entries\",\n            children: \"No journal entries yet. Start writing! \\uD83D\\uDCAB\"\n          }) : journalEntries.map(journalEntry => /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n            className: `journal-entry-item ${selectedEntry?.id === journalEntry.id ? 'selected' : ''}`,\n            children: [/*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n              className: \"entry-preview\",\n              onClick: () => loadEntry(journalEntry.id),\n              children: [/*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: \"entry-date\",\n                children: formatTimestamp(journalEntry.timestamp)\n              }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"div\", {\n                className: `entry-mood mood-${journalEntry.detectedMood}`,\n                children: journalEntry.detectedMood\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"entry-text-preview\",\n                children: [journalEntry.text.substring(0, 100), \"...\"]\n              }), /*#__PURE__*/(0,jsx_runtime.jsxs)(\"div\", {\n                className: \"entry-meta\",\n                children: [journalEntry.wordCount, \" words\"]\n              })]\n            }), /*#__PURE__*/(0,jsx_runtime.jsx)(\"button\", {\n              onClick: () => deleteEntry(journalEntry.id),\n              className: \"delete-entry-btn\",\n              \"aria-label\": \"Delete entry\",\n              children: \"\\uD83D\\uDDD1\\uFE0F\"\n            })]\n          }, journalEntry.id))\n        })]\n      })]\n    })]\n  });\n};\n/* harmony default export */ const journal_JournalEditor = (JournalEditor);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9863\n\n}");

/***/ })

}]);